{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> AIR: The new web framework that breathes fresh air into Python web development. Built with FastAPI, Starlette, and Pydantic. </p> <p> </p>"},{"location":"#why-use-air","title":"Why use Air?","text":"<ul> <li>Powered by FastAPI - Designed to work with FastAPI so you can serve your API and web pages from one app</li> <li>Fast to code - Tons of intuitive shortcuts and optimizations designed to expedite coding HTML with FastAPI</li> <li>Air Tags - Easy to write and performant HTML content generation using Python classes to render HTML</li> <li>Jinja Friendly - No need to write <code>response_class=HtmlResponse</code> and <code>templates.TemplateResponse</code> for every HTML view</li> <li>Mix Jinja and Air Tags - Jinja and Air Tags both are first class citizens. Use either or both in the same view!</li> <li>HTMX friendly - We love HTMX and provide utilities to use it with Air</li> <li>HTML form validation powered by pydantic - We love using pydantic to validate incoming data. Air Forms provide two ways to use pydantic with HTML forms (dependency injection or from within views)</li> <li>Easy to learn yet well documented - Hopefully Air is so intuitive and well-typed you'll barely need to use the documentation. In case you do need to look something up we're taking our experience writing technical books and using it to make documentation worth boasting about</li> </ul> <p>Documentation: https://feldroy.github.io/air/</p> <p>Source Code: https://github.com/feldroy/air</p>"},{"location":"#installation","title":"Installation","text":"<p>Install using <code>pip install -U air</code> or <code>conda install air -c conda-forge</code>.</p> <p>For <code>uv</code> users, just create a virtualenv and install the air package, like:</p> <pre><code>uv venv\nsource .venv/bin/activate\nuv add air\nuv add \"fastapi[standard]\"\n</code></pre>"},{"location":"#a-simple-example","title":"A Simple Example","text":"<p>Create a <code>main.py</code> with:</p> <pre><code>import air\n\napp = air.Air()\n\n\n@app.get(\"/\")\nasync def index():\n    return air.Html(air.H1(\"Hello, world!\", style=\"color: blue;\"))\n</code></pre> <p>Note</p> <p>This example uses Air Tags, which are Python classes that render as HTML. Air Tags are typed and documented, designed to work well with any code completion tool.</p>"},{"location":"#combining-fastapi-and-air","title":"Combining FastAPI and Air","text":"<p>Air is just a layer over FastAPI. So it is trivial to combine sophisticated HTML pages and a REST API into one app. </p> <pre><code>import air\nfrom fastapi import FastAPI\n\napp = air.Air()\napi = FastAPI()\n\n@app.get(\"/\")\ndef landing_page():\n    return air.Html(\n        air.Head(air.Title(\"Awesome SaaS\")),\n        air.Body(\n            air.H1(\"Awesome SaaS\"),\n            air.P(air.A(\"API Docs\", target=\"_blank\", href=\"/api/docs\")),\n        ),\n    )\n\n\n@api.get(\"/\")\ndef api_root():\n    return {\"message\": \"Awesome SaaS is powered by FastAPI\"}\n\n# Combining the Air and and FastAPI apps into one\napp.mount(\"/api\", api)\n</code></pre>"},{"location":"#combining-fastapi-and-air-using-jinja2","title":"Combining FastAPI and Air using Jinja2","text":"<p>Want to use Jinja2 instead of Air Tags? We've got you covered.</p> <pre><code>import air\nfrom fastapi import FastAPI\n\napp = air.Air()\napi = FastAPI()\n\n# Air's JinjaRenderer is a shortcut for using Jinja templates\njinja = air.JinjaRenderer(directory=\"templates\")\n\n@app.get(\"/\")\ndef index(request: Request):\n    return jinja(request, name=\"home.html\")\n\n@api.get(\"/\")\ndef api_root():\n    return {\"message\": \"Awesome SaaS is powered by FastAPI\"}\n\n# Combining the Air and and FastAPI apps into one\napp.mount(\"/api\", api)    \n</code></pre> <p>Don't forget the Jinja template!</p> <pre><code>&lt;!doctype html\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Awesome SaaS&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Awesome SaaS&lt;/h1&gt;\n        &lt;p&gt;\n            &lt;a target=\"_blank\" href=\"/api/docs\"&gt;API Docs&lt;/a&gt;\n        &lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Note</p> <p>Using Jinja with Air is easier than with FastAPI. That's because as much as we enjoy Air Tags, we also love Jinja!</p>"},{"location":"#contributing","title":"Contributing","text":"<p>For guidance on setting up a development environment and how to make a contribution to Air, see Contributing to Air.</p>"},{"location":"tools/","title":"Tools","text":"<p>Useful utilities and tools for AIR.</p> <ul> <li>AirConvert - Converts HTML to Air Tags instantly. There's also the CLI tool</li> <li>AirMCP - MCP server for Air tools</li> <li>AirCookbook - A recipe book for getting everything done imaginable in the web</li> <li>Air's llms.txt - Context for LLMs about Air</li> </ul>"},{"location":"why/","title":"Don't use AIR","text":"Loading warning... <p> Air is a highly-unstable and experimental Python web framework. We have NOT officially launched it publicly yet. Every release could break your code! If you have to ask why you should use it, it's probably not for you.</p> <p>We just started writing this thing. Don't judge it by what you see here. It's like looking at a painting that an artist started 5 minutes ago and saying, \"Why are you even painting this? Why don't you go buy a painting?\"</p> <p>If you want to use Air, you can. But we don't recommend it. It's not enterprise-ready and will likely never be, at least definitely not before official launch. It'll likely infect you, your family, and your codebase with an evil web framework mind virus, distracting you to the point that you never ship because you're having too much fun playing with Air and contributing to the exciting Air ecosystem.</p>"},{"location":"why/#still-here","title":"Still Here?","text":"<p>Okay, here's why you might want to use Air:</p> <ul> <li>Building in Public With Us Is Fun - We're building Air in public. While not officially launched for real, we soft-launched it at Python Philippines on August 2, 2025 to find early volunteers for the core team. You can be part of the core team too, if you ask nicely and commit enough :)</li> <li>Powered by FastAPI - Designed to work with FastAPI so you can serve your API and web pages from one app</li> <li>Fast to code - Tons of intuitive shortcuts and optimizations designed to expedite coding HTML with FastAPI</li> <li>Air Tags - Easy to write and performant HTML content generation using Python classes to render HTML</li> <li>Jinja Friendly - No need to write <code>response_class=HtmlResponse</code> and <code>templates.TemplateResponse</code> for every HTML view</li> <li>Mix Jinja and Air Tags - Jinja and Air Tags both are first class citizens. Use either or both in the same view!</li> <li>HTMX friendly - We love HTMX and provide utilities to use it with Air</li> <li>HTML form validation powered by Pydantic - We love using Pydantic to validate incoming data. Air Forms provide two ways to use Pydantic with HTML forms (dependency injection or from within views)</li> <li>Built-in SVG support - SVGs aren't an afterthought, they are part of core Air and can be accessed via the <code>air.svgs</code> namespace</li> <li>Code formatting and linting (PEP8) - To maintain code quality and consistency, Air enforces Ruff formatting and linting across its entire codebase</li> <li>Easy to learn yet well documented - Hopefully Air is so intuitive and well-typed you'll barely need to use the documentation. In case you do need to look something up we're taking our experience writing technical books and using it to make the best documentation we can.</li> <li>Ecosystem-Focused - Air is developed with an ecosystem-first approach. Django achieved its success largely because of its Django package ecosystem. Contributing to Air means contributing not just to the core package but to any Air package.</li> </ul> <p>Actually, there are a lot more reasons, but we got tired of editing this page and wanted to get back to coding.</p>"},{"location":"why/#more-information","title":"More Information","text":"<ul> <li> <p>Alternatives, Inspiration, and Comparisons</p> </li> <li> <p>Original December 2023 Design Document for what became Air</p> </li> <li> <p>Documentation: AIR Documentation</p> </li> <li> <p>Source Code: github.com/feldroy/air</p> </li> </ul>"},{"location":"about/","title":"About","text":"<ul> <li>Read about alternatives and inspirations</li> <li>Helping Air and getting help about Air</li> <li>Air Beta Release Project Board</li> </ul>"},{"location":"about/#stories","title":"Stories","text":""},{"location":"about/#daniels-story","title":"Daniel's Story","text":"<p>I first encountered FastAPI in late 2019. I immediately liked how it used types to define behavior.</p> <p>In 2022 and 2023 I carefully reviewed all the Python web frameworks. From my perspective FastAPI won out over Django, Flask, Pyramid, and others. I even gave a series of talks on the subject.</p> <p>In the middle of 2023, I was unhappy with how making web pages with FastAPI to support APIs felt clunky. It felt like a harder version of Flask. I talked to Sebastian Ramirez about it over the course of a week. I started thinking about making some kind of extension for FastAPI to make web pages easier, even wrote up a design document for it in December of 2023 titled \"FastHTML\".</p> <p>In early 2024 I noodled with the idea of a FastAPI for HTML, tentatively called \"FastHTML\". You can see one of my attempts here in a project called fastapi-blog. This particular project didn't go well, but allowed me to explore possible ideas for making a more friendly HTML API for developers. Alas, I was busy with work and family life and didn't have enough time to really focus on the project. I told Sebastian I was giving the effort a break.</p> <p>Shortly after Sebastian Ramirez introduced me to Jeremy Howard of Answer.AI. Jeremy demonstrated a Starlette-descendant project, called, amusingly enough, 'FastHTML'. Like FastAPI, his FastHTML implementation was driven directly by Starlette. He eschewed Jinja2 templating for HTML, instead implementing FT Components, an elegant version of Python classes that can render as HTML. While I like Jinja2, I also liked his implementation of Python objects rendered to HTML. Excited about a shared vision I started contributing to his FastHTML.</p> <p>In June of 2025 I started work on fastapi-tags, which is designed to bring fully typed Python classes that can render as HTML to FastAPI. After a couple weeks I realized I wanted to expand fastapi-tags to meet my original design document for building an HTML web page framework on top of FastAPI. The problem was that \"fastapi-tags\" didn't sound like a good framework name and \"FastHTML\" was already taken.</p> <p>Fortunately for me, my wife Audrey had a static site generator project called \"Air\". She volunteered the name for the web framework, and thus this project was born.</p>"},{"location":"about/alternatives/","title":"Alternatives, Inspiration, and Comparisons","text":"<p>Air was built on the shoulders of giants. Here we discuss what inspired Air and the tools that serve as dependencies for Air.</p>"},{"location":"about/alternatives/#previous-tools","title":"Previous tools","text":""},{"location":"about/alternatives/#django","title":"Django","text":"<p>Generally tied with FastAPI for popularity, Django comes with the stability of 20 years of use.</p> <p>Django is tightly coupled to relational databases (MySQL, PostgreSQL, SQLite, etc). Notably, third-party bridges to non-SQL engineers tend to have relatively short lifespans, typically measuring a few years.</p> <p>Django pioneered high-quality, accessible documentation. That and its pluggable SQL-powered design really helped in the development of a vibrant ecosystem of third-party packages.</p>"},{"location":"about/alternatives/#django-inspires-air-to","title":"Django inspires Air to","text":"<ol> <li>Incorporate an HTML form validation system powered by Pydantic</li> <li>Add a pluggable system for supporting an ecosystem of third-party packages</li> <li>Include user management as an early pluggable package.</li> </ol>"},{"location":"about/alternatives/#flask","title":"Flask","text":"<p>Flask is a small, atomic web framework that first appeared as an April Fool's Day prank. It is simple, easy to learn, and commonly used by API providers to show how to build Python integrations. The <code>Flask quickstart</code> is a powerful general reference for anyone with a web dev background.</p> <p>Flask refuses to tie itself to much of anything, including database design.</p> <p>Of note is that core Flask uses a flat namespace. Instead of having to learn long library paths, Flask brings nearly everything into a global <code>flask</code> namespace.</p>"},{"location":"about/alternatives/#flask-inspires-air-to","title":"Flask inspires Air to","text":"<ol> <li>When possible, use the <code>air</code> namespace to simplify imports</li> <li>Stay simple and easy to learn</li> <li>Have a good quickstart document that provides an overview of performing common tasks.</li> </ol>"},{"location":"about/alternatives/#htpy","title":"htpy","text":"<p>A standalone library for rendering Python objects as HTML, we considered using htpy instead of creating Air Tags. However, we prefer the parenthesis approach of Air Tags is more sound. In any case, htpy has a fantastic HTML to htpy CLI utility.</p>"},{"location":"about/alternatives/#htpy-inspires-air-to","title":"htpy inspires Air to","text":"<p>Improve air-convert to support pipes better.</p>"},{"location":"about/alternatives/#dash","title":"Dash","text":"<p>Dash is designed to build out web pages quickly. Through its <code>html</code> package it provides an intuitive API that allows developers to build dynamic web apps without having to ever leave Python.</p> <p>While it wasn't the first framework to abstract HTML tags as Python objects, Dash's method of integrating the generation of HTML with return values from views allows for rapid development of full pages and snippets. While a fascinating project, we feel its reliance on React means there's an extra layer of abstraction for developers to debug and deploy.</p>"},{"location":"about/alternatives/#dash-inspires-air-to","title":"Dash inspires Air to","text":"<ol> <li>Have an abstraction of HTML as Python objects, which in Air parlance is \"Air Tags\"</li> <li>Bundle Air's <code>AirResponse</code> to the <code>Air()</code> app factory for an easier, more intuitive design.</li> </ol>"},{"location":"about/alternatives/#fasthtml","title":"FastHTML","text":"<p>FastHTML has some similarity with Dash, especially in its use of FT Components, its analogue of Dash HTML objects. Where FastHTML significantly differs from Dash is that it eschews React and other large frontend libraries in favor of using Python wherever possible. For reactivity it leans into the HTMX sphere. This means less abstraction, simpler HTML generation, and hence an easier debugging and deployment experience than Dash.</p> <p>Of note is that FastHTML follows the Fastcore coding standard which is substantially different from PEP8.</p> <p>The creators of Air have contributed a lot to FastHTML and elements of its ecosystem. We admire FastHTML's syntactical sugar and the velocity of onboarding new users.</p>"},{"location":"about/alternatives/#fasthtml-inspires-air-to","title":"FastHTML inspires Air to","text":"<ol> <li>Support HTMX as a first class citizen of the framework</li> <li>Focus on syntactal sugar</li> <li>Know that we can build our own web framework</li> </ol>"},{"location":"about/alternatives/#used-by-air","title":"Used by Air","text":""},{"location":"about/alternatives/#fastapi","title":"FastAPI","text":"<p>The most popular Python framework, FastAPI is a proven tool for building APIs. Odds are you came here because you wanted improved web page generation with FastAPI.</p> <p>FastAPI uses types to provide an intuitive and explicit API. Behaviors are sometimes controlled by types rather than configuration. A pleasant result of this is how nicely code completion works for FastAPI projects. This is a pattern we are emulating in Air.</p> <p>The FastAPI project has superlative, engaging documentation. There's a sense of positivity in the prose that is infectious. Of note is how the project explains its inspiration, which in turn inspired this document.</p>"},{"location":"about/alternatives/#air-uses-fastapi-to","title":"Air uses FastAPI to","text":"<ol> <li>Provide an really nice layer on top of Starlette</li> <li>Inspire us to have superlative documentation</li> <li>Stay positive - we're in this to support each other and have fun</li> <li>Lean into types for better IDE and AI integrations.</li> </ol> <p>Anything you can do with with FastAPI, you can do with Air. Air is literally FastAPI with some extra features for working with HTML and HTMX.</p>"},{"location":"about/alternatives/#starlette","title":"Starlette","text":"<p>A light ASGI framework/toolkit, Starlette is the HTTP server that Air (and FastAPI) use to serve content. It is very simple and intuitive, meaning what FastAPI doesn't provide we can usually come up with something quickly in Starlette. Here's a short list of features:</p> <ul> <li>WebSocket support.</li> <li>In-process background tasks.</li> <li>Startup and shutdown events.</li> <li>Test client built on HTTPX.</li> <li>CORS, GZip, Static Files, Streaming responses.</li> <li>Session and Cookie support.</li> <li>100% test coverage.</li> <li>100% type annotated codebase.</li> <li>Few hard dependencies.</li> </ul>"},{"location":"about/alternatives/#air-uses-starlette-to","title":"Air uses Starlette to","text":"<p>Provide a solid foundation for being a web application server</p> <p>Anything you can do with Starlette, you can do with Air. In essence, Air builds off the idea of FastAPI being Starlette on steroids.</p>"},{"location":"about/alternatives/#pydantic","title":"Pydantic","text":"<p>Far and away Pydantic is the most widely used data validation library for Python. We love using it to confirm the structure and quality of data.</p> <p>Pydantic uses types to provide an intuitive and explicit API. From simple to complex use cases, thanks to its Rust-powered backend, does so excellently at scale.</p> <p>What we like about Pydantic's documention is the clean, intuitive structure of it. All the objects are well-documented, something that Air is working towards copying.</p>"},{"location":"about/alternatives/#air-uses-pydantic-to","title":"Air uses Pydantic to","text":"<ol> <li>Power the form validation system</li> <li>Inspire us to better organize our documentation</li> <li>Lean into types for better IDE and AI integrations.</li> </ol>"},{"location":"about/alternatives/#jinja","title":"Jinja","text":"<p>An extremely popular template engine for Python, Jinja is nearly as old as Django. It provides a fast, secure, and designer-friendly way to generate HTML from template files. Its syntax is heavily inspired by Django's template language, but it offers more flexibility and a sandboxed execution environment.</p> <p>While Air Tags could replace the need for a separate template language in many cases, we recognize the power and familiarity of Jinja. For example, creating base templates for sites is something many users and designers prefer to do in Jinja while leaning on Air Tags for content and HTMX response snippets. Therefore, Air provides first-class support for Jinja templates, allowing developers to choose the best tool for their specific needs.</p>"},{"location":"about/alternatives/#air-uses-jinja2-to","title":"Air uses Jinja2 to","text":"<ol> <li>Provide a simple and powerful way to render dynamic HTML</li> <li>Support not just those familiar with Python with a means to render templates.</li> </ol>"},{"location":"about/help_air/","title":"Helping Air and getting help about Air","text":"<p>Are you fan of Air? Want to learn more about Air?</p> <p>Want to help others learn more about Air?</p> <p>We're happy to assist with both!</p>"},{"location":"about/help_air/#star-air-in-github","title":"Star Air in GitHub  \u2b50\ufe0f","text":"<p>You can \"star\" Air in GitHub (clicking the star button at the top right): https://github.com/feldroy/air.</p> <p>By adding a star, other users will be able to find it more easily and see that it has been already useful for others.</p>"},{"location":"about/help_air/#watch-the-github-repository-for-releases","title":"Watch the GitHub repository for releases \ud83d\udc40","text":"<p>You can \"watch\" Air in GitHub (clicking the \"watch\" button at the top right): https://github.com/feldroy/air.</p> <p>There you can select \"Releases only\".</p> <p>By doing it, you will receive notifications (in your email) whenever there's a new release (a new version) of Air with bug fixes and new features.</p>"},{"location":"about/help_air/#participate-in-discussions","title":"Participate in discussions","text":"<p>Our primary location for chat is our Discord chat server.  </p> <p>We also will be using Discussions in GitHub.</p> <p>For non-code GitHub issues, we'll ask those to be moved to either the Discord and GH Discissions.</p> <p>See you there!</p>"},{"location":"about/roadmap/","title":"Roadmap: Road to the Beta Release","text":"<p>Air Beta Release Project Board</p> <p>We're really proud of what we've accomplished with Air. In a few short months we've taken a sketch of an idea and built out a new web framework that is both new and exciting, yet able to plug effortlessly into the FastAPI ecosystem.</p> <p>Through our own experiences and feedback from users we can say the following is working out quite well:</p> <ul> <li>Air Tags are really popular and most people enjoy the API. That it plugs so well into IDEs and LLMs is a super power. Performance could be better, but optimisation will happen once Air reaches Beta</li> <li>AirResponse makes writing views powered by Jinja or Air Tags easy and fast. Like Air Tags the API feature for this is complete</li> <li>Examples in all the doc strings makes it much easier for both humans and LLMs. This is an ongoing effort</li> <li>Jinja + Air Tags base templates for layout and Air Tags for content is a really sweet pattern we should talk about more. Unfortunately Jinja inside of Air Tags is a challenge not yet solved</li> <li>Ecosystem Leaning into FastAPI-isms means its easy to plug into the large and vibrant FastAPI ecosystem. Deployment is also easy - Air deploys precisely the same way as FastAPI</li> </ul> <p>For all of these accomplishments we've got a ways to go before I feel confident about taking Air from Alpha to Beta. It's not just a matter of stability, it is also features that I believe are core to the vision. I want the project to be easier\u00a0and more powerful for app builders and end users alike.</p>"},{"location":"about/roadmap/#timeline","title":"Timeline","text":"<p>TLDR: When we feel Air is ready</p> <p>While it would be nice to have Air be a Beta project today there's something to be said about having the freedom to make breaking changes or to backtrack from designs when we must. It's easier to fix mistakes now than later when there are more projects that could be broken by us making breaking changes. By staying in alpha longer it gives us the opportunity to validate our ideas .</p>"},{"location":"about/roadmap/#headlines","title":"Headlines","text":"<p>Here is what is planned for the Beta release, which is tracked on the Air Beta Release Project board:</p>"},{"location":"about/roadmap/#air-forms","title":"Air Forms","text":"<p>Forms are a core part of any web framework. While the foundations for forms are in place with Air Tags, there is still a lot of work to be done. Part of it is that form libraries have to support a lot of edge cases. This includes:</p> <ul> <li>Form validation - Ensure error messages are clear and helpful</li> <li>CSRF protection - Implement CSRF protection for forms</li> <li>Integration with FastAPI's dependency injection - This is coded but it is not stable yet</li> <li>Default widget cleanup - It is working but the code is ungainly and hard to extend</li> </ul>"},{"location":"about/roadmap/#air-orm","title":"Air ORM","text":"<p>In working on the blog tutorial as well as professional projects it has become clear that tying Air to SQLModel/SQLAlchemy is really powerful. However, the configuration is a bit clunky and documentation for it is almost non-existent or full of errors. This means that humans and LLMs alike struggle to understand how to use it.</p> <p>The goal is Air ORM is include helper tools to make using SQLModel/SQLAlchemy easier, as well as better documentation and examples.</p>"},{"location":"about/roadmap/#accessibility-improvements","title":"Accessibility Improvements","text":"<p>There are a number of accessibility improvements that we can make, mostly for built-in layouts module. This includes:</p> <ul> <li>Light/Dark Modes - Air layouts should support both light and dark modes out of the box, as well as the ability to switch between them</li> <li>Mobile and cross platform form support - Air layouts should resize tags to look perfect on any screen and will have a mobile version and a desktop version. We think this is already part of the MVPCSS framework but it needs to be tested and documented</li> <li>Confirm fonts resizing works properly</li> </ul>"},{"location":"about/roadmap/#bringing-airmarkdown-into-air-core","title":"Bringing AirMarkdown Into Air Core","text":"<p>AirMarkdown is currently a separate package. While it works, it is extremely challenging to alter the configuration. In trying to fix it we discovered that the architecture of AirMarkdown is not quite right, and when combined with the extra layer of abstraction in having it as a separate package makes it hard to correct. </p> <p>Our plan is to bring AirMarkdown into Air core with an optional dependency group, and redesign the architecture to make it more flexible and easier to configure. Then we'll extract it again once we're happy with the result.</p>"},{"location":"about/roadmap/#airblog-tutorial","title":"AirBlog Tutorial","text":"<p>In writing the blog tutorial we discovered a number of gaps in the documentation as well as bugs and missing features in Air itself. In our own professional work we often just hop over these by leaning into hard-won knowledge, but we can't expect new users to do the same. Especially when existing documentation for both FastAPI and Air on certain topics (Async SQLModel and SQLAlchemy come to mind) is either sparse or wrong.</p> <p>The goal is to finish the blog tutorial, as that forces us to have Air be more user friendly.</p>"},{"location":"about/roadmap/#authentication-and-authorization","title":"Authentication and Authorization","text":"<p>We want to make it easier to add authentication and authorization and user constructs to Air applications while preserving interoperability with the FastAPI dependency injection-based ecosystem. This includes:</p> <ul> <li>User models - Provide a base user model that can be extended</li> <li>Authentication - Provide helper tools to make authentication easier, including OAuth2. FastAPI is of great help here, at this point we think we just need to document how to use it with Air</li> <li>Authorization - Provide helper tools to make authorization easier, including role-based access control</li> <li>Integration with FastAPI's security utilities - Ensure compatibility with FastAPI's security features</li> </ul>"},{"location":"about/roadmap/#aircomponents","title":"AirComponents","text":"<p>This will be a layout library that provides elegant defaults for making awesome layouts.</p> <p>Tools like shadcn and other Tailwind-powered projects are really powerful, but require an understanding of CSS (or tailwind) to be able to use. AirComponents will address this through intelligent defaults so those of us who don't know CSS can use it to make incredible looking sites. Yet AirComponents will be built so that it can be easily modified to support all kinds of usecases.</p> <p>AirComponents will be a separate repo and package, managed in its own GitHub repo. That will allow for faster velocity and provide room for playing with architecture and design. </p>"},{"location":"about/roadmap/#whats-already-been-done","title":"What's already been done","text":""},{"location":"about/roadmap/#air-tag-api","title":"Air Tag API","text":"<p>The Air Tag API is complete and stable. This is based off working projects as well as experiences in other frameworks. There are no planned breaking changes to this API, just incremental improvements including bugfixes, more helpful error messages, and finished stock tag documentation.</p>"},{"location":"about/roadmap/#airresponseapplicationrouter","title":"AirResponse/Application/Router","text":"<p>The AirResponse, Application and Router APIs are mostly complete. There should be no breaking changes to these APIs, rather adding polish, addressing bugs, and improving error handling.</p> <p>What we really like is that AirResponse is so flexible. It can return Jinja templates, Air Tags, or even raw HTML strings. This means that users can incrementally adopt Air Tags into existing FastAPI/Jinja projects. Or use other HTML renderers, just so long as they return a string or have a <code>.render()</code> method that returns a string.</p>"},{"location":"api/","title":"Air Reference","text":"<p>Here is the Air reference documentation. It explains how to do things, as well as providing reference details for nearly every object in the Air code.</p> <ul> <li>Applications - The app instantiator for Air</li> <li>Background Tasks - Background tasks for Air</li> <li>Exception Handlers - Exceptions are returned to the user, specifically 404 and 500</li> <li>Exceptions - Sometimes it's good to know exactly what is breaking</li> <li>Ext - Functionality for Air that requires extra dependencies<ul> <li>Auth - Authentication tools for OAuth and eventually email and magic link.</li> <li>SQL - Utilities for connecting to relational databases like PostgreSQL, MySQL, and SQLite.</li> </ul> </li> <li>Forms - Receive and validate data from users on web pages</li> <li>Layouts - Utilities for building layout functions and two example layouts for css microframeworks (mvcss and picocss)</li> <li>Middleware - Middleware for Air</li> <li>Requests - HTMX utility function that can be used with dependency injection</li> <li>Responses - AirResponse for normal responses and SSEResponse for Server Sent Events</li> <li>Routing - For compositing multiple apps inside each other</li> <li>SVG - Reference for all the entire SVG tags specification, all of which are supported by Air</li> <li>Tags - Reference for all the entire HTML tags specification, all of which are supported by Air</li> <li>Templating - Describes Jinja and Air Tag renderers for use in both projects and third-party installable packages</li> <li>Utils - Utilities that don't fall into one of the above categories</li> </ul>"},{"location":"api/applications/","title":"Applications","text":"<p>Instantiating Air applications.</p>"},{"location":"api/applications/#air.applications.Air","title":"Air","text":"<pre><code>Air(\n    *,\n    debug=False,\n    routes=None,\n    servers=None,\n    dependencies=None,\n    default_response_class=AirResponse,\n    redirect_slashes=True,\n    middleware=None,\n    exception_handlers=None,\n    on_startup=None,\n    on_shutdown=None,\n    lifespan=None,\n    webhooks=None,\n    deprecated=None,\n    docs_url=None,\n    redoc_url=None,\n    openapi_url=None,\n    **extra,\n)\n</code></pre> <p>               Bases: <code>FastAPI</code></p> <p>FastAPI wrapper class with AirResponse as the default response class.</p> <p>Parameters:</p> Name Type Description Default <code>debug</code> <code>bool</code> <p>Enables additional logging or diagnostic output.</p> <code>False</code> <code>dependencies</code> <code>Sequence[Depends] | None</code> <p>A list of global dependencies, they will be applied to each path operation,     including in sub-routers.</p> <code>None</code> <code>middleware</code> <code>Sequence[Middleware] | None</code> <p>List of middleware to be added when creating the application.</p> <code>None</code> <code>default_response_class</code> <code>type[Response]</code> <p>The default response class to be used.</p> <code>AirResponse</code> <code>redirect_slashes</code> <code>bool</code> <p>Whether to detect and redirect slashes in URLs when the client doesn't     use the same format.</p> <code>True</code> <code>on_startup</code> <code>Sequence[Callable[[], Any]] | None</code> <p>A list of startup event handler functions.</p> <code>None</code> <code>on_shutdown</code> <code>Sequence[Callable[[], Any]] | None</code> <p>A list of shutdown event handler functions.</p> <code>None</code> <code>lifespan</code> <code>Lifespan[AppType] | None</code> <p>A <code>Lifespan</code> context manager handler. This replaces <code>startup</code> and     <code>shutdown</code> functions with a single context manager.</p> <code>None</code> <p>Example:</p> <pre><code>import air\n\napp = air.Air()\n</code></pre> <p>This preserves all FastAPI initialization parameters while setting AirResponse as the default response class.</p> Source code in <code>src/air/applications.py</code> <pre><code>def __init__(\n    self: AppType,\n    *,\n    debug: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Boolean indicating if debug tracebacks should be returned on server\n            errors.\n\n            Read more in the\n            [Starlette docs for Applications](https://www.starlette.io/applications/#instantiating-the-application).\n            \"\"\"\n        ),\n    ] = False,\n    routes: Annotated[\n        list[BaseRoute] | None,\n        Doc(\n            \"\"\"\n            **Note**: you probably shouldn't use this parameter, it is inherited\n            from Starlette and supported for compatibility.\n\n            ---\n\n            A list of routes to serve incoming HTTP and WebSocket requests.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            You normally wouldn't use this parameter with FastAPI, it is inherited\n            from Starlette and supported for compatibility.\n\n            In FastAPI, you normally would use the *path operation methods*,\n            like `app.get()`, `app.post()`, etc.\n            \"\"\"\n        ),\n    ] = None,\n    servers: Annotated[\n        list[dict[str, str | Any]] | None,\n        Doc(\n            \"\"\"\n            A `list` of `dict`s with connectivity information to a target server.\n\n            You would use it, for example, if your application is served from\n            different domains and you want to use the same Swagger UI in the\n            browser to interact with each of them (instead of having multiple\n            browser tabs open). Or if you want to leave fixed the possible URLs.\n\n            If the servers `list` is not provided, or is an empty `list`, the\n            default value would be a `dict` with a `url` value of `/`.\n\n            Each item in the `list` is a `dict` containing:\n\n            * `url`: A URL to the target host. This URL supports Server Variables\n            and MAY be relative, to indicate that the host location is relative\n            to the location where the OpenAPI document is being served. Variable\n            substitutions will be made when a variable is named in `{`brackets`}`.\n            * `description`: An optional string describing the host designated by\n            the URL. [CommonMark syntax](https://commonmark.org/) MAY be used for\n            rich text representation.\n            * `variables`: A `dict` between a variable name and its value. The value\n                is used for substitution in the server's URL template.\n\n            Read more in the\n            [FastAPI docs for Behind a Proxy](https://fastapi.tiangolo.com/advanced/behind-a-proxy/#additional-servers).\n\n            **Example**\n\n            ```python\n            from fastapi import FastAPI\n\n            app = FastAPI(\n                servers=[\n                    {\"url\": \"https://stag.example.com\", \"description\": \"Staging environment\"},\n                    {\"url\": \"https://prod.example.com\", \"description\": \"Production environment\"},\n                ]\n            )\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Sequence[Depends] | None,\n        Doc(\n            \"\"\"\n            A list of global dependencies, they will be applied to each\n            *path operation*, including in sub-routers.\n\n            Read more about it in the\n            [FastAPI docs for Global Dependencies](https://fastapi.tiangolo.com/tutorial/dependencies/global-dependencies/).\n\n            **Example**\n\n            ```python\n            from fastapi import Depends, FastAPI\n\n            from .dependencies import func_dep_1, func_dep_2\n\n            app = FastAPI(dependencies=[Depends(func_dep_1), Depends(func_dep_2)])\n            ```\n            \"\"\"\n        ),\n    ] = None,\n    default_response_class: Annotated[\n        type[Response],\n        Doc(\n            \"\"\"\n            The default response class to be used.\n            Read more in the\n            [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#default-response-class).\n            **Analogy**\n            ```python\n            from fastapi import FastAPI\n            from air import AirResponse\n            app = FastAPI(default_response_class=AirResponse)\n            ```\n            \"\"\"\n        ),\n    ] = AirResponse,\n    redirect_slashes: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Whether to detect and redirect slashes in URLs when the client doesn't\n            use the same format.\n\n            **Example**\n\n            ```python\n            from fastapi import FastAPI\n\n            app = FastAPI(redirect_slashes=True)  # the default\n\n            @app.get(\"/items/\")\n            async def read_items():\n                return [{\"item_id\": \"Foo\"}]\n            ```\n\n            With this app, if a client goes to `/items` (without a trailing slash),\n            they will be automatically redirected with an HTTP status code of 307\n            to `/items/`.\n            \"\"\"\n        ),\n    ] = True,\n    middleware: Annotated[\n        Sequence[Middleware] | None,\n        Doc(\n            \"\"\"\n            List of middleware to be added when creating the application.\n\n            In FastAPI you would normally do this with `app.add_middleware()`\n            instead.\n\n            Read more in the\n            [FastAPI docs for Middleware](https://fastapi.tiangolo.com/tutorial/middleware/).\n            \"\"\"\n        ),\n    ] = None,\n    exception_handlers: Annotated[\n        dict[int | type[Exception], Callable[[Request, Any], Coroutine[Any, Any, Response]]] | None,\n        Doc(\n            \"\"\"\n            A dictionary with handlers for exceptions.\n\n            In FastAPI, you would normally use the decorator\n            `@app.exception_handler()`.\n\n            Read more in the\n            [FastAPI docs for Handling Errors](https://fastapi.tiangolo.com/tutorial/handling-errors/).\n            \"\"\"\n        ),\n    ] = None,\n    on_startup: Annotated[\n        Sequence[Callable[[], Any]] | None,\n        Doc(\n            \"\"\"\n            A list of startup event handler functions.\n\n            You should instead use the `lifespan` handlers.\n\n            Read more in the [FastAPI docs for `lifespan`](https://fastapi.tiangolo.com/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    on_shutdown: Annotated[\n        Sequence[Callable[[], Any]] | None,\n        Doc(\n            \"\"\"\n            A list of shutdown event handler functions.\n\n            You should instead use the `lifespan` handlers.\n\n            Read more in the\n            [FastAPI docs for `lifespan`](https://fastapi.tiangolo.com/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    lifespan: Annotated[\n        Lifespan[AppType] | None,\n        Doc(\n            \"\"\"\n            A `Lifespan` context manager handler. This replaces `startup` and\n            `shutdown` functions with a single context manager.\n\n            Read more in the\n            [FastAPI docs for `lifespan`](https://fastapi.tiangolo.com/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    webhooks: Annotated[\n        routing.APIRouter | None,\n        Doc(\n            \"\"\"\n            Add OpenAPI webhooks. This is similar to `callbacks` but it doesn't\n            depend on specific *path operations*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            **Note**: This is available since OpenAPI 3.1.0, FastAPI 0.99.0.\n\n            Read more about it in the\n            [FastAPI docs for OpenAPI Webhooks](https://fastapi.tiangolo.com/advanced/openapi-webhooks/).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        bool | None,\n        Doc(\n            \"\"\"\n            Mark all *path operations* as deprecated. You probably don't need it,\n            but it's available.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    docs_url: Annotated[\n        str | None,\n        Doc(\n            \"\"\"\n            The path at which to serve the Swagger UI documentation.\n\n            Set to `None` to disable it.\n            \"\"\"\n        ),\n    ] = None,\n    redoc_url: Annotated[\n        str | None,\n        Doc(\n            \"\"\"\n            The path at which to serve the ReDoc documentation.\n\n            Set to `None` to disable it.\n            \"\"\"\n        ),\n    ] = None,\n    openapi_url: Annotated[\n        str | None,\n        Doc(\n            \"\"\"\n            The URL where the OpenAPI schema will be served from.\n\n            Set to `None` to disable it.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Extra keyword arguments to be stored in the app, not used by FastAPI\n            anywhere.\n            \"\"\"\n        ),\n    ],\n) -&gt; None:\n    \"\"\"Initialize Air app with AirResponse as default response class.\n\n    This preserves all FastAPI initialization parameters while setting\n    AirResponse as the default response class.\n    \"\"\"\n    if exception_handlers is None:\n        exception_handlers = {}\n    exception_handlers |= DEFAULT_EXCEPTION_HANDLERS\n    super().__init__(  # ty: ignore [invalid-super-argument]\n        debug=debug,\n        routes=routes,\n        servers=servers,\n        dependencies=dependencies,\n        default_response_class=default_response_class,\n        middleware=middleware,\n        exception_handlers=exception_handlers,\n        on_startup=on_startup,\n        on_shutdown=on_shutdown,\n        lifespan=lifespan,\n        docs_url=docs_url,\n        redoc_url=redoc_url,\n        openapi_url=openapi_url,\n        webhooks=webhooks,\n        deprecated=deprecated,\n        **extra,\n    )\n</code></pre>"},{"location":"api/applications/#air.applications.Air.get","title":"get","text":"<pre><code>get(\n    path,\n    *,\n    response_model=None,\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=AirResponse,\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=generate_unique_id,\n)\n</code></pre> <p>Add a path operation using an HTTP GET operation.</p>"},{"location":"api/applications/#air.applications.Air.get--example","title":"Example","text":"<pre><code>from air import Air\n\napp = Air()\n\n\n@app.get(\"/hello\")\ndef hello_world():\n    return air.H1(\"Hello, World!\")\n</code></pre> Source code in <code>src/air/applications.py</code> <pre><code>def get(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, FastAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = None,\n    status_code: Annotated[\n        int | None,\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        list[str | Enum] | None,\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Sequence[Depends] | None,\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        str | None,\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        str | None,\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        dict[int | str, dict[str, Any]] | None,\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        bool | None,\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        str | None,\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `FastAPI` class.\n\n            Read more about it in the\n            [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        IncEx | None,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        IncEx | None,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-parameters-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = AirResponse,\n    name: Annotated[\n        str | None,\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        list[BaseRoute] | None,\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        dict[str, Any] | None,\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = generate_unique_id,\n) -&gt; Callable[[Callable[..., Any]], Callable[..., Any]]:\n    \"\"\"\n    Add a *path operation* using an HTTP GET operation.\n\n    ## Example\n\n    ```python\n    from air import Air\n\n    app = Air()\n\n\n    @app.get(\"/hello\")\n    def hello_world():\n        return air.H1(\"Hello, World!\")\n    ```\n    \"\"\"\n\n    def decorator[**P, R](func: Callable[P, MaybeAwaitable[R]]) -&gt; Callable[..., Any]:\n        @wraps(func)\n        async def endpoint(*args: P.args, **kw: P.kwargs) -&gt; Response:\n            result = func(*args, **kw)\n            if inspect.isawaitable(result):\n                result = await result\n            if isinstance(result, Response):\n                return result\n            # Force HTML for non-Response results\n            return response_class(result)\n\n        return super(Air, self).get(\n            path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )(endpoint)\n\n    return decorator\n</code></pre>"},{"location":"api/applications/#air.applications.Air.page","title":"page","text":"<pre><code>page(func)\n</code></pre> <p>Decorator that creates a GET route using the function name as the path.</p> <p>If the name of the function is \"index\", then the route is \"/\".</p> <p>Example:</p> <pre><code>import air\n\napp = Air()\n\n@app.page\ndef index(): # routes is \"/\"\n    return H1(\"I am the home page\")\n\n@app.page\ndef data(): # route is \"/data\"\n    return H1(\"I am the home page\")\n\n@app.page\ndef about_us(): # routes is \"/about-us\"\n    return H1(\"I am the about page\")\n</code></pre> Source code in <code>src/air/applications.py</code> <pre><code>def page(self, func: FunctionType) -&gt; FunctionType:\n    \"\"\"Decorator that creates a GET route using the function name as the path.\n\n    If the name of the function is \"index\", then the route is \"/\".\n\n    Example:\n\n        import air\n\n        app = Air()\n\n        @app.page\n        def index(): # routes is \"/\"\n            return H1(\"I am the home page\")\n\n        @app.page\n        def data(): # route is \"/data\"\n            return H1(\"I am the home page\")\n\n        @app.page\n        def about_us(): # routes is \"/about-us\"\n            return H1(\"I am the about page\")\n    \"\"\"\n    page_path = compute_page_path(func.__name__)\n\n    # Pin the route's response_class for belt-and-suspenders robustness\n    return self.get(page_path)(func)\n</code></pre>"},{"location":"api/applications/#air.applications.Air.post","title":"post","text":"<pre><code>post(\n    path,\n    *,\n    response_model=None,\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=AirResponse,\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=generate_unique_id,\n)\n</code></pre> <p>Add a path operation using an HTTP POST operation.</p> Source code in <code>src/air/applications.py</code> <pre><code>def post(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, FastAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = None,\n    status_code: Annotated[\n        int | None,\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        list[str | Enum] | None,\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Sequence[Depends] | None,\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        str | None,\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        str | None,\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        dict[int | str, dict[str, Any]] | None,\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        bool | None,\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        str | None,\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `FastAPI` class.\n\n            Read more about it in the\n            [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        IncEx | None,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        IncEx | None,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-parameters-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = AirResponse,\n    name: Annotated[\n        str | None,\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        list[BaseRoute] | None,\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        dict[str, Any] | None,\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[routing.APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = generate_unique_id,\n) -&gt; Callable[[Callable[..., Any]], Callable[..., Any]]:\n    \"\"\"\n    Add a *path operation* using an HTTP POST operation.\n    \"\"\"\n\n    def decorator[**P, R](func: Callable[P, MaybeAwaitable[R]]) -&gt; Callable[..., Any]:\n        @wraps(func)\n        async def endpoint(*args: P.args, **kw: P.kwargs) -&gt; Response:\n            result = func(*args, **kw)\n            if inspect.isawaitable(result):\n                result = await result\n            if isinstance(result, Response):\n                return result\n            # Force HTML for non-Response results\n            return response_class(result)\n\n        return super(Air, self).post(\n            path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )(endpoint)\n\n    return decorator\n</code></pre>"},{"location":"api/background/","title":"Background Tasks","text":"<p>Background Tasks are Python functions that are called after a response is returned to the user. They are useful for long running tasks like emails or batch processing.</p> <p>Background tasks in Air, for those times a long-running process is needed that doesn't force the user to wait.</p>"},{"location":"api/background/#air.background.BackgroundTasks","title":"BackgroundTasks","text":"<p>               Bases: <code>BackgroundTasks</code></p> <p>A collection of background tasks that will be called after a response has been sent to the client.</p> <p>Example:</p> <pre><code>from air import BackgroundTasks, Air\n\napp = Air()\n\n\ndef write_notification(email: str, message=\"\"):\n    with open(\"log.txt\", mode=\"w\") as email_file:\n        content = f\"notification for {email}: {message}\"\n        email_file.write(content)\n\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(email: str, background_tasks: BackgroundTasks):\n    message = \"some notification\"\n    background_tasks.add_task(write_notification, email, message=message)\n    content = f\"notification for {email}: {message}\"\n    return air.layouts.picocss(air.Title(content), air.H1(content))\n</code></pre>"},{"location":"api/background/#air.background.BackgroundTasks.add_task","title":"add_task","text":"<pre><code>add_task(func, *args, **kwargs)\n</code></pre> <p>Add a function to be called in the background after the response is sent.</p> Source code in <code>src/air/background.py</code> <pre><code>def add_task[**P, T](\n    self,\n    func: Annotated[\n        Callable[P, T],\n        Doc(\n            \"\"\"\n            The function to call after the response is sent.\n\n            It can be a regular `def` function or an `async def` function.\n            \"\"\"\n        ),\n    ],\n    *args: P.args,\n    **kwargs: P.kwargs,\n) -&gt; None:\n    \"\"\"\n    Add a function to be called in the background after the response is sent.\n    \"\"\"\n    return super().add_task(func, *args, **kwargs)\n</code></pre>"},{"location":"api/dependencies/","title":"Dependencies","text":"<p>Air provides dependency injection utilities to help you build responsive web applications.</p>"},{"location":"api/dependencies/#htmx-request-detection","title":"HTMX Request Detection","text":"<p>The <code>is_htmx_request</code> dependency allows you to detect whether a request is coming from an HTMX action, enabling you to return different responses for HTMX vs regular HTTP requests.</p>"},{"location":"api/dependencies/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>Return partial HTML fragments for HTMX requests and full pages for regular requests</li> <li>Provide different response formats (JSON for HTMX, redirects for forms)</li> <li>Implement progressive enhancement patterns</li> </ul>"},{"location":"api/dependencies/#examples","title":"Examples","text":""},{"location":"api/dependencies/#basic-usage","title":"Basic Usage","text":"<pre><code>import air\nfrom fastapi import Depends\n\napp = air.App()\n\n@app.get(\"/users\")\ndef get_users(is_htmx: bool = Depends(air.is_htmx_request)):\n    users = [\"Alice\", \"Bob\", \"Charlie\"]\n\n    if is_htmx:\n        # Return just the user list for HTMX partial updates\n        return air.Ul([air.Li(user) for user in users])\n    else:\n        # Return full page for regular requests\n        return air.Html([\n            air.Head(air.Title(\"Users\")),\n            air.Body([\n                air.H1(\"User List\"),\n                air.Ul([air.Li(user) for user in users])\n            ])\n        ])\n</code></pre>"},{"location":"api/dependencies/#form-handling","title":"Form Handling","text":"<pre><code>@app.post(\"/submit\")\ndef submit_form(is_htmx: bool = Depends(air.is_htmx_request)):\n    if is_htmx:\n        return air.Div(\"Success!\", class_=\"alert-success\")\n    else:\n        return RedirectResponse(\"/success\", status_code=303)\n</code></pre> <p>Tools for handling dependecies, for things like handling incoming data from client libraries like HTMX.</p>"},{"location":"api/dependencies/#air.dependencies.is_htmx_request","title":"is_htmx_request  <code>module-attribute</code>","text":"<pre><code>is_htmx_request = Depends(_is_htmx_request)\n</code></pre>"},{"location":"api/exception_handlers/","title":"Exceptions","text":""},{"location":"api/exception_handlers/#air.exception_handlers.default_404_exception_handler","title":"default_404_exception_handler","text":"<pre><code>default_404_exception_handler(request, exc)\n</code></pre> <p>Default 404 exception handler. Can be overloaded.</p> Source code in <code>src/air/exception_handlers.py</code> <pre><code>def default_404_exception_handler(request: Request, exc: Exception) -&gt; AirResponse:\n    \"\"\"Default 404 exception handler. Can be overloaded.\"\"\"\n    return AirResponse(\n        mvpcss(\n            Title(\"404 Not Found\"),\n            H1(\"404 Not Found\"),\n            P(\"The requested resource was not found on this server.\"),\n            P(f\"URL: {request.url}\"),\n        ),\n        status_code=404,\n    )\n</code></pre>"},{"location":"api/exception_handlers/#air.exception_handlers.default_500_exception_handler","title":"default_500_exception_handler","text":"<pre><code>default_500_exception_handler(request, exc)\n</code></pre> <p>Default 500 exception handler. Can be overloaded.</p> Source code in <code>src/air/exception_handlers.py</code> <pre><code>def default_500_exception_handler(request: Request, exc: Exception) -&gt; AirResponse:\n    \"\"\"Default 500 exception handler. Can be overloaded.\"\"\"\n    return AirResponse(\n        mvpcss(\n            Title(\"500 Internal Server Error\"),\n            H1(\"500 Internal Server Error\"),\n            P(\"An internal server error occurred.\"),\n        ),\n        status_code=500,\n    )\n</code></pre>"},{"location":"api/exceptions/","title":"Exceptions","text":""},{"location":"api/exceptions/#air.exceptions.BaseAirException","title":"BaseAirException","text":"<p>               Bases: <code>Exception</code></p> <p>Base AIR Exception</p>"},{"location":"api/exceptions/#air.exceptions.HTTPException","title":"HTTPException","text":"<p>               Bases: <code>HTTPException</code></p> <p>Convenience import from FastAPI</p>"},{"location":"api/exceptions/#air.exceptions.ObjectDoesNotExist","title":"ObjectDoesNotExist","text":"<p>               Bases: <code>HTTPException</code></p> <p>Thrown when a record in a persistence store can't be found.</p>"},{"location":"api/exceptions/#air.exceptions.RenderException","title":"RenderException","text":"<p>               Bases: <code>BaseAirException</code></p> <p>Error thrown when render function fails.</p>"},{"location":"api/forms/","title":"Forms","text":"<p>Display and Validation of HTML forms. Powered by pydantic.</p> <p>Pro-tip: Always validate incoming data.</p>"},{"location":"api/forms/#air.forms.AirForm","title":"AirForm","text":"<pre><code>AirForm(initial_data=None)\n</code></pre> <p>A form handler that validates incoming form data against a Pydantic model. Can be used with awaited form data or with FastAPI's dependency injection system.</p> <p>Example:</p> <pre><code>class FlightModel(BaseModel):\n    flight_number: str\n    destination: str\n\nclass FlightForm(air.AirForm):\n    model = FlightModel\n\n@app.post(\"/flight\")\nasync def flight_form(request: air.Request):\n    \"Awaited form data\"\n    flight = await FlightForm.from_request(request)\n    if flight.is_valid:\n        return air.Html(air.H1(flight.data.flight_number))\n    return air.Html(air.H1(air.Raw(str(len(flight.errors)))))\n\n@app.post(\"/flight-depends\")\nasync def flight_form_depends(flight: Annotated[FlightForm, Depends(FlightForm())]):\n    \"Dependency injection\"\n    if flight.is_valid:\n        return air.Html(air.H1(flight.data.flight_number))\n    return air.Html(air.H1(air.Raw(str(len(flight.errors)))))\n</code></pre> <p>NOTE: This is named AirForm to avoid collisions with tags.Form</p> Source code in <code>src/air/forms.py</code> <pre><code>def __init__(self, initial_data: dict | None = None) -&gt; None:\n    if self.model is None:\n        msg = \"model\"\n        raise NotImplementedError(msg)\n    self.initial_data = initial_data\n</code></pre>"},{"location":"api/forms/#air.forms.AirForm.widget","title":"widget  <code>property</code>","text":"<pre><code>widget\n</code></pre> <p>Widget for rendering of form in HTML</p> <p>If you want a custom widget, replace with a function that accepts:</p> <pre><code>- model: BaseModel\n- data: dict|None\n- errors:dict|None=None\n</code></pre>"},{"location":"api/forms/#air.forms.AirField","title":"AirField","text":"<pre><code>AirField(\n    default=None,\n    *,\n    type=None,\n    label=None,\n    default_factory=None,\n    alias=None,\n    autofocus=False,\n    title=None,\n    description=None,\n    gt=None,\n    ge=None,\n    lt=None,\n    le=None,\n    multiple_of=None,\n    min_length=None,\n    max_length=None,\n    pattern=None,\n    max_digits=None,\n    decimal_places=None,\n    examples=None,\n    deprecated=None,\n    exclude=False,\n    discriminator=None,\n    frozen=None,\n    validate_default=None,\n    repr=True,\n    init_var=None,\n    kw_only=None,\n    json_schema_extra=None,\n    **extra,\n)\n</code></pre> <p>A wrapper around pydantic.Field to provide a cleaner interface for defining special input types and labels in air forms.</p> <p>NOTE: This is named AirField to adhere to the same naming convention as AirForm.</p> <p>Example:</p> <pre><code>class CheeseModel(BaseModel):\n    name: str = air.AirField(label=\"Name\", autofocus=True)\n    age: int\n\nclass CheeseForm(air.AirForm):\n    model = CheeseModel\n</code></pre> Source code in <code>src/air/forms.py</code> <pre><code>def AirField(\n    default: Any = None,\n    *,\n    type: str | None = None,\n    label: str | None = None,\n    default_factory: Callable[[], Any] | None = None,\n    alias: str | None = None,\n    autofocus: bool = False,\n    title: str | None = None,\n    description: str | None = None,\n    gt: float | None = None,\n    ge: float | None = None,\n    lt: float | None = None,\n    le: float | None = None,\n    multiple_of: float | None = None,\n    min_length: int | None = None,\n    max_length: int | None = None,\n    pattern: str | None = None,\n    max_digits: int | None = None,\n    decimal_places: int | None = None,\n    examples: list[Any] | None = None,\n    deprecated: bool | str | None = None,\n    exclude: bool = False,\n    discriminator: str | None = None,\n    frozen: bool | None = None,\n    validate_default: bool | None = None,\n    repr: bool = True,\n    init_var: bool | None = None,\n    kw_only: bool | None = None,\n    json_schema_extra: dict | None = None,\n    **extra: Any,\n) -&gt; Any:\n    \"\"\"A wrapper around pydantic.Field to provide a cleaner interface for defining\n    special input types and labels in air forms.\n\n    NOTE: This is named AirField to adhere to the same naming convention as AirForm.\n\n    Example:\n\n        class CheeseModel(BaseModel):\n            name: str = air.AirField(label=\"Name\", autofocus=True)\n            age: int\n\n        class CheeseForm(air.AirForm):\n            model = CheeseModel\n    \"\"\"\n    if json_schema_extra is None:\n        json_schema_extra = {}\n    if type:\n        json_schema_extra[type] = True\n    if label:\n        json_schema_extra[\"label\"] = label\n    if autofocus:\n        json_schema_extra[\"autofocus\"] = True\n\n    return Field(\n        default,\n        json_schema_extra=json_schema_extra,\n        default_factory=default_factory,\n        alias=alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        multiple_of=multiple_of,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        examples=examples,\n        deprecated=deprecated,\n        exclude=exclude,\n        discriminator=discriminator,\n        frozen=frozen,\n        validate_default=validate_default,\n        repr=repr,\n        init_var=init_var,\n        kw_only=kw_only,\n        **extra,\n    )\n</code></pre>"},{"location":"api/forms/#air.forms.errors_to_dict","title":"errors_to_dict","text":"<pre><code>errors_to_dict(errors)\n</code></pre> <p>Converts a pydantic error list to a dictionary for easier reference.</p> Source code in <code>src/air/forms.py</code> <pre><code>def errors_to_dict(errors: list[dict] | None) -&gt; dict[str, dict]:\n    \"\"\"Converts a pydantic error list to a dictionary for easier reference.\"\"\"\n    if errors is None:\n        return {}\n    return {error[\"loc\"][0]: error for error in errors}\n</code></pre>"},{"location":"api/forms/#air.forms.pydantic_type_to_html_type","title":"pydantic_type_to_html_type","text":"<pre><code>pydantic_type_to_html_type(field_info)\n</code></pre> <p>Return HTML type from pydantic type.</p> <p>Default to 'text' for unknown types.</p> Source code in <code>src/air/forms.py</code> <pre><code>def pydantic_type_to_html_type(field_info: Any) -&gt; str:\n    \"\"\"Return HTML type from pydantic type.\n\n    Default to 'text' for unknown types.\n    \"\"\"\n    special_fields = [\n        \"hidden\",\n        \"email\",\n        \"password\",\n        \"url\",\n        \"datedatetime-local\",\n        \"month\",\n        \"time\",\n        \"color\",\n        \"file\",\n    ]\n    for field in special_fields:\n        if field_info.json_schema_extra and field_info.json_schema_extra.get(field, False):\n            return field\n\n    return {int: \"number\", float: \"number\", bool: \"checkbox\", str: \"text\"}.get(field_info.annotation, \"text\")\n</code></pre>"},{"location":"api/layouts/","title":"Layouts","text":"<p>Tools for building layouts and several simple layouts for quick prototyping.</p>"},{"location":"api/layouts/#air.layouts.filter_body_tags","title":"filter_body_tags","text":"<pre><code>filter_body_tags(tags)\n</code></pre> <p>Given a list of tags, only list the ones that belong in body of an HTML document.</p> Source code in <code>src/air/layouts.py</code> <pre><code>def filter_body_tags(tags) -&gt; list:\n    \"\"\"Given a list of tags, only list the ones that belong in body of an HTML document.\"\"\"\n    return [t for t in tags if not isinstance(t, HEAD_TAG_TYPES)]\n</code></pre>"},{"location":"api/layouts/#air.layouts.filter_head_tags","title":"filter_head_tags","text":"<pre><code>filter_head_tags(tags)\n</code></pre> <p>Given a list of tags, only list the ones that belong in head of an HTML document.</p> Source code in <code>src/air/layouts.py</code> <pre><code>def filter_head_tags(tags) -&gt; list:\n    \"\"\"Given a list of tags, only list the ones that belong in head of an HTML document.\"\"\"\n    return [t for t in tags if isinstance(t, HEAD_TAG_TYPES)]\n</code></pre>"},{"location":"api/layouts/#air.layouts.mvpcss","title":"mvpcss","text":"<pre><code>mvpcss(*children, is_htmx=False, **kwargs)\n</code></pre> <p>Renders the basic layout with MVP.css and HTMX for quick prototyping</p> <ol> <li>At the top level HTML head tags are put in the <code>&lt;head&gt;</code> tag</li> <li>Otherwise everything is put in the <code>&lt;body&gt;</code></li> <li><code>Header</code> and <code>Nav</code> tags are placed in the top of the body above the <code>Main</code> tag</li> <li>If <code>is_htmx</code> is True, then the layout isn't included. This is to support the <code>hx_boost</code>     feature of HTMX</li> </ol> <p>The <code>mvpcss</code> function is a quick prototyping tool. It isn't designed to be extensible.     Rather the <code>mvpcss</code> layout function makes it easy to roll out quick demonstrations and proofs-of-concept.     For more advanced layouts like Eidos or a full-fledged MVP.css implementation,     you'll have to create your own layouts.</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>These typically inherit from air.Tag but can be anything</p> <code>()</code> <code>is_htmx</code> <code>bool</code> <p>Whether or not HTMX sent the request from the page</p> <code>False</code> <p>Example:</p> <pre><code>from fastapi import Depends\nimport air\n\napp = air.Air()\n\n\n@app.page\nasync def index(is_htmx: bool = Depends(air.is_htmx_request)):\n    return air.layouts.mvpcss(\n        air.Title(\"Home\"),\n        air.Article(\n            air.H1(\"Welcome to Air\"), air.P(air.A(\"Click to go to Dashboard\", href=\"/dashboard\")), hx_boost=\"true\"\n        ),\n        is_htmx=is_htmx\n    )\n\n\n@app.page\nasync def dashboard(is_htmx: bool = Depends(air.is_htmx_request)):\n    return air.layouts.mvpcss(\n        air.Title(\"Dashboard\"), air.Article(air.H1(\"Dashboard\"), air.P(air.A(\"Go home\", href=\"/\")), hx_boost=\"true\"),\n        is_htmx=is_htmx\n    )\n</code></pre> Source code in <code>src/air/layouts.py</code> <pre><code>def mvpcss(*children: Any, is_htmx: bool = False, **kwargs: AttributesType) -&gt; Html | Children:\n    \"\"\"Renders the basic layout with MVP.css and HTMX for quick prototyping\n\n    1. At the top level HTML head tags are put in the `&lt;head&gt;` tag\n    2. Otherwise everything is put in the `&lt;body&gt;`\n    3. `Header` and `Nav` tags are placed in the top of the body above the `Main` tag\n    4. If `is_htmx` is True, then the layout isn't included. This is to support the `hx_boost`\n        feature of HTMX\n\n    The `mvpcss` function is a quick prototyping tool. It isn't designed to be extensible.\n        Rather the `mvpcss` layout function makes it easy to roll out quick demonstrations and proofs-of-concept.\n        For more advanced layouts like Eidos or a full-fledged MVP.css implementation,\n        you'll have to create your own layouts.\n\n    Args:\n        children: These typically inherit from air.Tag but can be anything\n        is_htmx: Whether or not HTMX sent the request from the page\n\n    Example:\n\n        from fastapi import Depends\n        import air\n\n        app = air.Air()\n\n\n        @app.page\n        async def index(is_htmx: bool = Depends(air.is_htmx_request)):\n            return air.layouts.mvpcss(\n                air.Title(\"Home\"),\n                air.Article(\n                    air.H1(\"Welcome to Air\"), air.P(air.A(\"Click to go to Dashboard\", href=\"/dashboard\")), hx_boost=\"true\"\n                ),\n                is_htmx=is_htmx\n            )\n\n\n        @app.page\n        async def dashboard(is_htmx: bool = Depends(air.is_htmx_request)):\n            return air.layouts.mvpcss(\n                air.Title(\"Dashboard\"), air.Article(air.H1(\"Dashboard\"), air.P(air.A(\"Go home\", href=\"/\")), hx_boost=\"true\"),\n                is_htmx=is_htmx\n            )\n\n    \"\"\"\n    body_tags = filter_body_tags(children)\n    head_tags = filter_head_tags(children)\n\n    if is_htmx:\n        return Children(Main(*body_tags), *head_tags)\n\n    return Html(\n        Head(\n            Link(rel=\"stylesheet\", href=\"https://unpkg.com/mvp.css\"),\n            Style(\"footer, header, main { padding: 1rem; } nav {margin-bottom: 1rem;}\"),\n            Script(\n                src=\"https://cdn.jsdelivr.net/npm/htmx.org@2.0.6/dist/htmx.min.js\",\n                integrity=\"sha384-Akqfrbj/HpNVo8k11SXBb6TlBWmXXlYQrCSqEWmyKJe+hDm3Z/B2WVG4smwBkRVm\",\n                crossorigin=\"anonymous\",\n            ),\n            *head_tags,\n        ),\n        Body(\n            _header(body_tags),\n            Main(*[x for x in body_tags if not isinstance(x, Header)]),\n        ),\n    )\n</code></pre>"},{"location":"api/layouts/#air.layouts.picocss","title":"picocss","text":"<pre><code>picocss(*children, is_htmx=False, **kwargs)\n</code></pre> <p>Renders the basic layout with PicoCSS and HTMX for quick prototyping</p> <ol> <li>At the top level HTML head tags are put in the <code>&lt;head&gt;</code> tag</li> <li>Otherwise everything is put in the <code>&lt;body&gt;</code></li> <li>If <code>is_htmx</code> is True, then the layout isn't included. This is to support the <code>hx_boost</code>     feature of HTMX</li> </ol> <code>PicoCSS</code> is a quick prototyping tool. It isn't designed to be extensible. <p>Rather the <code>pico</code> layout function makes it easy to roll out quick demonstrations and proofs-of-concept. For more advanced layouts like Eidos or a full-fledged PicoCSS implementation, you'll have to create your own layouts.</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>These typically inherit from air.Tag but can be anything</p> <code>()</code> <code>is_htmx</code> <code>bool</code> <p>Whether or not HTMX sent the request from the page</p> <code>False</code> Source code in <code>src/air/layouts.py</code> <pre><code>def picocss(*children: Any, is_htmx: bool = False, **kwargs: AttributesType) -&gt; Html | Children:\n    \"\"\"Renders the basic layout with PicoCSS and HTMX for quick prototyping\n\n    1. At the top level HTML head tags are put in the `&lt;head&gt;` tag\n    2. Otherwise everything is put in the `&lt;body&gt;`\n    3. If `is_htmx` is True, then the layout isn't included. This is to support the `hx_boost`\n        feature of HTMX\n\n    Note: `PicoCSS` is a quick prototyping tool. It isn't designed to be extensible.\n        Rather the `pico` layout function makes it easy to roll out quick demonstrations and proofs-of-concept.\n        For more advanced layouts like Eidos or a full-fledged PicoCSS implementation,\n        you'll have to create your own layouts.\n\n    Args:\n        children: These typically inherit from air.Tag but can be anything\n        is_htmx: Whether or not HTMX sent the request from the page\n\n    \"\"\"\n    body_tags = filter_body_tags(children)\n    head_tags = filter_head_tags(children)\n\n    if is_htmx:\n        return Children(Main(*body_tags, class_=\"container\"), *head_tags)\n\n    return Html(\n        Head(\n            Link(\n                rel=\"stylesheet\",\n                href=\"https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css\",\n            ),\n            Script(\n                src=\"https://cdn.jsdelivr.net/npm/htmx.org@2.0.6/dist/htmx.min.js\",\n                integrity=\"sha384-Akqfrbj/HpNVo8k11SXBb6TlBWmXXlYQrCSqEWmyKJe+hDm3Z/B2WVG4smwBkRVm\",\n                crossorigin=\"anonymous\",\n            ),\n            *head_tags,\n        ),\n        Body(Main(*body_tags, class_=\"container\")),\n    )\n</code></pre>"},{"location":"api/middleware/","title":"Middleware","text":"<p>Middleware are callables (functions, classes) that works with every request before it is processed by views. And also with every response before returning it.</p> <ul> <li>Middleware takes each request that comes to applications</li> <li>It can then do something to that request or run code</li> <li>Then it passes the request to be processed by the rest of the application (by individual views)</li> <li>Takes the response generated by the application</li> <li>Can do something to that response or run code</li> <li>Finally returns the response.</li> </ul> <p>Background tasks run after middleware.</p>"},{"location":"api/middleware/#air.middleware.SessionMiddleware","title":"SessionMiddleware","text":"<p>               Bases: <code>SessionMiddleware</code></p> <p>Used to manage sessions.</p> <p>Example:</p> <pre><code>import air\nfrom time import time\n\napp = air.Air()\napp.add_middleware(air.SessionMiddleware, secret_key=\"change-me\")\n\n@app.page\nasync def index(request: air.Request):\n    if \"first-visited\" not in request.session:\n        request.session[\"first-visited\"] = time()\n    return air.layouts.mvpcss(\n        air.H1(request.session.get(\"first-visited\")),\n        air.P(\"Refresh the page and the timestamp won't change\"),\n        air.P(air.A(\"Reset the time stamp\", href=\"/reset\")),\n    )\n\n@app.page\nasync def reset(request: air.Request):\n    request.session.pop(\"first-visited\")\n    return air.responses.RedirectResponse(\"/\")\n</code></pre>"},{"location":"api/requests/","title":"Requests","text":""},{"location":"api/requests/#starlette.requests.Request","title":"Request","text":"<pre><code>Request(scope, receive=empty_receive, send=empty_send)\n</code></pre> <p>               Bases: <code>HTTPConnection</code></p> Source code in <code>.venv/lib/python3.13/site-packages/starlette/requests.py</code> <pre><code>def __init__(self, scope: Scope, receive: Receive = empty_receive, send: Send = empty_send):\n    super().__init__(scope)\n    assert scope[\"type\"] == \"http\"\n    self._receive = receive\n    self._send = send\n    self._stream_consumed = False\n    self._is_disconnected = False\n    self._form = None\n</code></pre>"},{"location":"api/responses/","title":"Responses","text":"<p>Air uses custom response classes to improve the developer experience.</p>"},{"location":"api/responses/#air.responses.AirResponse","title":"AirResponse","text":"<pre><code>AirResponse(\n    content=None,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> <p>               Bases: <code>HTMLResponse</code></p> <p>Response class to handle air.tags.Tags or HTML (from Jinja2).</p> Source code in <code>.venv/lib/python3.13/site-packages/starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: Any = None,\n    status_code: int = 200,\n    headers: Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    self.status_code = status_code\n    if media_type is not None:\n        self.media_type = media_type\n    self.background = background\n    self.body = self.render(content)\n    self.init_headers(headers)\n</code></pre>"},{"location":"api/responses/#air.responses.AirResponse.render","title":"render","text":"<pre><code>render(tag)\n</code></pre> <p>Render Tag elements to bytes of HTML.</p> Source code in <code>src/air/responses.py</code> <pre><code>@override\ndef render(self, tag: BaseTag | str) -&gt; bytes:\n    \"\"\"Render Tag elements to bytes of HTML.\"\"\"\n    return super().render(str(tag))\n</code></pre>"},{"location":"api/responses/#air.responses.SSEResponse","title":"SSEResponse","text":"<pre><code>SSEResponse(\n    content,\n    status_code=200,\n    headers=None,\n    media_type=None,\n    background=None,\n)\n</code></pre> <p>               Bases: <code>StreamingResponse</code></p> <p>Response class for Server Sent Events</p> <p>Example:</p> <pre><code># For tags\nimport random\nfrom asyncio import sleep\n\nimport air\n\napp = air.Air()\n\n\n@app.page\ndef index():\n    return air.layouts.mvpcss(\n        air.Script(src=\"https://unpkg.com/htmx-ext-sse@2.2.1/sse.js\"),\n        air.Title(\"Server Sent Event Demo\"),\n        air.H1(\"Server Sent Event Demo\"),\n        air.P(\"Lottery number generator\"),\n        air.Section(\n            hx_ext=\"sse\",\n            sse_connect=\"/lottery-numbers\",\n            hx_swap=\"beforeend show:bottom\",\n            sse_swap=\"message\",\n        ),\n    )\n\nasync def lottery_generator():\n    while True:\n        lottery_numbers = \", \".join([str(random.randint(1, 40)) for x in range(6)])\n        # Tags work seamlessly\n        yield air.Aside(lottery_numbers)\n        # As do strings. Non-strings are cast to strings via the str built-in\n        yield \"Hello, world\"\n        await sleep(1)\n\n\n@app.get(\"/lottery-numbers\")\nasync def get():\n    return air.SSEResponse(lottery_generator())\n</code></pre> Source code in <code>.venv/lib/python3.13/site-packages/starlette/responses.py</code> <pre><code>def __init__(\n    self,\n    content: ContentStream,\n    status_code: int = 200,\n    headers: Mapping[str, str] | None = None,\n    media_type: str | None = None,\n    background: BackgroundTask | None = None,\n) -&gt; None:\n    if isinstance(content, AsyncIterable):\n        self.body_iterator = content\n    else:\n        self.body_iterator = iterate_in_threadpool(content)\n    self.status_code = status_code\n    self.media_type = self.media_type if media_type is None else media_type\n    self.background = background\n    self.init_headers(headers)\n</code></pre>"},{"location":"api/routing/","title":"Routing","text":"<p>Routing </p> <p>If you need to knit several Python modules with their own Air views into one, that's where Routing is used. They allow the near seamless combination of multiple Air apps into one. Larger sites are often built from multiple routers.</p> <p>Let's imagine we have an e-commerce store with a shopping cart app. Use instantiate a <code>router</code> object using <code>air.AirRouter()</code> just as we would with <code>air.App()</code>:</p> <pre><code># cart.py\nimport air\n\nrouter = air.AirRouter()\n\n@router.page\ndef cart():\n    return air.H1('I am a shopping cart')\n</code></pre> <p>Then in our main page we can load that and tie it into our main <code>app</code>.</p> <pre><code>import air\nfrom cart import router as cart_router\n\napp = air.Air()\napp.include_router(cart_router)\n\n@app.page\ndef index():\n    return air.H1('Home page')\n</code></pre> <p>Note that the router allows sharing of sessions and other application states.</p> <p>Use routing if you want a single cohesive app where all routes share middlewares and error handling.</p>"},{"location":"api/routing/#air.routing.AirRouter","title":"AirRouter","text":"<pre><code>AirRouter(\n    *,\n    prefix=\"\",\n    tags=None,\n    dependencies=None,\n    default_response_class=AirResponse,\n    responses=None,\n    callbacks=None,\n    routes=None,\n    redirect_slashes=True,\n    default=None,\n    dependency_overrides_provider=None,\n    route_class=APIRoute,\n    on_startup=None,\n    on_shutdown=None,\n    lifespan=None,\n    deprecated=None,\n    include_in_schema=True,\n    generate_unique_id_function=default_generate_unique_id,\n)\n</code></pre> <p>               Bases: <code>APIRouter</code></p> <p><code>AirRouter</code> class, used to group path operations, for example to structure an app in multiple files. It would then be included in the <code>App</code> app, or in another <code>AirRouter</code> (ultimately included in the app).</p> <p>Example</p> <pre><code>```python\nimport air\n\napp = air.Air()\nrouter = air.AirRouter()\n\n\n@router.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n\napp.include_router(router)\n```\n</code></pre> Source code in <code>src/air/routing.py</code> <pre><code>def __init__(\n    self,\n    *,\n    prefix: Annotated[str, Doc(\"An optional path prefix for the router.\")] = \"\",\n    tags: Annotated[\n        list[str | Enum] | None,\n        Doc(\n            \"\"\"\n            A list of tags to be applied to all the *path operations* in this\n            router.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Sequence[params.Depends] | None,\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to all the\n            *path operations* in this router.\n\n            Read more about it in the\n            [FastAPI docs for Bigger Applications - Multiple Files](https://fastapi.tiangolo.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n            \"\"\"\n        ),\n    ] = None,\n    default_response_class: Annotated[\n        type[Response],\n        Doc(\n            \"\"\"\n            The default response class to be used.\n\n            Read more in the\n            [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#default-response-class).\n            \"\"\"\n        ),\n    ] = AirResponse,\n    responses: Annotated[\n        dict[int | str, dict[str, Any]] | None,\n        Doc(\n            \"\"\"\n            Additional responses to be shown in OpenAPI.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Additional Responses in OpenAPI](https://fastapi.tiangolo.com/advanced/additional-responses/).\n\n            And in the\n            [FastAPI docs for Bigger Applications](https://fastapi.tiangolo.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        list[BaseRoute] | None,\n        Doc(\n            \"\"\"\n            OpenAPI callbacks that should apply to all *path operations* in this\n            router.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    routes: Annotated[\n        list[BaseRoute] | None,\n        Doc(\n            \"\"\"\n            **Note**: you probably shouldn't use this parameter, it is inherited\n            from Starlette and supported for compatibility.\n\n            ---\n\n            A list of routes to serve incoming HTTP and WebSocket requests.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            You normally wouldn't use this parameter with FastAPI, it is inherited\n            from Starlette and supported for compatibility.\n\n            In FastAPI, you normally would use the *path operation methods*,\n            like `router.get()`, `router.post()`, etc.\n            \"\"\"\n        ),\n    ] = None,\n    redirect_slashes: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Whether to detect and redirect slashes in URLs when the client doesn't\n            use the same format.\n            \"\"\"\n        ),\n    ] = True,\n    default: Annotated[\n        ASGIApp | None,\n        Doc(\n            \"\"\"\n            Default function handler for this router. Used to handle\n            404 Not Found errors.\n            \"\"\"\n        ),\n    ] = None,\n    dependency_overrides_provider: Annotated[\n        Any | None,\n        Doc(\n            \"\"\"\n            Only used internally by FastAPI to handle dependency overrides.\n\n            You shouldn't need to use it. It normally points to the `FastAPI` app\n            object.\n            \"\"\"\n        ),\n    ] = None,\n    route_class: Annotated[\n        type[APIRoute],\n        Doc(\n            \"\"\"\n            Custom route (*path operation*) class to be used by this router.\n\n            Read more about it in the\n            [FastAPI docs for Custom Request and APIRoute class](https://fastapi.tiangolo.com/how-to/custom-request-and-route/#custom-apiroute-class-in-a-router).\n            \"\"\"\n        ),\n    ] = APIRoute,\n    on_startup: Annotated[\n        Sequence[Callable[[], Any]] | None,\n        Doc(\n            \"\"\"\n            A list of startup event handler functions.\n\n            You should instead use the `lifespan` handlers.\n\n            Read more in the [FastAPI docs for `lifespan`](https://fastapi.tiangolo.com/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    on_shutdown: Annotated[\n        Sequence[Callable[[], Any]] | None,\n        Doc(\n            \"\"\"\n            A list of shutdown event handler functions.\n\n            You should instead use the `lifespan` handlers.\n\n            Read more in the\n            [FastAPI docs for `lifespan`](https://fastapi.tiangolo.com/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    # the generic to Lifespan[AppType] is the type of the top level application\n    # which the router cannot know statically, so we use typing.Any\n    lifespan: Annotated[\n        Lifespan[Any] | None,\n        Doc(\n            \"\"\"\n            A `Lifespan` context manager handler. This replaces `startup` and\n            `shutdown` functions with a single context manager.\n\n            Read more in the\n            [FastAPI docs for `lifespan`](https://fastapi.tiangolo.com/advanced/events/).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        bool | None,\n        Doc(\n            \"\"\"\n            Mark all *path operations* in this router as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) all the *path operations* in this router in the\n            generated OpenAPI.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-parameters-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = default_generate_unique_id,\n) -&gt; None:\n    if default is None:\n        default = Air\n    super().__init__(\n        prefix=prefix,\n        tags=tags,\n        dependencies=dependencies,\n        default_response_class=default_response_class,\n        responses=responses,\n        callbacks=callbacks,\n        routes=routes,\n        redirect_slashes=redirect_slashes,\n        default=default,\n        dependency_overrides_provider=dependency_overrides_provider,\n        route_class=route_class,\n        on_startup=on_startup,\n        on_shutdown=on_shutdown,\n        lifespan=lifespan,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        generate_unique_id_function=generate_unique_id_function,\n    )\n    if prefix:\n        assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n        assert not prefix.endswith(\"/\"), \"A path prefix must not end with '/' except for the root path\"\n</code></pre>"},{"location":"api/routing/#air.routing.AirRouter.get","title":"get","text":"<pre><code>get(\n    path,\n    *,\n    response_model=None,\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=AirResponse,\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=generate_unique_id,\n)\n</code></pre> <p>Add a path operation using an HTTP GET operation.</p>"},{"location":"api/routing/#air.routing.AirRouter.get--example","title":"Example","text":"<pre><code>from air import Air, AirRouter\n\napp = Air()\nrouter = AirRouter()\n\n\n@app.get(\"/hello\")\ndef hello_world():\n    return air.H1(\"Hello, World!\")\n\n\napp.include_router(router)\n</code></pre> Source code in <code>src/air/routing.py</code> <pre><code>def get(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, FastAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = None,\n    status_code: Annotated[\n        int | None,\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        list[str | Enum] | None,\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Sequence[params.Depends] | None,\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        str | None,\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        str | None,\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        dict[int | str, dict[str, Any]] | None,\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        bool | None,\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        str | None,\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `FastAPI` class.\n\n            Read more about it in the\n            [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        IncEx | None,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        IncEx | None,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-parameters-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = AirResponse,\n    name: Annotated[\n        str | None,\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        list[BaseRoute] | None,\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        dict[str, Any] | None,\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = generate_unique_id,\n) -&gt; Callable[[Callable[..., Any]], Callable[..., Any]]:\n    \"\"\"\n    Add a *path operation* using an HTTP GET operation.\n\n    ## Example\n\n    ```python\n    from air import Air, AirRouter\n\n    app = Air()\n    router = AirRouter()\n\n\n    @app.get(\"/hello\")\n    def hello_world():\n        return air.H1(\"Hello, World!\")\n\n\n    app.include_router(router)\n    ```\n    \"\"\"\n\n    def decorator[**P, R](func: Callable[P, MaybeAwaitable[R]]) -&gt; Callable[..., Any]:\n        @wraps(func)\n        async def endpoint(*args: P.args, **kw: P.kwargs) -&gt; Response:\n            result = func(*args, **kw)\n            if inspect.isawaitable(result):\n                result = await result\n            if isinstance(result, Response):\n                return result\n            # Force HTML for non-Response results\n            return response_class(result)\n\n        return super(AirRouter, self).get(\n            path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )(endpoint)\n\n    return decorator\n</code></pre>"},{"location":"api/routing/#air.routing.AirRouter.page","title":"page","text":"<pre><code>page(func)\n</code></pre> <p>Decorator that creates a GET route using the function name as the path.</p> <p>If the name of the function is \"index\", then the route is \"/\".</p> <p>Example:</p> <pre><code>import air\n\napp = air.Air()\nrouter = air.AirRouter()\n\n@router.page\ndef index(): # routes is \"/\"\n    return H1(\"I am the home page\")\n\n@router.page\ndef data(): # route is \"/data\"\n    return H1(\"I am the home page\")\n\n@router.page\ndef about_us(): # routes is \"/about-us\"\n    return H1(\"I am the about page\")\n\napp.include_router(router)\n</code></pre> Source code in <code>src/air/routing.py</code> <pre><code>def page(self, func: FunctionType) -&gt; FunctionType:\n    \"\"\"Decorator that creates a GET route using the function name as the path.\n\n    If the name of the function is \"index\", then the route is \"/\".\n\n    Example:\n\n        import air\n\n        app = air.Air()\n        router = air.AirRouter()\n\n        @router.page\n        def index(): # routes is \"/\"\n            return H1(\"I am the home page\")\n\n        @router.page\n        def data(): # route is \"/data\"\n            return H1(\"I am the home page\")\n\n        @router.page\n        def about_us(): # routes is \"/about-us\"\n            return H1(\"I am the about page\")\n\n        app.include_router(router)\n    \"\"\"\n    page_path = compute_page_path(func.__name__)\n\n    # Pin the route's response_class for belt-and-suspenders robustness\n    return self.get(page_path)(func)\n</code></pre>"},{"location":"api/routing/#air.routing.AirRouter.post","title":"post","text":"<pre><code>post(\n    path,\n    *,\n    response_model=None,\n    status_code=None,\n    tags=None,\n    dependencies=None,\n    summary=None,\n    description=None,\n    response_description=\"Successful Response\",\n    responses=None,\n    deprecated=None,\n    operation_id=None,\n    response_model_include=None,\n    response_model_exclude=None,\n    response_model_by_alias=True,\n    response_model_exclude_unset=False,\n    response_model_exclude_defaults=False,\n    response_model_exclude_none=False,\n    include_in_schema=True,\n    response_class=AirResponse,\n    name=None,\n    callbacks=None,\n    openapi_extra=None,\n    generate_unique_id_function=generate_unique_id,\n)\n</code></pre> <p>Add a path operation using an HTTP POST operation.</p> Source code in <code>src/air/routing.py</code> <pre><code>def post(\n    self,\n    path: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL path to be used for this *path operation*.\n\n            For example, in `http://example.com/items`, the path is `/items`.\n            \"\"\"\n        ),\n    ],\n    *,\n    response_model: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The type to use for the response.\n\n            It could be any valid Pydantic *field* type. So, it doesn't have to\n            be a Pydantic model, it could be other things, like a `list`, `dict`,\n            etc.\n\n            It will be used for:\n\n            * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                show it as the response (JSON Schema).\n            * Serialization: you could return an arbitrary object and the\n                `response_model` would be used to serialize that object into the\n                corresponding JSON.\n            * Filtering: the JSON sent to the client will only contain the data\n                (fields) defined in the `response_model`. If you returned an object\n                that contains an attribute `password` but the `response_model` does\n                not include that field, the JSON sent to the client would not have\n                that `password`.\n            * Validation: whatever you return will be serialized with the\n                `response_model`, converting any data as necessary to generate the\n                corresponding JSON. But if the data in the object returned is not\n                valid, that would mean a violation of the contract with the client,\n                so it's an error from the API developer. So, FastAPI will raise an\n                error and return a 500 error code (Internal Server Error).\n\n            Read more about it in the\n            [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n            \"\"\"\n        ),\n    ] = None,\n    status_code: Annotated[\n        int | None,\n        Doc(\n            \"\"\"\n            The default status code to be used for the response.\n\n            You could override the status code by returning a response directly.\n\n            Read more about it in the\n            [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n            \"\"\"\n        ),\n    ] = None,\n    tags: Annotated[\n        list[str | Enum] | None,\n        Doc(\n            \"\"\"\n            A list of tags to be applied to the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n            \"\"\"\n        ),\n    ] = None,\n    dependencies: Annotated[\n        Sequence[params.Depends] | None,\n        Doc(\n            \"\"\"\n            A list of dependencies (using `Depends()`) to be applied to the\n            *path operation*.\n\n            Read more about it in the\n            [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n            \"\"\"\n        ),\n    ] = None,\n    summary: Annotated[\n        str | None,\n        Doc(\n            \"\"\"\n            A summary for the *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        str | None,\n        Doc(\n            \"\"\"\n            A description for the *path operation*.\n\n            If not provided, it will be extracted automatically from the docstring\n            of the *path operation function*.\n\n            It can contain Markdown.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n            \"\"\"\n        ),\n    ] = None,\n    response_description: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The description for the default response.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = \"Successful Response\",\n    responses: Annotated[\n        dict[int | str, dict[str, Any]] | None,\n        Doc(\n            \"\"\"\n            Additional responses that could be returned by this *path operation*.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        bool | None,\n        Doc(\n            \"\"\"\n            Mark this *path operation* as deprecated.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    operation_id: Annotated[\n        str | None,\n        Doc(\n            \"\"\"\n            Custom operation ID to be used by this *path operation*.\n\n            By default, it is generated automatically.\n\n            If you provide a custom operation ID, you need to make sure it is\n            unique for the whole API.\n\n            You can customize the\n            operation ID generation with the parameter\n            `generate_unique_id_function` in the `FastAPI` class.\n\n            Read more about it in the\n            [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_include: Annotated[\n        IncEx | None,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to include only certain fields in the\n            response data.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_exclude: Annotated[\n        IncEx | None,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to exclude certain fields in the\n            response data.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = None,\n    response_model_by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response model\n            should be serialized by alias when an alias is used.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n            \"\"\"\n        ),\n    ] = True,\n    response_model_exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that were not set and\n            have their default values. This is different from\n            `response_model_exclude_defaults` in that if the fields are set,\n            they will be included in the response, even if the value is the same\n            as the default.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data\n            should have all the fields, including the ones that have the same value\n            as the default. This is different from `response_model_exclude_unset`\n            in that if the fields are set but contain the same default values,\n            they will be excluded from the response.\n\n            When `True`, default values are omitted from the response.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n            \"\"\"\n        ),\n    ] = False,\n    response_model_exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Configuration passed to Pydantic to define if the response data should\n            exclude fields set to `None`.\n\n            This is much simpler (less smart) than `response_model_exclude_unset`\n            and `response_model_exclude_defaults`. You probably want to use one of\n            those two instead of this one, as those allow returning `None` values\n            when it makes sense.\n\n            Read more about it in the\n            [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n            \"\"\"\n        ),\n    ] = False,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Include this *path operation* in the generated OpenAPI schema.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-parameters-from-openapi).\n            \"\"\"\n        ),\n    ] = True,\n    response_class: Annotated[\n        type[Response],\n        Doc(\n            \"\"\"\n            Response class to be used for this *path operation*.\n\n            This will not be used if you return a response directly.\n\n            Read more about it in the\n            [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n            \"\"\"\n        ),\n    ] = AirResponse,\n    name: Annotated[\n        str | None,\n        Doc(\n            \"\"\"\n            Name for this *path operation*. Only used internally.\n            \"\"\"\n        ),\n    ] = None,\n    callbacks: Annotated[\n        list[BaseRoute] | None,\n        Doc(\n            \"\"\"\n            List of *path operations* that will be used as OpenAPI callbacks.\n\n            This is only for OpenAPI documentation, the callbacks won't be used\n            directly.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Read more about it in the\n            [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n            \"\"\"\n        ),\n    ] = None,\n    openapi_extra: Annotated[\n        dict[str, Any] | None,\n        Doc(\n            \"\"\"\n            Extra metadata to be included in the OpenAPI schema for this *path\n            operation*.\n\n            Read more about it in the\n            [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n            \"\"\"\n        ),\n    ] = None,\n    generate_unique_id_function: Annotated[\n        Callable[[APIRoute], str],\n        Doc(\n            \"\"\"\n            Customize the function used to generate unique IDs for the *path\n            operations* shown in the generated OpenAPI.\n\n            This is particularly useful when automatically generating clients or\n            SDKs for your API.\n\n            Read more about it in the\n            [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n            \"\"\"\n        ),\n    ] = generate_unique_id,\n) -&gt; Callable[[Callable[..., Any]], Callable[..., Any]]:\n    \"\"\"\n    Add a *path operation* using an HTTP POST operation.\n    \"\"\"\n\n    def decorator[**P, R](func: Callable[P, MaybeAwaitable[R]]) -&gt; Callable[..., Any]:\n        @wraps(func)\n        async def endpoint(*args: P.args, **kw: P.kwargs) -&gt; Response:\n            result = func(*args, **kw)\n            if inspect.isawaitable(result):\n                result = await result\n            if isinstance(result, Response):\n                return result\n            # Force HTML for non-Response results\n            return response_class(result)\n\n        return super(AirRouter, self).post(\n            path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )(endpoint)\n\n    return decorator\n</code></pre>"},{"location":"api/templating/","title":"Templating","text":"<p>Air loves Jinja!</p> <p>A common pattern is to use a Jinja template as the project base and then use Air Tags for individual content.</p>"},{"location":"api/templating/#air.templating.JinjaRenderer","title":"JinjaRenderer","text":"<pre><code>JinjaRenderer(directory, context_processors=None, env=None)\n</code></pre> <p>Template renderer to make Jinja easier in Air.</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>str | PathLike[str] | Sequence[str | PathLike[str]]</code> <p>The template directory where Jinja templates for the project are stored.</p> required <code>context_processors</code> <code>list[Callable[[Request], dict[str, Any]]] | None</code> <p>A list of Jinja-style context processors, functions that automatically injects variables or functions into the template context so they're available in every rendered template without passing them explicitly.</p> <code>None</code> <code>env</code> <code>Environment | None</code> <p>The env is the central Jinja object that holds configuration, filters, globals, and template loading settings, and is responsible for compiling and rendering templates.</p> <code>None</code> <p>Example:</p> <pre><code># Instantiate the render callable\njinja = JinjaRenderer('templates')\n\n# Use for returning Jinja from views\n@app.get('/')\nasync def home(request: Request):\n    return jinja(\n        request,\n        'home.html',\n        context={'id': 5}\n     )\n\n    # Can also pass in kwargs, which will be added to the context:\n    return jinja(\n        request,\n        'home.html',\n        name='Parmesan'\n    )\n\n    # Will render Air Tags sent into Jinja context\n    return jinja(\n        request,\n        'home.html',\n        content=air.Article(air.P('Cheddar'))\n    )\n</code></pre> Source code in <code>src/air/templating.py</code> <pre><code>def __init__(\n    self,\n    directory: str | PathLike[str] | Sequence[str | PathLike[str]],\n    context_processors: list[Callable[[Request], dict[str, Any]]] | None = None,\n    env: jinja2.Environment | None = None,\n) -&gt; None:\n    \"\"\"Initialize with template directory path\"\"\"\n    if context_processors is None:\n        context_processors = []\n    self.templates = Jinja2Templates(directory=directory, context_processors=context_processors, env=env)\n</code></pre>"},{"location":"api/templating/#air.templating.JinjaRenderer.__call__","title":"__call__","text":"<pre><code>__call__(request, name, context=None, **kwargs)\n</code></pre> <p>Render template with request and context. If an Air Tag is found in the context, try to render it.</p> Source code in <code>src/air/templating.py</code> <pre><code>def __call__(\n    self,\n    request: Request,\n    name: str,\n    context: dict[Any, Any] | None = None,\n    **kwargs: Any,\n) -&gt; _TemplateResponse:\n    \"\"\"Render template with request and context. If an Air Tag\n    is found in the context, try to render it.\n    \"\"\"\n    if context is None:\n        context = {}\n    if kwargs:\n        context |= kwargs\n\n    # Attempt to render any Tags in the contect\n    context = {k: str(v) for k, v in context.items()}\n    return self.templates.TemplateResponse(request=request, name=name, context=context)\n</code></pre>"},{"location":"api/templating/#air.templating.Renderer","title":"Renderer","text":"<pre><code>Renderer(\n    directory,\n    context_processors=None,\n    env=None,\n    package=None,\n)\n</code></pre> <p>Template/Tag renderer to make composing pluggable functions easier.</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>str | PathLike[str] | Sequence[str | PathLike[str]]</code> <p>The template directory where Jinja templates for the project are stored.</p> required <code>context_processors</code> <code>list[Callable[[Request], dict[str, Any]]] | None</code> <p>A list of Jinja-style context processors, functions that automatically injects variables or functions into the template context so they're available in every rendered template without passing them explicitly.</p> <code>None</code> <code>env</code> <code>Environment | None</code> <p>The env is the central Jinja object that holds configuration, filters, globals, and template loading settings, and is responsible for compiling and rendering templates.</p> <code>None</code> <p>Example:</p> <pre><code>import air\n\napp = air.Air()\n\n# Instantiate the render callable\nrender = air.Renderer('templates')\n\n# Use for returning Jinja from views\n@app.get('/')\nasync def home(request: Request):\n    return render(\n        name='home.html',\n        request=request,\n        context={'id': 5}\n     )\n\n\n    # Will render name of Air Tags\n    return render(\n        request,\n        'components.home',\n        context={'id': 5}\n    )\n\n\n    # Will render callables to HTML\n    return render(\n        air.layouts.mvpcss,\n        air.Title(\"Test Page\"),\n        air.H1(\"Hello, World\")\n    )\n</code></pre> Source code in <code>src/air/templating.py</code> <pre><code>def __init__(\n    self,\n    directory: str | PathLike[str] | Sequence[str | PathLike[str]],\n    context_processors: list[Callable[[Request], dict[str, Any]]] | None = None,\n    env: jinja2.Environment | None = None,\n    package: str | None = None,\n) -&gt; None:\n    \"\"\"Initialize with template directory path\"\"\"\n    if context_processors is None:\n        context_processors = []\n    self.templates = Jinja2Templates(directory=directory, context_processors=context_processors, env=env)\n    self.package = package\n</code></pre>"},{"location":"api/templating/#air.templating.Renderer.__call__","title":"__call__","text":"<pre><code>__call__(\n    name, *children, request=None, context=None, **kwargs\n)\n</code></pre> <p>Render template with request and context. If an Air Tag is found in the context, try to render it.</p> Source code in <code>src/air/templating.py</code> <pre><code>def __call__(\n    self,\n    name: str | Callable,\n    *children: Any,\n    request: Request | None = None,\n    context: dict[Any, Any] | None = None,\n    **kwargs: Any,\n) -&gt; str:\n    \"\"\"Render template with request and context. If an Air Tag\n    is found in the context, try to render it.\n    \"\"\"\n    context = self._prepare_context(context, kwargs)\n\n    if callable(name):\n        assert not isinstance(name, str)\n        result = name(**context)\n        if isinstance(result, str):\n            return result\n        if hasattr(result, \"render\"):\n            return result.render()\n        msg = \"Callable in name arg must a string or object with a render method.\"\n        raise TypeError(msg)\n\n    assert isinstance(name, str)\n\n    if name.endswith((\".html\", \".jinja\")):\n        return self._render_template(name, request, context)\n\n    if \".\" in name:\n        return self._render_tag_callable(name, children, request, context)\n\n    msg = \"No callable or Jinja template found.\"\n    raise RenderException(msg)\n</code></pre>"},{"location":"api/utils/","title":"Utils","text":"<p>Utils </p>"},{"location":"api/utils/#air.utils.compute_page_path","title":"compute_page_path","text":"<pre><code>compute_page_path(endpoint_name)\n</code></pre> <p>index -&gt; '/', otherwise '/name-with-dashes'.</p> Source code in <code>src/air/utils.py</code> <pre><code>def compute_page_path(endpoint_name: str) -&gt; str:\n    \"\"\"index -&gt; '/', otherwise '/name-with-dashes'.\"\"\"\n    return \"/\" if endpoint_name == \"index\" else f\"/{endpoint_name.replace('_', '-')}\"\n</code></pre>"},{"location":"api/ext/","title":"ext: Air Extended","text":"<p>Functionality for Air that requires extra dependencies.</p> <ul> <li>Auth - Authentication tools for OAuth and eventually email and magic link.</li> <li>SQL - Utilities for connecting to relational databases like PostgreSQL, MySQL, and SQLite.</li> </ul>"},{"location":"api/ext/auth/","title":"ext.auth","text":"<p>Implementing the User model with GitHub OAuth.</p> <p>Coming Soon: More authentication methods!</p> <p>We chose GitHub OAuth because configuring it is straightforward. Our plan is to expand to other OAuth providers as well as other registration and authentication mechanisms.</p>"},{"location":"api/ext/auth/#step-1-get-client-id-and-secret","title":"Step 1: Get client ID and secret","text":"<p>TODO: Add instructions on getting this from GitHub</p> <p>Client secrets must be protected!</p> <p>Do not store client secrets in your repo. This is what connects your application to GitHub, and if bad guys find it they can cause problem for you and your users. Instead, use environment variables or other proven methods for securing private credentials.</p>"},{"location":"api/ext/auth/#step-2-write-a-github-process-callable-to-process-the-user-when-the-come-back-from-github","title":"Step 2: Write a Github Process callable to process the user when the come back from github","text":"<p>This is a simple in-memory version, you want to save this to a database, either SQL or non-SQL.</p> <pre><code>import air\n\ndatabase = {}\n\n\nasync def github_process_callable(request: air.Request, token: dict, client: str = \"\") -&gt; None:\n    access_token = token[\"access_token\"]\n    print(access_token)\n    if access_token in database:\n        database[access_token][\"updated_at\"] = datetime.now()\n    else:\n        database[access_token] = token\n        database[access_token][\"created_at\"] = datetime.now()\n        database[access_token][\"updated_at\"] = datetime.now()\n        database[access_token][\"access_token\"] = access_token\n    request.session[\"github_access_token\"] = access_token\n    print(database)\n</code></pre>"},{"location":"api/ext/auth/#step-3-use-the-githuboauthclientfactory-to-generate-your-oauth-client","title":"Step 3: Use the GitHubOAuthClientFactory to generate your OAuth client","text":"<pre><code>github_oauth_client = air.ext.auth.GitHubOAuthClientFactory(\n    github_client_id=environ[\"GITHUB_CLIENT_ID\"],\n    github_client_secret=environ[\"GITHUB_CLIENT_SECRET\"],\n    github_process_callable=github_process_callable,\n    login_redirect_to=\"/\",\n)\n</code></pre>"},{"location":"api/ext/auth/#step-4-code-up-the-rest-of-the-project","title":"Step 4: Code up the rest of the project","text":"<pre><code>import air\n\napp = air.Air()\napp.add_middleware(air.SessionMiddleware, secret_key=\"change-me\")\n# We created github_oauth_router in step 3\napp.include_router(github_oauth_client.router)\n\n\n@app.page\nasync def index(request: air.Request):\n    return air.layouts.mvpcss(\n        air.H1(\"GitHub OAuth Login Demo\"),\n        air.P(air.A(\"Login to Github\", href=\"/account/github/login\")),\n        air.P(request.session.get(\"github_access_token\", \"Not authenticated yet\")),\n    )\n</code></pre> <p>Try it out!</p>"},{"location":"api/ext/auth/#air.ext.auth.GitHubOAuthClientFactory","title":"GitHubOAuthClientFactory","text":"<pre><code>GitHubOAuthClientFactory(\n    github_client_id,\n    github_client_secret,\n    github_process_callable,\n    login_redirect_to=\"/\",\n    scope=\"user:email\",\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>github_client_id</code> <code>str</code> <p>The GitHub client ID.</p> required <code>github_client_secret</code> <code>str</code> <p>The GitHub client secret. Do not include this in your repo, use environment variables!</p> required <code>github_process_callable</code> <code>Callable</code> <p>A callable (function, class, or method) that takes three arguments, request, token, and client</p> required <code>login_redirect_to</code> <code>str</code> <p>The path to send the user to once they have authenticated</p> <code>'/'</code> <code>scope</code> <p>What parts of the GitHub API is accessible</p> <code>'user:email'</code> <p>Example:</p> <pre><code>import air\nfrom os import environ\n\napp = air.Air()\napp.add_middleware(air.SessionMiddleware, secret_key=\"change-me\")\n\nasync def save_github_token(\n    request: air.Request, token: dict, client: Any\n) -&gt; None:\n    \"Save the GitHub user's login name to an SQL database.\"\n    resp = await client.get('user', token=token)\n    profile = resp.json()\n    github_login = profile.get('login')\n\n    async_session = await air.ext.sql.create_async_session()\n    async with async_session() as session:\n        # check if access_token is in database\n        stmt = select(User).where(User.github_login==github_login)\n        result = await session.exec(stmt)\n        user = result.one_or_none()\n        if not user:\n            user = User(\n                github_login=github_login, status=UserStatusEnum.active\n            )\n            session.add(user)\n            await session.commit()\n        # Save the token in place to request.session\n        request.session[\"user\"] = dict(\n            github_login=github_login, updated_at=str(datetime.now())\n        )\n\ngithub_oauth_client = air.ext.auth.GitHubOAuthClientFactory(\n    github_client_id=environ['github_client_id'],\n    github_client_secret=environ['github_client_secret'],\n    github_process_callable=save_github_token,\n    login_redirect_to='/dashboard',\n    scope='read:profile user:email'\n)\napp.include_router(github_oauth_client.router)\n</code></pre> Source code in <code>src/air/ext/auth.py</code> <pre><code>def __init__(\n    self,\n    github_client_id: str,\n    github_client_secret: str,\n    github_process_callable: Callable,\n    login_redirect_to: str = \"/\",\n    scope=\"user:email\",\n) -&gt; None:\n    \"\"\"Creates an `air.AirRouter` affiliated with the supplied credentials.\n\n    ARGS:\n        github_client_id: The GitHub client ID.\n        github_client_secret: The GitHub client secret. Do not include this in your repo, use environment variables!\n        github_process_callable: A callable (function, class, or method) that takes three arguments, request, token, and client\n        login_redirect_to: The path to send the user to once they have authenticated\n        scope: What parts of the GitHub API is accessible\n\n    Example:\n\n        import air\n        from os import environ\n\n        app = air.Air()\n        app.add_middleware(air.SessionMiddleware, secret_key=\"change-me\")\n\n        async def save_github_token(\n            request: air.Request, token: dict, client: Any\n        ) -&gt; None:\n            \"Save the GitHub user's login name to an SQL database.\"\n            resp = await client.get('user', token=token)\n            profile = resp.json()\n            github_login = profile.get('login')\n\n            async_session = await air.ext.sql.create_async_session()\n            async with async_session() as session:\n                # check if access_token is in database\n                stmt = select(User).where(User.github_login==github_login)\n                result = await session.exec(stmt)\n                user = result.one_or_none()\n                if not user:\n                    user = User(\n                        github_login=github_login, status=UserStatusEnum.active\n                    )\n                    session.add(user)\n                    await session.commit()\n                # Save the token in place to request.session\n                request.session[\"user\"] = dict(\n                    github_login=github_login, updated_at=str(datetime.now())\n                )\n\n        github_oauth_client = air.ext.auth.GitHubOAuthClientFactory(\n            github_client_id=environ['github_client_id'],\n            github_client_secret=environ['github_client_secret'],\n            github_process_callable=save_github_token,\n            login_redirect_to='/dashboard',\n            scope='read:profile user:email'\n        )\n        app.include_router(github_oauth_client.router)\n    \"\"\"\n    router = AirRouter()\n    oauth = OAuth()\n    oauth.register(\n        name=\"github\",\n        client_id=github_client_id,\n        client_secret=github_client_secret,\n        access_token_url=\"https://github.com/login/oauth/access_token\",\n        access_token_params=None,\n        authorize_url=\"https://github.com/login/oauth/authorize\",\n        authorize_params=None,\n        api_base_url=\"https://api.github.com/\",\n        client_kwargs={\"scope\": scope},\n    )\n    self.client = oauth.create_client(\"github\")\n\n    @router.get(\"/account/github/login\")\n    async def github_login(request: Request):\n        assert hasattr(request, \"session\")\n        redirect_uri = request.url_for(\"github_callback\")\n        return await self.client.authorize_redirect(request, redirect_uri)\n\n    @router.get(\"/account/github/callback\")\n    async def github_callback(request: Request):\n        assert hasattr(request, \"session\")\n        token = await self.client.authorize_access_token(request)\n\n        await github_process_callable(request=request, token=token, client=self.client)\n\n        return RedirectResponse(login_redirect_to)\n\n    self.router = router\n</code></pre>"},{"location":"api/ext/sql/","title":"ext.sql","text":"<p>This module includes utility functions for using SQL with AIR.</p>"},{"location":"api/ext/sql/#package-requirements","title":"Package requirements","text":"<p>Using this module rquires additional dependencies installable in <code>air[sql]</code>, which can be installed with <code>uv add \"air[sql]\"</code>:</p> <ul> <li>SQLModel</li> <li>greenlet</li> </ul>"},{"location":"api/ext/sql/#database-specific-connection-libraries","title":"Database-specific Connection libraries","text":"<p>Depending on your database, you may also need to install sync and async drivers, for example:</p> Database Connection Libraries PostgreSQL <code>psycopg2-binary</code>, <code>asyncpg</code> SQLite <code>aiosqlite</code> <p>Warning</p> <p>Persistent database connections require a lifespan object, otherwise you may receive timeout exceptions when the server is idle for even brief periods. To prevent this from happening, when using SQL connections in air views we strong recommend using the <code>air.ext.sql.async_db_lifespan</code> lifespan function.</p> <pre><code>import air\n\napp = air.Air(lifespan=air.ext.sql.async_db_lifespan)\n</code></pre>"},{"location":"api/ext/sql/#configuration","title":"Configuration","text":"<p>This module introduces two environment variables:</p>"},{"location":"api/ext/sql/#air.ext.sql.DATABASE_URL","title":"DATABASE_URL  <code>module-attribute</code>","text":"<pre><code>DATABASE_URL = getenv('DATABASE_URL', '')\n</code></pre> <p>Standard database url environment variable.</p>"},{"location":"api/ext/sql/#air.ext.sql.DEBUG","title":"DEBUG  <code>module-attribute</code>","text":"<pre><code>DEBUG = lower() in ('1', 'true', 'yes')\n</code></pre> <p>Environment variable for setting DEBUG loglevel.</p>"},{"location":"api/ext/sql/#air.ext.sql.async_db_lifespan","title":"async_db_lifespan  <code>async</code>","text":"<pre><code>async_db_lifespan(app)\n</code></pre> <p>Application Lifespan object for ensuring that database connections remain active.</p> <p>Not including this can result in <code>sqlalchemy.exc.OperationalError</code> or <code>asyncpg.exceptions.ConnectionDoesNotExistError</code> errors when the database connection times out because of inactivity.</p> <p>Example:</p> <pre><code>import air\n\napp = air.Air(lifespan=air.ext.sql.async_db_lifespan)\n</code></pre> Source code in <code>src/air/ext/sql.py</code> <pre><code>@asynccontextmanager\nasync def async_db_lifespan(app: AirApp):\n    \"\"\"Application Lifespan object for ensuring that database connections remain active.\n\n    Not including this can result in `sqlalchemy.exc.OperationalError` or `asyncpg.exceptions.ConnectionDoesNotExistError`\n    errors when the database connection times out because of inactivity.\n\n    Example:\n\n        import air\n\n        app = air.Air(lifespan=air.ext.sql.async_db_lifespan)\n    \"\"\"\n    async_engine = create_async_engine()\n    async with async_engine.begin() as conn:\n        await conn.run_sync(lambda _: None)\n    yield\n    await async_engine.dispose()\n</code></pre>"},{"location":"api/ext/sql/#air.ext.sql.create_sync_engine","title":"create_sync_engine","text":"<pre><code>create_sync_engine(\n    url=DATABASE_URL,\n    echo=EchoEnum.TRUE if DEBUG else EchoEnum.FALSE,\n)\n</code></pre> <p>Convenience wrapper for SQLModel/SQLAlchemy's create_engine function. Useful for database scripts or synchronous views.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>Database URL connection string, defaults to DATABASE_URL environment variable</p> <code>DATABASE_URL</code> <code>echo</code> <code>EchoEnum</code> <p>Enables logging of all SQL statements executed by the engine, which can be useful for debugging.</p> <code>TRUE if DEBUG else FALSE</code> <p>Example:</p> <pre><code>TODO\n</code></pre> Source code in <code>src/air/ext/sql.py</code> <pre><code>def create_sync_engine(\n    url: str = DATABASE_URL,\n    echo: EchoEnum = EchoEnum.TRUE if DEBUG else EchoEnum.FALSE,\n) -&gt; Engine:\n    \"\"\"Convenience wrapper for SQLModel/SQLAlchemy's create_engine function. Useful for database scripts or synchronous views.\n\n    Args:\n        url: Database URL connection string, defaults to DATABASE_URL environment variable\n        echo: Enables logging of all SQL statements executed by the engine, which can be useful for debugging.\n\n    Example:\n\n        TODO\n    \"\"\"\n    return _create_engine(url=url, echo=echo)\n</code></pre>"},{"location":"api/ext/sql/#air.ext.sql.create_async_engine","title":"create_async_engine","text":"<pre><code>create_async_engine(\n    url=ASYNC_DATABASE_URL,\n    echo=EchoEnum.TRUE if DEBUG else EchoEnum.FALSE,\n    future=FutureEnum.TRUE,\n    pool_pre_ping=PoolPrePingEnum.TRUE,\n)\n</code></pre> <p>Convenience wrapper for SQLModel/SQLAlchemy's create_async_engine function. Usually set within an Air app's lifetime object.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>Database URL connection string, defaults to DATABASE_URL environment variable</p> <code>ASYNC_DATABASE_URL</code> <code>echo</code> <code>EchoEnum</code> <p>Enables logging of all SQL statements executed by the engine, which can be useful for debugging.</p> <code>TRUE if DEBUG else FALSE</code> <code>future</code> <code>FutureEnum</code> <p>In SQLAlchemy, the future=True argument for create_async_engine enables 2.0-style behaviors and API conventions while still running under SQLAlchemy 1.4.</p> <code>TRUE</code> <code>pool_pre_ping</code> <code>PoolPrePingEnum</code> <p>Makes the engine test a connection with a lightweight SELECT 1 before using it, ensuring stale or dropped connections are detected and replaced automatically.</p> <code>TRUE</code> Source code in <code>src/air/ext/sql.py</code> <pre><code>def create_async_engine(\n    url: str = ASYNC_DATABASE_URL,  # Async connection string\n    echo: EchoEnum = EchoEnum.TRUE if DEBUG else EchoEnum.FALSE,\n    future: FutureEnum = FutureEnum.TRUE,\n    pool_pre_ping: PoolPrePingEnum = PoolPrePingEnum.TRUE,\n) -&gt; AsyncEngine:\n    \"\"\"Convenience wrapper for SQLModel/SQLAlchemy's create_async_engine function. Usually set within an Air app's lifetime object.\n\n    Args:\n        url: Database URL connection string, defaults to DATABASE_URL environment variable\n        echo: Enables logging of all SQL statements executed by the engine, which can be useful for debugging.\n        future: In SQLAlchemy, the future=True argument for create_async_engine enables 2.0-style behaviors and API conventions while still running under SQLAlchemy 1.4.\n        pool_pre_ping: Makes the engine test a connection with a lightweight SELECT 1 before using it, ensuring stale or dropped connections are detected and replaced automatically.\n    \"\"\"\n    return _create_async_engine(url=url, echo=echo, future=future, pool_pre_ping=pool_pre_ping)\n</code></pre>"},{"location":"api/ext/sql/#air.ext.sql.create_async_session","title":"create_async_session  <code>async</code>","text":"<pre><code>create_async_session(\n    url=ASYNC_DATABASE_URL,\n    echo=EchoEnum.TRUE if DEBUG else EchoEnum.FALSE,\n    async_engine=None,\n)\n</code></pre> <p>Create an async SQLAlchemy session factory.</p> <p>Example:</p> <pre><code># With SQLite in memory\nasync_session = create_async_session(':memory:')\nasync with async_session() as session:\n    session.add(database_object)\n    await session.commit()\n</code></pre> Source code in <code>src/air/ext/sql.py</code> <pre><code>async def create_async_session(\n    url: str = ASYNC_DATABASE_URL,  # Database URL\n    echo: EchoEnum = EchoEnum.TRUE if DEBUG else EchoEnum.FALSE,\n    async_engine=None,\n):\n    \"\"\"\n    Create an async SQLAlchemy session factory.\n\n    Example:\n\n        # With SQLite in memory\n        async_session = create_async_session(':memory:')\n        async with async_session() as session:\n            session.add(database_object)\n            await session.commit()\n    \"\"\"\n    if async_engine is None:\n        async_engine = create_async_engine(\n            url,  # Async connection string\n            echo=echo,\n            future=FutureEnum.TRUE,\n        )\n    return async_sessionmaker(\n        bind=async_engine,\n        class_=AsyncSession,\n        expire_on_commit=False,\n    )\n</code></pre>"},{"location":"api/ext/sql/#air.ext.sql.get_async_session","title":"get_async_session  <code>async</code>","text":"<pre><code>get_async_session(\n    url=ASYNC_DATABASE_URL,\n    echo=EchoEnum.TRUE if DEBUG else EchoEnum.FALSE,\n)\n</code></pre> <p>Builder function for <code>async_session_dependency</code>.</p> Source code in <code>src/air/ext/sql.py</code> <pre><code>async def get_async_session(\n    url: str = ASYNC_DATABASE_URL, echo: EchoEnum = EchoEnum.TRUE if DEBUG else EchoEnum.FALSE\n) -&gt; AsyncGenerator[AsyncSession, None]:\n    \"\"\"Builder function for `async_session_dependency`.\"\"\"\n    session_factory = await create_async_session(url, echo)\n    session = session_factory()\n    try:\n        yield session\n    finally:\n        await session.close()\n</code></pre>"},{"location":"api/ext/sql/#air.ext.sql.async_session_dependency","title":"async_session_dependency  <code>module-attribute</code>","text":"<pre><code>async_session_dependency = Depends(get_async_session)\n</code></pre> <p>Dependency for accessing sessions in views.</p> <p>Requires that environment variable DATABASE_URL has been set</p> <p>Example:</p> <pre><code>import air\nfrom db import Heroes\n\napp = air.Air()\nAsyncSession = air.ext.sql.AsyncSession\n\n\n@app.page\nasync def index(session: AsyncSession = air.ext.sql.async_session_dependency):\n    statement = select(tables.Heroes)\n    heroes = await session.exec(statement=statement)\n    return air.Ul(\n        *[Li(hero) for hero in heroes]\n    )\n</code></pre>"},{"location":"api/ext/sql/#air.ext.sql.get_object_or_404","title":"get_object_or_404  <code>async</code>","text":"<pre><code>get_object_or_404(session, model, *args)\n</code></pre> <p>Get a record or raise an exception.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AsyncSession</code> <p>An <code>AsyncSession</code> object.</p> required <code>model</code> <code>SQLModel</code> <p>A SQLModel subclass, in the example inspired by SQLModel below we use Hero as a table object.</p> required <code>*args</code> <code>BinaryExpression</code> <p>One or more SQLAlchemy BinaryExpressions. The classic example is <code>Hero.name=='Spiderman'</code> which will display as <code>&lt;sqlalchemy.sql.elements.BinaryExpression object at 0x104ba0410&gt;</code>..</p> <code>()</code> <p>Example:</p> <pre><code>import air\nfrom db import Hero\n\napp = air.Air()\n\n@app.get('/heroes/{name: str}')\nasync def hero(name: str, session = Depends(air.ext.sql.get_async_session)):\n    hero = await get_object_or_404(session, model, Hero.name==name)\n    return air.layouts.mvpcss(\n        air.H1(hero.name),\n        air.P(hero.secret_identity)\n    )\n</code></pre> Source code in <code>src/air/ext/sql.py</code> <pre><code>async def get_object_or_404(session: AsyncSession, model: SQLModel, *args: BinaryExpression):\n    \"\"\"Get a record or raise an exception.\n\n    Args:\n        session: An `AsyncSession` object.\n        model: A SQLModel subclass, in the example inspired by SQLModel below we use Hero as a table object.\n        *args: One or more SQLAlchemy BinaryExpressions. The classic example is `Hero.name=='Spiderman'` which will display as `&lt;sqlalchemy.sql.elements.BinaryExpression object at 0x104ba0410&gt;`..\n\n    Example:\n\n        import air\n        from db import Hero\n\n        app = air.Air()\n\n        @app.get('/heroes/{name: str}')\n        async def hero(name: str, session = Depends(air.ext.sql.get_async_session)):\n            hero = await get_object_or_404(session, model, Hero.name==name)\n            return air.layouts.mvpcss(\n                air.H1(hero.name),\n                air.P(hero.secret_identity)\n            )\n\n    \"\"\"\n    stmt = select(model)\n    for arg in args:\n        stmt = stmt.where(arg)\n    results = await session.exec(stmt)\n    if obj := results.one_or_none():\n        return obj\n    error = ObjectDoesNotExist(status_code=404)\n    error.add_note(f\"{model=}\")\n    error.add_note(f\"{args=}\")\n    raise error\n</code></pre>"},{"location":"api/svg/","title":"SVG","text":""},{"location":"api/svg/#svg_1","title":"SVG","text":"<p>In the spirit of helping our users, every Air SVG Tag has copious documentation\u2014enough that sometimes it breaks the documentation build process. Therefore, Air SVG Tag that directly correspond to their SVG equivalents can be found in smaller, easier-to-compile pages.</p> <ul> <li>SVG Air Tags A-D</li> <li>SVG Air Tags E-M</li> <li>SVG Air Tags N-S</li> <li>SVG Air Tags T-Z</li> </ul> <p>What remains on this page are core Air SVG Tag that either have great utility or are base classes for other tags.</p> <p>Air is proud to provide first class SVG support. The entire SVG specification is supported.</p>"},{"location":"api/svg/#air.svg.CaseTag","title":"CaseTag","text":"<pre><code>CaseTag(*children, **kwargs)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>This is for case-sensitive tags like those used in SVG generation.</p> Source code in <code>src/air/tags/models/base.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: AttributesType) -&gt; None:\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/svg/svg-tags-a-d/","title":"SVG A-D","text":""},{"location":"api/svg/svg-tags-a-d/#svg-tags-a-d_1","title":"SVG Tags A-D","text":"<p>Air is proud to provide first class SVG support. The entire SVG specification is supported.</p>"},{"location":"api/svg/svg-tags-a-d/#air.svg.A","title":"A","text":"<pre><code>A(\n    *children,\n    href=None,\n    target=None,\n    download=None,\n    hreflang=None,\n    ping=None,\n    referrerpolicy=None,\n    rel=None,\n    type=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines an SVG hyperlink</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>href</code> <code>str | None</code> <p>Hyperlink target URL.</p> <code>None</code> <code>target</code> <code>str | None</code> <p>Where to display linked URL (_self|_parent|_top|_blank).</p> <code>None</code> <code>download</code> <code>str | None</code> <p>Instructs browser to download instead of navigate.</p> <code>None</code> <code>hreflang</code> <code>str | None</code> <p>Human language of the linked URL.</p> <code>None</code> <code>ping</code> <code>str | None</code> <p>Space-separated list of URLs for tracking.</p> <code>None</code> <code>referrerpolicy</code> <code>str | None</code> <p>Referrer policy when fetching the URL.</p> <code>None</code> <code>rel</code> <code>str | None</code> <p>Relationship to target object.</p> <code>None</code> <code>type</code> <code>str | None</code> <p>MIME type of linked URL.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    href: str | None = None,\n    target: str | None = None,\n    download: str | None = None,\n    hreflang: str | None = None,\n    ping: str | None = None,\n    referrerpolicy: str | None = None,\n    rel: str | None = None,\n    type: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-a-d/#air.svg.Animate","title":"Animate","text":"<pre><code>Animate(\n    *children,\n    attributeName=None,\n    attributeType=None,\n    values=None,\n    dur=None,\n    repeatCount=None,\n    repeatDur=None,\n    from_=None,\n    to=None,\n    by=None,\n    begin=None,\n    end=None,\n    calcMode=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines animation on an SVG element</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>attributeName</code> <code>str | None</code> <p>Target attribute to animate.</p> <code>None</code> <code>attributeType</code> <code>str | None</code> <p>Type of target attribute.</p> <code>None</code> <code>values</code> <code>str | None</code> <p>Values to animate through.</p> <code>None</code> <code>dur</code> <code>str | None</code> <p>Total animation duration.</p> <code>None</code> <code>repeatCount</code> <code>str | float | None</code> <p>Number of repetitions.</p> <code>None</code> <code>repeatDur</code> <code>str | None</code> <p>Total duration for repeating.</p> <code>None</code> <code>from_</code> <code>str | None</code> <p>Starting value (from is reserved).</p> <code>None</code> <code>to</code> <code>str | None</code> <p>Ending value.</p> <code>None</code> <code>by</code> <code>str | None</code> <p>Relative animation value.</p> <code>None</code> <code>begin</code> <code>str | None</code> <p>Animation start time.</p> <code>None</code> <code>end</code> <code>str | None</code> <p>Animation end time.</p> <code>None</code> <code>calcMode</code> <code>str | None</code> <p>Interpolation mode (discrete|linear|paced|spline).</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    attributeName: str | None = None,\n    attributeType: str | None = None,\n    values: str | None = None,\n    dur: str | None = None,\n    repeatCount: str | float | None = None,\n    repeatDur: str | None = None,\n    from_: str | None = None,\n    to: str | None = None,\n    by: str | None = None,\n    begin: str | None = None,\n    end: str | None = None,\n    calcMode: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-a-d/#air.svg.AnimateMotion","title":"AnimateMotion","text":"<pre><code>AnimateMotion(\n    *children,\n    path=None,\n    keyPoints=None,\n    rotate=None,\n    dur=None,\n    repeatCount=None,\n    begin=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines how an element moves along a motion path</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>path</code> <code>str | None</code> <p>Motion path using path syntax.</p> <code>None</code> <code>keyPoints</code> <code>str | None</code> <p>Progress points along path (0-1 range).</p> <code>None</code> <code>rotate</code> <code>str | float | None</code> <p>Rotation along path (Number|auto|auto-reverse).</p> <code>None</code> <code>dur</code> <code>str | None</code> <p>Total animation duration.</p> <code>None</code> <code>repeatCount</code> <code>str | float | None</code> <p>Number of repetitions.</p> <code>None</code> <code>begin</code> <code>str | None</code> <p>Animation start time.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    path: str | None = None,\n    keyPoints: str | None = None,\n    rotate: str | float | None = None,\n    dur: str | None = None,\n    repeatCount: str | float | None = None,\n    begin: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-a-d/#air.svg.AnimateTransform","title":"AnimateTransform","text":"<pre><code>AnimateTransform(\n    *children,\n    type=None,\n    by=None,\n    from_=None,\n    to=None,\n    dur=None,\n    repeatCount=None,\n    begin=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Animates transform attributes on an element</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>type</code> <code>str | None</code> <p>Transformation type (rotate|scale|translate|skew).</p> <code>None</code> <code>by</code> <code>str | None</code> <p>Relative animation value.</p> <code>None</code> <code>from_</code> <code>str | None</code> <p>Starting transformation value.</p> <code>None</code> <code>to</code> <code>str | None</code> <p>Ending transformation value.</p> <code>None</code> <code>dur</code> <code>str | None</code> <p>Total animation duration.</p> <code>None</code> <code>repeatCount</code> <code>str | float | None</code> <p>Number of repetitions.</p> <code>None</code> <code>begin</code> <code>str | None</code> <p>Animation start time.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    type: str | None = None,\n    by: str | None = None,\n    from_: str | None = None,\n    to: str | None = None,\n    dur: str | None = None,\n    repeatCount: str | float | None = None,\n    begin: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-a-d/#air.svg.Circle","title":"Circle","text":"<pre><code>Circle(\n    *children,\n    cx=None,\n    cy=None,\n    r=None,\n    pathLength=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a circle</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>cx</code> <code>str | float | None</code> <p>X-coordinate of center.</p> <code>None</code> <code>cy</code> <code>str | float | None</code> <p>Y-coordinate of center.</p> <code>None</code> <code>r</code> <code>str | float | None</code> <p>Radius.</p> <code>None</code> <code>pathLength</code> <code>float | None</code> <p>Total circumference length in user units.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    cx: str | float | None = None,\n    cy: str | float | None = None,\n    r: str | float | None = None,\n    pathLength: float | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-a-d/#air.svg.ClipPath","title":"ClipPath","text":"<pre><code>ClipPath(\n    *children,\n    clipPathUnits=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a clipping path</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>clipPathUnits</code> <code>str | None</code> <p>Coordinate system (userSpaceOnUse|objectBoundingBox).</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    clipPathUnits: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-a-d/#air.svg.Defs","title":"Defs","text":"<pre><code>Defs(*children, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines reusable objects</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-a-d/#air.svg.Desc","title":"Desc","text":"<pre><code>Desc(*children, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a description of an element</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/","title":"SVG E-M","text":""},{"location":"api/svg/svg-tags-e-m/#svg-tags-e-m_1","title":"SVG Tags E-M","text":"<p>Air is proud to provide first class SVG support. The entire SVG specification is supported.</p>"},{"location":"api/svg/svg-tags-e-m/#air.svg.Ellipse","title":"Ellipse","text":"<pre><code>Ellipse(\n    *children,\n    cx=None,\n    cy=None,\n    rx=None,\n    ry=None,\n    pathLength=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines an ellipse</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>cx</code> <code>str | float | None</code> <p>X-coordinate of center.</p> <code>None</code> <code>cy</code> <code>str | float | None</code> <p>Y-coordinate of center.</p> <code>None</code> <code>rx</code> <code>str | float | None</code> <p>Horizontal radius.</p> <code>None</code> <code>ry</code> <code>str | float | None</code> <p>Vertical radius.</p> <code>None</code> <code>pathLength</code> <code>float | None</code> <p>Total path length in user units.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    cx: str | float | None = None,\n    cy: str | float | None = None,\n    rx: str | float | None = None,\n    ry: str | float | None = None,\n    pathLength: float | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.FeBlend","title":"FeBlend","text":"<pre><code>FeBlend(\n    *children,\n    in_=None,\n    in2=None,\n    mode=None,\n    result=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines image blending</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>in_</code> <code>str | None</code> <p>Input image reference.</p> <code>None</code> <code>in2</code> <code>str | None</code> <p>Second input image reference.</p> <code>None</code> <code>mode</code> <code>str | None</code> <p>Blending mode.</p> <code>None</code> <code>result</code> <code>str | None</code> <p>Result identifier.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    in_: str | None = None,\n    in2: str | None = None,\n    mode: str | None = None,\n    result: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.FeColorMatrix","title":"FeColorMatrix","text":"<pre><code>FeColorMatrix(\n    *children,\n    in_=None,\n    type=None,\n    values=None,\n    result=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Applies a matrix transformation on color values</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>in_</code> <code>str | None</code> <p>Input image reference.</p> <code>None</code> <code>type</code> <code>str | None</code> <p>Matrix type (matrix|saturate|hueRotate|luminanceToAlpha).</p> <code>None</code> <code>values</code> <code>str | None</code> <p>Matrix values.</p> <code>None</code> <code>result</code> <code>str | None</code> <p>Result identifier.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    in_: str | None = None,\n    type: str | None = None,\n    values: str | None = None,\n    result: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.FeComponentTransfer","title":"FeComponentTransfer","text":"<pre><code>FeComponentTransfer(\n    *children,\n    in_=None,\n    result=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Performs component-wise remapping of data</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>in_</code> <code>str | None</code> <p>Input image reference.</p> <code>None</code> <code>result</code> <code>str | None</code> <p>Result identifier.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    in_: str | None = None,\n    result: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.FeComposite","title":"FeComposite","text":"<pre><code>FeComposite(\n    *children,\n    in_=None,\n    in2=None,\n    operator=None,\n    k1=None,\n    k2=None,\n    k3=None,\n    k4=None,\n    result=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Performs image compositing</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>in_</code> <code>str | None</code> <p>Input image reference.</p> <code>None</code> <code>in2</code> <code>str | None</code> <p>Second input image reference.</p> <code>None</code> <code>operator</code> <code>str | None</code> <p>Compositing operation.</p> <code>None</code> <code>k1</code> <code>float | None</code> <p>Coefficient for arithmetic operation.</p> <code>None</code> <code>k2</code> <code>float | None</code> <p>Coefficient for arithmetic operation.</p> <code>None</code> <code>k3</code> <code>float | None</code> <p>Coefficient for arithmetic operation.</p> <code>None</code> <code>k4</code> <code>float | None</code> <p>Coefficient for arithmetic operation.</p> <code>None</code> <code>result</code> <code>str | None</code> <p>Result identifier.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    in_: str | None = None,\n    in2: str | None = None,\n    operator: str | None = None,\n    k1: float | None = None,\n    k2: float | None = None,\n    k3: float | None = None,\n    k4: float | None = None,\n    result: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.FeConvolveMatrix","title":"FeConvolveMatrix","text":"<pre><code>FeConvolveMatrix(\n    *children,\n    in_=None,\n    order=None,\n    kernelMatrix=None,\n    divisor=None,\n    bias=None,\n    targetX=None,\n    targetY=None,\n    edgeMode=None,\n    preserveAlpha=None,\n    result=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Applies a matrix convolution filter</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>in_</code> <code>str | None</code> <p>Input image reference.</p> <code>None</code> <code>order</code> <code>str | None</code> <p>Matrix dimensions.</p> <code>None</code> <code>kernelMatrix</code> <code>str | None</code> <p>Matrix values.</p> <code>None</code> <code>divisor</code> <code>float | None</code> <p>Divisor for matrix sum.</p> <code>None</code> <code>bias</code> <code>float | None</code> <p>Bias value.</p> <code>None</code> <code>targetX</code> <code>int | None</code> <p>Target X position.</p> <code>None</code> <code>targetY</code> <code>int | None</code> <p>Target Y position.</p> <code>None</code> <code>edgeMode</code> <code>str | None</code> <p>Edge handling mode.</p> <code>None</code> <code>preserveAlpha</code> <code>str | None</code> <p>Preserve alpha channel.</p> <code>None</code> <code>result</code> <code>str | None</code> <p>Result identifier.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    in_: str | None = None,\n    order: str | None = None,\n    kernelMatrix: str | None = None,\n    divisor: float | None = None,\n    bias: float | None = None,\n    targetX: int | None = None,\n    targetY: int | None = None,\n    edgeMode: str | None = None,\n    preserveAlpha: str | None = None,\n    result: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.FeDiffuseLighting","title":"FeDiffuseLighting","text":"<pre><code>FeDiffuseLighting(\n    *children,\n    in_=None,\n    surfaceScale=None,\n    diffuseConstant=None,\n    kernelUnitLength=None,\n    result=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Lights an image using diffuse lighting</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>in_</code> <code>str | None</code> <p>Input image reference.</p> <code>None</code> <code>surfaceScale</code> <code>float | None</code> <p>Surface height scale.</p> <code>None</code> <code>diffuseConstant</code> <code>float | None</code> <p>Diffuse lighting constant.</p> <code>None</code> <code>kernelUnitLength</code> <code>str | None</code> <p>Kernel unit length.</p> <code>None</code> <code>result</code> <code>str | None</code> <p>Result identifier.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    in_: str | None = None,\n    surfaceScale: float | None = None,\n    diffuseConstant: float | None = None,\n    kernelUnitLength: str | None = None,\n    result: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.FeDisplacementMap","title":"FeDisplacementMap","text":"<pre><code>FeDisplacementMap(\n    *children,\n    in_=None,\n    in2=None,\n    scale=None,\n    xChannelSelector=None,\n    yChannelSelector=None,\n    result=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Displaces an image using another image</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>in_</code> <code>str | None</code> <p>Input image reference.</p> <code>None</code> <code>in2</code> <code>str | None</code> <p>Displacement map reference.</p> <code>None</code> <code>scale</code> <code>float | None</code> <p>Displacement scale factor.</p> <code>None</code> <code>xChannelSelector</code> <code>str | None</code> <p>X displacement channel (R|G|B|A).</p> <code>None</code> <code>yChannelSelector</code> <code>str | None</code> <p>Y displacement channel (R|G|B|A).</p> <code>None</code> <code>result</code> <code>str | None</code> <p>Result identifier.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    in_: str | None = None,\n    in2: str | None = None,\n    scale: float | None = None,\n    xChannelSelector: str | None = None,\n    yChannelSelector: str | None = None,\n    result: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.FeDistantLight","title":"FeDistantLight","text":"<pre><code>FeDistantLight(\n    *children,\n    azimuth=None,\n    elevation=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a distant light source</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>azimuth</code> <code>str | float | None</code> <p>Direction angle on XY plane (degrees).</p> <code>None</code> <code>elevation</code> <code>str | float | None</code> <p>Direction angle from XY plane to z-axis (degrees).</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    azimuth: str | float | None = None,\n    elevation: str | float | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.FeDropShadow","title":"FeDropShadow","text":"<pre><code>FeDropShadow(\n    *children,\n    dx=None,\n    dy=None,\n    stdDeviation=None,\n    flood_color=None,\n    flood_opacity=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Creates a drop shadow effect</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>dx</code> <code>str | float | None</code> <p>X offset of drop shadow.</p> <code>None</code> <code>dy</code> <code>str | float | None</code> <p>Y offset of drop shadow.</p> <code>None</code> <code>stdDeviation</code> <code>str | float | None</code> <p>Blur standard deviation.</p> <code>None</code> <code>flood_color</code> <code>str | None</code> <p>Shadow color.</p> <code>None</code> <code>flood_opacity</code> <code>str | float | None</code> <p>Shadow opacity.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    dx: str | float | None = None,\n    dy: str | float | None = None,\n    stdDeviation: str | float | None = None,\n    flood_color: str | None = None,\n    flood_opacity: str | float | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.FeFlood","title":"FeFlood","text":"<pre><code>FeFlood(\n    *children,\n    flood_color=None,\n    flood_opacity=None,\n    result=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Fills the filter region with a color</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>flood_color</code> <code>str | None</code> <p>Fill color.</p> <code>None</code> <code>flood_opacity</code> <code>str | float | None</code> <p>Fill opacity.</p> <code>None</code> <code>result</code> <code>str | None</code> <p>Result identifier.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    flood_color: str | None = None,\n    flood_opacity: str | float | None = None,\n    result: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.FeFuncA","title":"FeFuncA","text":"<pre><code>FeFuncA(\n    *children,\n    type=None,\n    tableValues=None,\n    slope=None,\n    intercept=None,\n    amplitude=None,\n    exponent=None,\n    offset=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines the alpha transfer function</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>type</code> <code>str | None</code> <p>Transfer function type.</p> <code>None</code> <code>tableValues</code> <code>str | None</code> <p>Lookup table values.</p> <code>None</code> <code>slope</code> <code>float | None</code> <p>Linear function slope.</p> <code>None</code> <code>intercept</code> <code>float | None</code> <p>Linear function intercept.</p> <code>None</code> <code>amplitude</code> <code>float | None</code> <p>Gamma function amplitude.</p> <code>None</code> <code>exponent</code> <code>float | None</code> <p>Gamma function exponent.</p> <code>None</code> <code>offset</code> <code>float | None</code> <p>Gamma function offset.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    type: str | None = None,\n    tableValues: str | None = None,\n    slope: float | None = None,\n    intercept: float | None = None,\n    amplitude: float | None = None,\n    exponent: float | None = None,\n    offset: float | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.FeFuncB","title":"FeFuncB","text":"<pre><code>FeFuncB(\n    *children,\n    type=None,\n    tableValues=None,\n    slope=None,\n    intercept=None,\n    amplitude=None,\n    exponent=None,\n    offset=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines the blue transfer function</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>type</code> <code>str | None</code> <p>Transfer function type.</p> <code>None</code> <code>tableValues</code> <code>str | None</code> <p>Lookup table values.</p> <code>None</code> <code>slope</code> <code>float | None</code> <p>Linear function slope.</p> <code>None</code> <code>intercept</code> <code>float | None</code> <p>Linear function intercept.</p> <code>None</code> <code>amplitude</code> <code>float | None</code> <p>Gamma function amplitude.</p> <code>None</code> <code>exponent</code> <code>float | None</code> <p>Gamma function exponent.</p> <code>None</code> <code>offset</code> <code>float | None</code> <p>Gamma function offset.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    type: str | None = None,\n    tableValues: str | None = None,\n    slope: float | None = None,\n    intercept: float | None = None,\n    amplitude: float | None = None,\n    exponent: float | None = None,\n    offset: float | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.FeFuncG","title":"FeFuncG","text":"<pre><code>FeFuncG(\n    *children,\n    type=None,\n    tableValues=None,\n    slope=None,\n    intercept=None,\n    amplitude=None,\n    exponent=None,\n    offset=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines the green transfer function</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>type</code> <code>str | None</code> <p>Transfer function type.</p> <code>None</code> <code>tableValues</code> <code>str | None</code> <p>Lookup table values.</p> <code>None</code> <code>slope</code> <code>float | None</code> <p>Linear function slope.</p> <code>None</code> <code>intercept</code> <code>float | None</code> <p>Linear function intercept.</p> <code>None</code> <code>amplitude</code> <code>float | None</code> <p>Gamma function amplitude.</p> <code>None</code> <code>exponent</code> <code>float | None</code> <p>Gamma function exponent.</p> <code>None</code> <code>offset</code> <code>float | None</code> <p>Gamma function offset.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    type: str | None = None,\n    tableValues: str | None = None,\n    slope: float | None = None,\n    intercept: float | None = None,\n    amplitude: float | None = None,\n    exponent: float | None = None,\n    offset: float | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.FeFuncR","title":"FeFuncR","text":"<pre><code>FeFuncR(\n    *children,\n    type=None,\n    tableValues=None,\n    slope=None,\n    intercept=None,\n    amplitude=None,\n    exponent=None,\n    offset=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines the red transfer function</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>type</code> <code>str | None</code> <p>Transfer function type.</p> <code>None</code> <code>tableValues</code> <code>str | None</code> <p>Lookup table values.</p> <code>None</code> <code>slope</code> <code>float | None</code> <p>Linear function slope.</p> <code>None</code> <code>intercept</code> <code>float | None</code> <p>Linear function intercept.</p> <code>None</code> <code>amplitude</code> <code>float | None</code> <p>Gamma function amplitude.</p> <code>None</code> <code>exponent</code> <code>float | None</code> <p>Gamma function exponent.</p> <code>None</code> <code>offset</code> <code>float | None</code> <p>Gamma function offset.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    type: str | None = None,\n    tableValues: str | None = None,\n    slope: float | None = None,\n    intercept: float | None = None,\n    amplitude: float | None = None,\n    exponent: float | None = None,\n    offset: float | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.FeGaussianBlur","title":"FeGaussianBlur","text":"<pre><code>FeGaussianBlur(\n    *children,\n    in_=None,\n    stdDeviation=None,\n    edgeMode=None,\n    result=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Applies Gaussian blur to an image</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>in_</code> <code>str | None</code> <p>Input image reference.</p> <code>None</code> <code>stdDeviation</code> <code>str | float | None</code> <p>Blur amount using bell-curve.</p> <code>None</code> <code>edgeMode</code> <code>str | None</code> <p>Edge handling during blur.</p> <code>None</code> <code>result</code> <code>str | None</code> <p>Result identifier.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    in_: str | None = None,\n    stdDeviation: str | float | None = None,\n    edgeMode: str | None = None,\n    result: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.FeImage","title":"FeImage","text":"<pre><code>FeImage(\n    *children,\n    href=None,\n    preserveAspectRatio=None,\n    crossorigin=None,\n    result=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Refers to an external image</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>href</code> <code>str | None</code> <p>URL to image file.</p> <code>None</code> <code>preserveAspectRatio</code> <code>str | None</code> <p>Image scaling control.</p> <code>None</code> <code>crossorigin</code> <code>str | None</code> <p>CORS credentials flag.</p> <code>None</code> <code>result</code> <code>str | None</code> <p>Result identifier.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    href: str | None = None,\n    preserveAspectRatio: str | None = None,\n    crossorigin: str | None = None,\n    result: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.FeMerge","title":"FeMerge","text":"<pre><code>FeMerge(\n    *children,\n    result=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Merges multiple filter nodes</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>result</code> <code>str | None</code> <p>Result identifier.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    result: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.FeMergeNode","title":"FeMergeNode","text":"<pre><code>FeMergeNode(\n    *children,\n    in_=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a node for feMerge</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>in_</code> <code>str | None</code> <p>Input image reference.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    in_: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.FeMorphology","title":"FeMorphology","text":"<pre><code>FeMorphology(\n    *children,\n    in_=None,\n    operator=None,\n    radius=None,\n    result=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Applies morphological operations</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>in_</code> <code>str | None</code> <p>Input image reference.</p> <code>None</code> <code>operator</code> <code>str | None</code> <p>Morphology operator (erode|dilate).</p> <code>None</code> <code>radius</code> <code>str | float | None</code> <p>Morphology radius.</p> <code>None</code> <code>result</code> <code>str | None</code> <p>Result identifier.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    in_: str | None = None,\n    operator: str | None = None,\n    radius: str | float | None = None,\n    result: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.FeOffset","title":"FeOffset","text":"<pre><code>FeOffset(\n    *children,\n    in_=None,\n    dx=None,\n    dy=None,\n    result=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Offsets an image</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>in_</code> <code>str | None</code> <p>Input graphic reference.</p> <code>None</code> <code>dx</code> <code>str | float | None</code> <p>Horizontal offset distance.</p> <code>None</code> <code>dy</code> <code>str | float | None</code> <p>Vertical offset distance.</p> <code>None</code> <code>result</code> <code>str | None</code> <p>Result identifier.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    in_: str | None = None,\n    dx: str | float | None = None,\n    dy: str | float | None = None,\n    result: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.FePointLight","title":"FePointLight","text":"<pre><code>FePointLight(\n    *children,\n    x=None,\n    y=None,\n    z=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a point light source</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>x</code> <code>str | float | None</code> <p>X-coordinate of light position.</p> <code>None</code> <code>y</code> <code>str | float | None</code> <p>Y-coordinate of light position.</p> <code>None</code> <code>z</code> <code>str | float | None</code> <p>Z-coordinate of light position.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    x: str | float | None = None,\n    y: str | float | None = None,\n    z: str | float | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.FeSpecularLighting","title":"FeSpecularLighting","text":"<pre><code>FeSpecularLighting(\n    *children,\n    in_=None,\n    surfaceScale=None,\n    specularConstant=None,\n    specularExponent=None,\n    kernelUnitLength=None,\n    result=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Lights an image using specular lighting</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>in_</code> <code>str | None</code> <p>Input image reference.</p> <code>None</code> <code>surfaceScale</code> <code>float | None</code> <p>Surface height scale.</p> <code>None</code> <code>specularConstant</code> <code>float | None</code> <p>Specular lighting constant.</p> <code>None</code> <code>specularExponent</code> <code>float | None</code> <p>Specular lighting exponent.</p> <code>None</code> <code>kernelUnitLength</code> <code>str | None</code> <p>Kernel unit length.</p> <code>None</code> <code>result</code> <code>str | None</code> <p>Result identifier.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    in_: str | None = None,\n    surfaceScale: float | None = None,\n    specularConstant: float | None = None,\n    specularExponent: float | None = None,\n    kernelUnitLength: str | None = None,\n    result: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.FeSpotLight","title":"FeSpotLight","text":"<pre><code>FeSpotLight(\n    *children,\n    x=None,\n    y=None,\n    z=None,\n    pointsAtX=None,\n    pointsAtY=None,\n    pointsAtZ=None,\n    specularExponent=None,\n    limitingConeAngle=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a spot light source</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>x</code> <code>str | float | None</code> <p>X-coordinate of light position.</p> <code>None</code> <code>y</code> <code>str | float | None</code> <p>Y-coordinate of light position.</p> <code>None</code> <code>z</code> <code>str | float | None</code> <p>Z-coordinate of light position.</p> <code>None</code> <code>pointsAtX</code> <code>str | float | None</code> <p>X-coordinate of point light points at.</p> <code>None</code> <code>pointsAtY</code> <code>str | float | None</code> <p>Y-coordinate of point light points at.</p> <code>None</code> <code>pointsAtZ</code> <code>str | float | None</code> <p>Z-coordinate of point light points at.</p> <code>None</code> <code>specularExponent</code> <code>float | None</code> <p>Focus control for light source.</p> <code>None</code> <code>limitingConeAngle</code> <code>float | None</code> <p>Angle of spot light cone.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    x: str | float | None = None,\n    y: str | float | None = None,\n    z: str | float | None = None,\n    pointsAtX: str | float | None = None,\n    pointsAtY: str | float | None = None,\n    pointsAtZ: str | float | None = None,\n    specularExponent: float | None = None,\n    limitingConeAngle: float | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.FeTile","title":"FeTile","text":"<pre><code>FeTile(\n    *children,\n    in_=None,\n    result=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Tiles an image to fill a rectangle</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>in_</code> <code>str | None</code> <p>Input image reference.</p> <code>None</code> <code>result</code> <code>str | None</code> <p>Result identifier.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    in_: str | None = None,\n    result: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.FeTurbulence","title":"FeTurbulence","text":"<pre><code>FeTurbulence(\n    *children,\n    baseFrequency=None,\n    numOctaves=None,\n    seed=None,\n    stitchTiles=None,\n    type=None,\n    result=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Creates turbulence noise</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>baseFrequency</code> <code>str | float | None</code> <p>Base frequency for turbulence.</p> <code>None</code> <code>numOctaves</code> <code>int | None</code> <p>Number of noise octaves.</p> <code>None</code> <code>seed</code> <code>float | None</code> <p>Random seed for turbulence.</p> <code>None</code> <code>stitchTiles</code> <code>str | None</code> <p>Tile stitching mode (stitch|noStitch).</p> <code>None</code> <code>type</code> <code>str | None</code> <p>Turbulence type (fractalNoise|turbulence).</p> <code>None</code> <code>result</code> <code>str | None</code> <p>Result identifier.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    baseFrequency: str | float | None = None,\n    numOctaves: int | None = None,\n    seed: float | None = None,\n    stitchTiles: str | None = None,\n    type: str | None = None,\n    result: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.Filter","title":"Filter","text":"<pre><code>Filter(\n    *children,\n    x=None,\n    y=None,\n    width=None,\n    height=None,\n    filterUnits=None,\n    primitiveUnits=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a filter effect</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>x</code> <code>str | float | None</code> <p>X-coordinate of filter region.</p> <code>None</code> <code>y</code> <code>str | float | None</code> <p>Y-coordinate of filter region.</p> <code>None</code> <code>width</code> <code>str | float | None</code> <p>Width of filter region.</p> <code>None</code> <code>height</code> <code>str | float | None</code> <p>Height of filter region.</p> <code>None</code> <code>filterUnits</code> <code>str | None</code> <p>Coordinate system for position/size.</p> <code>None</code> <code>primitiveUnits</code> <code>str | None</code> <p>Coordinate system for primitives.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    x: str | float | None = None,\n    y: str | float | None = None,\n    width: str | float | None = None,\n    height: str | float | None = None,\n    filterUnits: str | None = None,\n    primitiveUnits: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.ForeignObject","title":"ForeignObject","text":"<pre><code>ForeignObject(\n    *children,\n    x=None,\n    y=None,\n    width=None,\n    height=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Allows inclusion of foreign XML</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>x</code> <code>str | float | None</code> <p>X-coordinate.</p> <code>None</code> <code>y</code> <code>str | float | None</code> <p>Y-coordinate.</p> <code>None</code> <code>width</code> <code>str | float | None</code> <p>Width.</p> <code>None</code> <code>height</code> <code>str | float | None</code> <p>Height.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    x: str | float | None = None,\n    y: str | float | None = None,\n    width: str | float | None = None,\n    height: str | float | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.G","title":"G","text":"<pre><code>G(*children, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Groups SVG elements</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.Image","title":"Image","text":"<pre><code>Image(\n    *children,\n    x=None,\n    y=None,\n    width=None,\n    height=None,\n    href=None,\n    preserveAspectRatio=None,\n    crossorigin=None,\n    decoding=None,\n    fetchpriority=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Embeds an image</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>x</code> <code>str | float | None</code> <p>Horizontal position from origin.</p> <code>None</code> <code>y</code> <code>str | float | None</code> <p>Vertical position from origin.</p> <code>None</code> <code>width</code> <code>str | float | None</code> <p>Width (required).</p> <code>None</code> <code>height</code> <code>str | float | None</code> <p>Height (required).</p> <code>None</code> <code>href</code> <code>str | None</code> <p>URL to image file.</p> <code>None</code> <code>preserveAspectRatio</code> <code>str | None</code> <p>Image scaling control.</p> <code>None</code> <code>crossorigin</code> <code>str | None</code> <p>CORS credentials flag.</p> <code>None</code> <code>decoding</code> <code>str | None</code> <p>Image decoding hint.</p> <code>None</code> <code>fetchpriority</code> <code>str | None</code> <p>Fetch priority hint (experimental).</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    x: str | float | None = None,\n    y: str | float | None = None,\n    width: str | float | None = None,\n    height: str | float | None = None,\n    href: str | None = None,\n    preserveAspectRatio: str | None = None,\n    crossorigin: str | None = None,\n    decoding: str | None = None,\n    fetchpriority: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.Line","title":"Line","text":"<pre><code>Line(\n    *children,\n    x1=None,\n    y1=None,\n    x2=None,\n    y2=None,\n    pathLength=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a line</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>x1</code> <code>str | float | None</code> <p>X-coordinate of start point.</p> <code>None</code> <code>y1</code> <code>str | float | None</code> <p>Y-coordinate of start point.</p> <code>None</code> <code>x2</code> <code>str | float | None</code> <p>X-coordinate of end point.</p> <code>None</code> <code>y2</code> <code>str | float | None</code> <p>Y-coordinate of end point.</p> <code>None</code> <code>pathLength</code> <code>float | None</code> <p>Total path length in user units.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    x1: str | float | None = None,\n    y1: str | float | None = None,\n    x2: str | float | None = None,\n    y2: str | float | None = None,\n    pathLength: float | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.LinearGradient","title":"LinearGradient","text":"<pre><code>LinearGradient(\n    *children,\n    x1=None,\n    y1=None,\n    x2=None,\n    y2=None,\n    gradientUnits=None,\n    gradientTransform=None,\n    href=None,\n    spreadMethod=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a linear gradient</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>x1</code> <code>str | float | None</code> <p>X-coordinate of gradient start.</p> <code>None</code> <code>y1</code> <code>str | float | None</code> <p>Y-coordinate of gradient start.</p> <code>None</code> <code>x2</code> <code>str | float | None</code> <p>X-coordinate of gradient end.</p> <code>None</code> <code>y2</code> <code>str | float | None</code> <p>Y-coordinate of gradient end.</p> <code>None</code> <code>gradientUnits</code> <code>str | None</code> <p>Coordinate system.</p> <code>None</code> <code>gradientTransform</code> <code>str | None</code> <p>Additional transformation.</p> <code>None</code> <code>href</code> <code>str | None</code> <p>Reference to template gradient.</p> <code>None</code> <code>spreadMethod</code> <code>str | None</code> <p>Gradient behavior outside bounds.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    x1: str | float | None = None,\n    y1: str | float | None = None,\n    x2: str | float | None = None,\n    y2: str | float | None = None,\n    gradientUnits: str | None = None,\n    gradientTransform: str | None = None,\n    href: str | None = None,\n    spreadMethod: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.Marker","title":"Marker","text":"<pre><code>Marker(\n    *children,\n    markerWidth=None,\n    markerHeight=None,\n    markerUnits=None,\n    refX=None,\n    refY=None,\n    orient=None,\n    viewBox=None,\n    preserveAspectRatio=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a graphic for drawing on lines</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>markerWidth</code> <code>str | float | None</code> <p>Width of marker viewport.</p> <code>None</code> <code>markerHeight</code> <code>str | float | None</code> <p>Height of marker viewport.</p> <code>None</code> <code>markerUnits</code> <code>str | None</code> <p>Coordinate system.</p> <code>None</code> <code>refX</code> <code>str | float | None</code> <p>X reference point.</p> <code>None</code> <code>refY</code> <code>str | float | None</code> <p>Y reference point.</p> <code>None</code> <code>orient</code> <code>str | float | None</code> <p>Marker orientation.</p> <code>None</code> <code>viewBox</code> <code>str | None</code> <p>Viewport bounds.</p> <code>None</code> <code>preserveAspectRatio</code> <code>str | None</code> <p>Aspect ratio handling.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    markerWidth: str | float | None = None,\n    markerHeight: str | float | None = None,\n    markerUnits: str | None = None,\n    refX: str | float | None = None,\n    refY: str | float | None = None,\n    orient: str | float | None = None,\n    viewBox: str | None = None,\n    preserveAspectRatio: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.Mask","title":"Mask","text":"<pre><code>Mask(\n    *children,\n    x=None,\n    y=None,\n    width=None,\n    height=None,\n    maskUnits=None,\n    maskContentUnits=None,\n    mask_type=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a mask</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>x</code> <code>str | float | None</code> <p>X-coordinate of top-left corner.</p> <code>None</code> <code>y</code> <code>str | float | None</code> <p>Y-coordinate of top-left corner.</p> <code>None</code> <code>width</code> <code>str | float | None</code> <p>Width of masking area.</p> <code>None</code> <code>height</code> <code>str | float | None</code> <p>Height of masking area.</p> <code>None</code> <code>maskUnits</code> <code>str | None</code> <p>Coordinate system for position/size.</p> <code>None</code> <code>maskContentUnits</code> <code>str | None</code> <p>Coordinate system for contents.</p> <code>None</code> <code>mask_type</code> <code>str | None</code> <p>Mask mode (alpha|luminance).</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    x: str | float | None = None,\n    y: str | float | None = None,\n    width: str | float | None = None,\n    height: str | float | None = None,\n    maskUnits: str | None = None,\n    maskContentUnits: str | None = None,\n    mask_type: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.Metadata","title":"Metadata","text":"<pre><code>Metadata(\n    *children, class_=None, id=None, style=None, **kwargs\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines metadata</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-e-m/#air.svg.Mpath","title":"Mpath","text":"<pre><code>Mpath(\n    *children,\n    href=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a motion path</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>href</code> <code>str | None</code> <p>Reference to path element.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    href: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-n-s/","title":"SVG N-S","text":""},{"location":"api/svg/svg-tags-n-s/#svg-tags-n-s_1","title":"SVG Tags N-S","text":"<p>Air is proud to provide first class SVG support. The entire SVG specification is supported.</p>"},{"location":"api/svg/svg-tags-n-s/#air.svg.Path","title":"Path","text":"<pre><code>Path(\n    *children,\n    d=None,\n    pathLength=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a path</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>d</code> <code>str | None</code> <p>Path data defining the shape.</p> <code>None</code> <code>pathLength</code> <code>float | None</code> <p>Total path length in user units.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    d: str | None = None,\n    pathLength: float | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-n-s/#air.svg.Pattern","title":"Pattern","text":"<pre><code>Pattern(\n    *children,\n    x=None,\n    y=None,\n    width=None,\n    height=None,\n    patternUnits=None,\n    patternContentUnits=None,\n    patternTransform=None,\n    href=None,\n    viewBox=None,\n    preserveAspectRatio=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a pattern</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>x</code> <code>str | float | None</code> <p>X-coordinate shift of pattern tile.</p> <code>None</code> <code>y</code> <code>str | float | None</code> <p>Y-coordinate shift of pattern tile.</p> <code>None</code> <code>width</code> <code>str | float | None</code> <p>Width of pattern tile.</p> <code>None</code> <code>height</code> <code>str | float | None</code> <p>Height of pattern tile.</p> <code>None</code> <code>patternUnits</code> <code>str | None</code> <p>Coordinate system for position/size.</p> <code>None</code> <code>patternContentUnits</code> <code>str | None</code> <p>Coordinate system for contents.</p> <code>None</code> <code>patternTransform</code> <code>str | None</code> <p>Additional transformation.</p> <code>None</code> <code>href</code> <code>str | None</code> <p>Reference to template pattern.</p> <code>None</code> <code>viewBox</code> <code>str | None</code> <p>Viewport bounds for pattern.</p> <code>None</code> <code>preserveAspectRatio</code> <code>str | None</code> <p>Aspect ratio handling.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    x: str | float | None = None,\n    y: str | float | None = None,\n    width: str | float | None = None,\n    height: str | float | None = None,\n    patternUnits: str | None = None,\n    patternContentUnits: str | None = None,\n    patternTransform: str | None = None,\n    href: str | None = None,\n    viewBox: str | None = None,\n    preserveAspectRatio: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-n-s/#air.svg.Polygon","title":"Polygon","text":"<pre><code>Polygon(\n    *children,\n    points=None,\n    pathLength=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a polygon</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>points</code> <code>str | None</code> <p>List of x,y coordinate pairs.</p> <code>None</code> <code>pathLength</code> <code>float | None</code> <p>Total path length in user units.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    points: str | None = None,\n    pathLength: float | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-n-s/#air.svg.Polyline","title":"Polyline","text":"<pre><code>Polyline(\n    *children,\n    points=None,\n    pathLength=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a polyline</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>points</code> <code>str | None</code> <p>List of x,y coordinate pairs.</p> <code>None</code> <code>pathLength</code> <code>float | None</code> <p>Total path length in user units.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    points: str | None = None,\n    pathLength: float | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-n-s/#air.svg.RadialGradient","title":"RadialGradient","text":"<pre><code>RadialGradient(\n    *children,\n    cx=None,\n    cy=None,\n    r=None,\n    fx=None,\n    fy=None,\n    fr=None,\n    gradientUnits=None,\n    gradientTransform=None,\n    href=None,\n    spreadMethod=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a radial gradient</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>cx</code> <code>str | float | None</code> <p>X-coordinate of end circle.</p> <code>None</code> <code>cy</code> <code>str | float | None</code> <p>Y-coordinate of end circle.</p> <code>None</code> <code>r</code> <code>str | float | None</code> <p>Radius of end circle.</p> <code>None</code> <code>fx</code> <code>str | float | None</code> <p>X-coordinate of start circle.</p> <code>None</code> <code>fy</code> <code>str | float | None</code> <p>Y-coordinate of start circle.</p> <code>None</code> <code>fr</code> <code>str | float | None</code> <p>Radius of start circle.</p> <code>None</code> <code>gradientUnits</code> <code>str | None</code> <p>Coordinate system.</p> <code>None</code> <code>gradientTransform</code> <code>str | None</code> <p>Additional transformation.</p> <code>None</code> <code>href</code> <code>str | None</code> <p>Reference to template gradient.</p> <code>None</code> <code>spreadMethod</code> <code>str | None</code> <p>Gradient behavior.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    cx: str | float | None = None,\n    cy: str | float | None = None,\n    r: str | float | None = None,\n    fx: str | float | None = None,\n    fy: str | float | None = None,\n    fr: str | float | None = None,\n    gradientUnits: str | None = None,\n    gradientTransform: str | None = None,\n    href: str | None = None,\n    spreadMethod: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-n-s/#air.svg.Rect","title":"Rect","text":"<pre><code>Rect(\n    *children,\n    x=None,\n    y=None,\n    width=None,\n    height=None,\n    rx=None,\n    ry=None,\n    pathLength=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a rectangle</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>x</code> <code>str | float | None</code> <p>X-coordinate.</p> <code>None</code> <code>y</code> <code>str | float | None</code> <p>Y-coordinate.</p> <code>None</code> <code>width</code> <code>str | float | None</code> <p>Width.</p> <code>None</code> <code>height</code> <code>str | float | None</code> <p>Height.</p> <code>None</code> <code>rx</code> <code>str | float | None</code> <p>Horizontal corner radius.</p> <code>None</code> <code>ry</code> <code>str | float | None</code> <p>Vertical corner radius.</p> <code>None</code> <code>pathLength</code> <code>float | None</code> <p>Total perimeter length in user units.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    x: str | float | None = None,\n    y: str | float | None = None,\n    width: str | float | None = None,\n    height: str | float | None = None,\n    rx: str | float | None = None,\n    ry: str | float | None = None,\n    pathLength: float | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-n-s/#air.svg.Script","title":"Script","text":"<pre><code>Script(\n    *children,\n    type=None,\n    href=None,\n    crossorigin=None,\n    fetchpriority=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a script</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>type</code> <code>str | None</code> <p>Script MIME type.</p> <code>None</code> <code>href</code> <code>str | None</code> <p>External script URL.</p> <code>None</code> <code>crossorigin</code> <code>str | None</code> <p>CORS credentials flag.</p> <code>None</code> <code>fetchpriority</code> <code>str | None</code> <p>Fetch priority hint (experimental).</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    type: str | None = None,\n    href: str | None = None,\n    crossorigin: str | None = None,\n    fetchpriority: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-n-s/#air.svg.Set","title":"Set","text":"<pre><code>Set(\n    *children,\n    to=None,\n    attributeName=None,\n    begin=None,\n    dur=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Sets an attribute value</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>to</code> <code>str | None</code> <p>Value to apply for animation duration.</p> <code>None</code> <code>attributeName</code> <code>str | None</code> <p>Target attribute to set.</p> <code>None</code> <code>begin</code> <code>str | None</code> <p>Animation start time.</p> <code>None</code> <code>dur</code> <code>str | None</code> <p>Animation duration.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    to: str | None = None,\n    attributeName: str | None = None,\n    begin: str | None = None,\n    dur: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-n-s/#air.svg.Stop","title":"Stop","text":"<pre><code>Stop(\n    *children,\n    offset=None,\n    stop_color=None,\n    stop_opacity=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a gradient stop</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>offset</code> <code>str | float | None</code> <p>Position along gradient vector.</p> <code>None</code> <code>stop_color</code> <code>str | None</code> <p>Color of gradient stop.</p> <code>None</code> <code>stop_opacity</code> <code>str | float | None</code> <p>Opacity of gradient stop.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    offset: str | float | None = None,\n    stop_color: str | None = None,\n    stop_opacity: str | float | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-n-s/#air.svg.Style","title":"Style","text":"<pre><code>Style(\n    *children,\n    type=None,\n    media=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines style information</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>type</code> <code>str | None</code> <p>Style sheet language MIME type.</p> <code>None</code> <code>media</code> <code>str | None</code> <p>Media query for when styles apply.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    type: str | None = None,\n    media: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-n-s/#air.svg.Svg","title":"Svg","text":"<pre><code>Svg(\n    *children,\n    width=None,\n    height=None,\n    x=None,\n    y=None,\n    viewBox=None,\n    preserveAspectRatio=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines an SVG document fragment</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>width</code> <code>str | float | None</code> <p>Displayed width of viewport.</p> <code>None</code> <code>height</code> <code>str | float | None</code> <p>Displayed height of viewport.</p> <code>None</code> <code>x</code> <code>str | float | None</code> <p>X-coordinate of container.</p> <code>None</code> <code>y</code> <code>str | float | None</code> <p>Y-coordinate of container.</p> <code>None</code> <code>viewBox</code> <code>str | None</code> <p>SVG viewport coordinates.</p> <code>None</code> <code>preserveAspectRatio</code> <code>str | None</code> <p>Aspect ratio handling.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    width: str | float | None = None,\n    height: str | float | None = None,\n    x: str | float | None = None,\n    y: str | float | None = None,\n    viewBox: str | None = None,\n    preserveAspectRatio: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-n-s/#air.svg.Switch","title":"Switch","text":"<pre><code>Switch(\n    *children, class_=None, id=None, style=None, **kwargs\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines conditional processing</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-n-s/#air.svg.Symbol","title":"Symbol","text":"<pre><code>Symbol(\n    *children,\n    width=None,\n    height=None,\n    x=None,\n    y=None,\n    viewBox=None,\n    preserveAspectRatio=None,\n    refX=None,\n    refY=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a reusable symbol</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>width</code> <code>str | float | None</code> <p>Width of symbol.</p> <code>None</code> <code>height</code> <code>str | float | None</code> <p>Height of symbol.</p> <code>None</code> <code>x</code> <code>str | float | None</code> <p>X-coordinate.</p> <code>None</code> <code>y</code> <code>str | float | None</code> <p>Y-coordinate.</p> <code>None</code> <code>viewBox</code> <code>str | None</code> <p>Viewport bounds for symbol.</p> <code>None</code> <code>preserveAspectRatio</code> <code>str | None</code> <p>Aspect ratio handling.</p> <code>None</code> <code>refX</code> <code>str | float | None</code> <p>X reference point.</p> <code>None</code> <code>refY</code> <code>str | float | None</code> <p>Y reference point.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    width: str | float | None = None,\n    height: str | float | None = None,\n    x: str | float | None = None,\n    y: str | float | None = None,\n    viewBox: str | None = None,\n    preserveAspectRatio: str | None = None,\n    refX: str | float | None = None,\n    refY: str | float | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-t-z/","title":"SVG T-Z","text":""},{"location":"api/svg/svg-tags-t-z/#svg-tags-t-z_1","title":"SVG Tags T-Z","text":"<p>Air is proud to provide first class SVG support. The entire SVG specification is supported.</p>"},{"location":"api/svg/svg-tags-t-z/#air.svg.Text","title":"Text","text":"<pre><code>Text(\n    *children,\n    x=None,\n    y=None,\n    dx=None,\n    dy=None,\n    rotate=None,\n    lengthAdjust=None,\n    textLength=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines text content</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>x</code> <code>str | float | None</code> <p>X-coordinates of text baseline.</p> <code>None</code> <code>y</code> <code>str | float | None</code> <p>Y-coordinates of text baseline.</p> <code>None</code> <code>dx</code> <code>str | float | None</code> <p>Horizontal shift from previous text.</p> <code>None</code> <code>dy</code> <code>str | float | None</code> <p>Vertical shift from previous text.</p> <code>None</code> <code>rotate</code> <code>str | None</code> <p>Rotation of individual glyphs.</p> <code>None</code> <code>lengthAdjust</code> <code>str | None</code> <p>Text stretching method.</p> <code>None</code> <code>textLength</code> <code>str | float | None</code> <p>Target width for text scaling.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    x: str | float | None = None,\n    y: str | float | None = None,\n    dx: str | float | None = None,\n    dy: str | float | None = None,\n    rotate: str | None = None,\n    lengthAdjust: str | None = None,\n    textLength: str | float | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-t-z/#air.svg.TextPath","title":"TextPath","text":"<pre><code>TextPath(\n    *children,\n    href=None,\n    lengthAdjust=None,\n    method=None,\n    path=None,\n    side=None,\n    spacing=None,\n    startOffset=None,\n    textLength=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines text along a path</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>href</code> <code>str | None</code> <p>Reference to path element for text layout.</p> <code>None</code> <code>lengthAdjust</code> <code>str | None</code> <p>Length adjustment method.</p> <code>None</code> <code>method</code> <code>str | None</code> <p>Glyph rendering method.</p> <code>None</code> <code>path</code> <code>str | None</code> <p>Path data for text layout.</p> <code>None</code> <code>side</code> <code>str | None</code> <p>Which side of path to render text.</p> <code>None</code> <code>spacing</code> <code>str | None</code> <p>Glyph spacing handling.</p> <code>None</code> <code>startOffset</code> <code>str | float | None</code> <p>Offset from path beginning.</p> <code>None</code> <code>textLength</code> <code>str | float | None</code> <p>Text rendering width.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    href: str | None = None,\n    lengthAdjust: str | None = None,\n    method: str | None = None,\n    path: str | None = None,\n    side: str | None = None,\n    spacing: str | None = None,\n    startOffset: str | float | None = None,\n    textLength: str | float | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-t-z/#air.svg.Title","title":"Title","text":"<pre><code>Title(\n    *children, class_=None, id=None, style=None, **kwargs\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a title for the SVG document</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-t-z/#air.svg.Tspan","title":"Tspan","text":"<pre><code>Tspan(\n    *children,\n    x=None,\n    y=None,\n    dx=None,\n    dy=None,\n    rotate=None,\n    lengthAdjust=None,\n    textLength=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a text span</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>x</code> <code>str | float | None</code> <p>X-coordinates of text baseline.</p> <code>None</code> <code>y</code> <code>str | float | None</code> <p>Y-coordinates of text baseline.</p> <code>None</code> <code>dx</code> <code>str | float | None</code> <p>Horizontal shift from previous text.</p> <code>None</code> <code>dy</code> <code>str | float | None</code> <p>Vertical shift from previous text.</p> <code>None</code> <code>rotate</code> <code>str | None</code> <p>Rotation of individual glyphs.</p> <code>None</code> <code>lengthAdjust</code> <code>str | None</code> <p>Text stretching method.</p> <code>None</code> <code>textLength</code> <code>str | float | None</code> <p>Target width for text scaling.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    x: str | float | None = None,\n    y: str | float | None = None,\n    dx: str | float | None = None,\n    dy: str | float | None = None,\n    rotate: str | None = None,\n    lengthAdjust: str | None = None,\n    textLength: str | float | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-t-z/#air.svg.Use","title":"Use","text":"<pre><code>Use(\n    *children,\n    href=None,\n    x=None,\n    y=None,\n    width=None,\n    height=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>References another element</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>href</code> <code>str | None</code> <p>Reference to element to duplicate.</p> <code>None</code> <code>x</code> <code>str | float | None</code> <p>X offset transformation.</p> <code>None</code> <code>y</code> <code>str | float | None</code> <p>Y offset transformation.</p> <code>None</code> <code>width</code> <code>str | float | None</code> <p>Width (only for elements with viewBox).</p> <code>None</code> <code>height</code> <code>str | float | None</code> <p>Height (only for elements with viewBox).</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    href: str | None = None,\n    x: str | float | None = None,\n    y: str | float | None = None,\n    width: str | float | None = None,\n    height: str | float | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/svg/svg-tags-t-z/#air.svg.View","title":"View","text":"<pre><code>View(\n    *children,\n    viewBox=None,\n    preserveAspectRatio=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>CaseTag</code></p> <p>Defines a view</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>viewBox</code> <code>str | None</code> <p>Viewport bounds.</p> <code>None</code> <code>preserveAspectRatio</code> <code>str | None</code> <p>Aspect ratio handling.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>**kwargs</code> <code>AttributesType</code> <p>Additional attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/svg.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    viewBox: str | None = None,\n    preserveAspectRatio: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/","title":"Tags","text":""},{"location":"api/tags/#tags_1","title":"Tags","text":"<p>Note</p> <p>Tags, or Air Tag, are explained in the concepts document about tags.</p> <p>In the spirit of helping our users, every Air Tag has copious documentation\u2014enough that sometimes it breaks the documentation build process. Therefore, Air Tag that directly correspond to their HTML equivalents can be found in smaller, easier-to-compile pages.</p> <ul> <li>HTML Air Tags A-D</li> <li>HTML Air Tags E-M</li> <li>HTML Air Tags N-S</li> <li>HTML Air Tags T-Z</li> </ul> <p>What remains on this page are core Air Tag that either have great utility (Raw and Children come to mind), or are base classes for other tags.</p>"},{"location":"api/tags/#air.tags.Tag","title":"Tag","text":"<pre><code>Tag(*children)\n</code></pre> <p>               Bases: <code>Transparent</code></p> Source code in <code>src/air/tags/models/special.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n) -&gt; None:\n    super().__init__(*children)\n</code></pre>"},{"location":"api/tags/#air.tags.Raw","title":"Raw","text":"<pre><code>Raw(text_child='', /, **kwargs)\n</code></pre> <p>               Bases: <code>UnSafeTag</code>, <code>Transparent</code></p> <p>Renders raw HTML content without escaping.</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>If non-string content is provided</p> <p>Example:     Raw('Bold text')     # Produces 'Bold text'     # Use with other tags     Div(         P(\"Safe content\"),         Raw(''),         P(\"More safe content\")     )</p> Source code in <code>src/air/tags/models/special.py</code> <pre><code>@override\ndef __init__(self, text_child: str = \"\", /, **kwargs: AttributesType) -&gt; None:\n    super().__init__(text_child, **kwargs)\n    if not isinstance(text_child, str):\n        msg = f\"{self!r} only accepts string content\"\n        raise TypeError(msg)\n</code></pre>"},{"location":"api/tags/#air.tags.Children","title":"Children","text":"<pre><code>Children(*children)\n</code></pre> <p>               Bases: <code>Transparent</code></p> Source code in <code>src/air/tags/models/special.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n) -&gt; None:\n    super().__init__(*children)\n</code></pre>"},{"location":"api/tags/#air.tags.SafeStr","title":"SafeStr","text":"<p>               Bases: <code>str</code></p> <p>A string subclass that doesn't trigger html.escape() when called by Tag.render()</p> Example <p>sample = SafeStr('Hello, world')</p>"},{"location":"api/tags/tags-a-d/","title":"Tags A-D","text":""},{"location":"api/tags/tags-a-d/#tags-a-d_1","title":"Tags A-D","text":""},{"location":"api/tags/tags-a-d/#air.tags.A","title":"A","text":"<pre><code>A(\n    *children,\n    href=None,\n    target=None,\n    download=None,\n    rel=None,\n    hreflang=None,\n    type=None,\n    referrerpolicy=None,\n    media=None,\n    ping=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Defines a hyperlink</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>href</code> <code>str | None</code> <p>Specifies the URL of the page the link goes to.</p> <code>None</code> <code>target</code> <code>str | None</code> <p>Specifies where to open the linked document.</p> <code>None</code> <code>download</code> <code>str | None</code> <p>Specifies that the target will be downloaded when a user clicks on the hyperlink.</p> <code>None</code> <code>rel</code> <code>str | None</code> <p>Specifies the relationship between the current document and the linked document.</p> <code>None</code> <code>hreflang</code> <code>str | None</code> <p>Specifies the language of the linked document.</p> <code>None</code> <code>type</code> <code>str | None</code> <p>Specifies the media type of the linked document.</p> <code>None</code> <code>referrerpolicy</code> <code>str | None</code> <p>Specifies which referrer information to send with the link.</p> <code>None</code> <code>media</code> <code>str | None</code> <p>Specifies what media/device the linked document is optimized for.</p> <code>None</code> <code>ping</code> <code>str | None</code> <p>Specifies a space-separated list of URLs to which, when the link is followed, post requests with the body ping will be sent by the browser (in the background). Typically used for tracking.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    href: str | None = None,\n    target: str | None = None,\n    download: str | None = None,\n    rel: str | None = None,\n    hreflang: str | None = None,\n    type: str | None = None,\n    referrerpolicy: str | None = None,\n    media: str | None = None,\n    ping: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-a-d/#air.tags.Area","title":"Area","text":"<pre><code>Area(\n    *,\n    alt=None,\n    coords=None,\n    download=None,\n    href=None,\n    ping=None,\n    referrerpolicy=None,\n    rel=None,\n    shape=None,\n    target=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>SelfClosingTag</code></p> <p>Defines an area inside an image map</p> <p>Parameters:</p> Name Type Description Default <code>alt</code> <code>str | None</code> <p>Specifies an alternate text for an area. Required if the href attribute is present.</p> <code>None</code> <code>coords</code> <code>str | None</code> <p>Specifies the coordinates of an area.</p> <code>None</code> <code>download</code> <code>str | None</code> <p>Specifies that the target will be downloaded when a user clicks on the hyperlink.</p> <code>None</code> <code>href</code> <code>str | None</code> <p>Specifies the URL of the page the link goes to.</p> <code>None</code> <code>ping</code> <code>str | None</code> <p>Specifies a space-separated list of URLs to which, when the link is followed, post requests with the body ping will be sent by the browser (in the background). Typically used for tracking.</p> <code>None</code> <code>referrerpolicy</code> <code>str | None</code> <p>Specifies which referrer information to send with the link.</p> <code>None</code> <code>rel</code> <code>str | None</code> <p>Specifies the relationship between the current document and the linked document.</p> <code>None</code> <code>shape</code> <code>str | None</code> <p>Specifies the shape of an area.</p> <code>None</code> <code>target</code> <code>str | None</code> <p>Specifies where to open the linked document.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *,\n    alt: str | None = None,\n    coords: str | None = None,\n    download: str | None = None,\n    href: str | None = None,\n    ping: str | None = None,\n    referrerpolicy: str | None = None,\n    rel: str | None = None,\n    shape: str | None = None,\n    target: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(**kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-a-d/#air.tags.Audio","title":"Audio","text":"<pre><code>Audio(\n    *children,\n    autoplay=None,\n    controls=None,\n    loop=None,\n    muted=None,\n    preload=None,\n    src=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Defines embedded sound content</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>autoplay</code> <code>str | None</code> <p>Specifies that the audio will start playing as soon as it is ready.</p> <code>None</code> <code>controls</code> <code>str | None</code> <p>Specifies that audio controls should be displayed (such as a play/pause button etc).</p> <code>None</code> <code>loop</code> <code>str | None</code> <p>Specifies that the audio will start over again, every time it is finished.</p> <code>None</code> <code>muted</code> <code>str | None</code> <p>Specifies that the audio output should be muted.</p> <code>None</code> <code>preload</code> <code>str | None</code> <p>Specifies if and how the author thinks the audio should be loaded when the page loads.</p> <code>None</code> <code>src</code> <code>str | None</code> <p>Specifies the URL of the audio file.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    autoplay: str | None = None,\n    controls: str | None = None,\n    loop: str | None = None,\n    muted: str | None = None,\n    preload: str | None = None,\n    src: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-a-d/#air.tags.Base","title":"Base","text":"<pre><code>Base(\n    *,\n    href=None,\n    target=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>SelfClosingTag</code></p> <p>Specifies the base URL/target for all relative URLs in a document</p> <p>Parameters:</p> Name Type Description Default <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *,\n    href: str | None = None,\n    target: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(**kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-a-d/#air.tags.Bdi","title":"Bdi","text":"<pre><code>Bdi(*children, class_=None, id=None, style=None, **kwargs)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Isolates a part of text that might be formatted in a different direction from other text outside it</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-a-d/#air.tags.Blockquote","title":"Blockquote","text":"<pre><code>Blockquote(\n    *children,\n    cite=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Defines a section that is quoted from another source</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>cite</code> <code>str | None</code> <p>Specifies the source of the quotation.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    cite: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-a-d/#air.tags.Button","title":"Button","text":"<pre><code>Button(\n    *children,\n    name=None,\n    type=None,\n    value=None,\n    autofocus=None,\n    disabled=None,\n    form=None,\n    formaction=None,\n    formenctype=None,\n    formmethod=None,\n    formnovalidate=None,\n    formtarget=None,\n    popovertarget=None,\n    popovertargetaction=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Defines a clickable button</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>name</code> <code>str | None</code> <p>Specifies a name for the button.</p> <code>None</code> <code>type</code> <code>str | None</code> <p>Specifies the type of button.</p> <code>None</code> <code>value</code> <code>str | None</code> <p>Specifies an initial value for the button.</p> <code>None</code> <code>autofocus</code> <code>str | None</code> <p>Specifies that a button should automatically get focus when the page loads.</p> <code>None</code> <code>disabled</code> <code>str | None</code> <p>Specifies that a button should be disabled.</p> <code>None</code> <code>form</code> <code>str | None</code> <p>Specifies which form the button belongs to.</p> <code>None</code> <code>formaction</code> <code>str | None</code> <p>Specifies where to send the form-data when a form is submitted. Only for type=\"submit\".</p> <code>None</code> <code>formenctype</code> <code>str | None</code> <p>Specifies how the form-data should be encoded before sending it to a server. Only for type=\"submit\".</p> <code>None</code> <code>formmethod</code> <code>str | None</code> <p>Specifies how to send the form-data (which HTTP method to use). Only for type=\"submit\".</p> <code>None</code> <code>formnovalidate</code> <code>str | None</code> <p>Specifies that the form-data should not be validated on submission. Only for type=\"submit\".</p> <code>None</code> <code>formtarget</code> <code>str | None</code> <p>Specifies where to display the response that is received after submitting the form. Only for type=\"submit\".</p> <code>None</code> <code>popovertarget</code> <code>str | None</code> <p>Specifies which popover element to invoke.</p> <code>None</code> <code>popovertargetaction</code> <code>str | None</code> <p>Specifies what action to perform on the popover element.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    name: str | None = None,\n    type: str | None = None,\n    value: str | None = None,\n    autofocus: str | None = None,\n    disabled: str | None = None,\n    form: str | None = None,\n    formaction: str | None = None,\n    formenctype: str | None = None,\n    formmethod: str | None = None,\n    formnovalidate: str | None = None,\n    formtarget: str | None = None,\n    popovertarget: str | None = None,\n    popovertargetaction: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-a-d/#air.tags.Canvas","title":"Canvas","text":"<pre><code>Canvas(\n    *children,\n    width=None,\n    height=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Used to draw graphics, on the fly, via scripting (usually JavaScript)</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>width</code> <code>str | int | None</code> <p>Specifies the width of the canvas.</p> <code>None</code> <code>height</code> <code>str | int | None</code> <p>Specifies the height of the canvas.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    width: str | int | None = None,\n    height: str | int | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-a-d/#air.tags.Col","title":"Col","text":"<pre><code>Col(\n    *, span=None, class_=None, id=None, style=None, **kwargs\n)\n</code></pre> <p>               Bases: <code>SelfClosingTag</code></p> <p>Specifies column properties for each column within a  element <p>Parameters:</p> Name Type Description Default <code>span</code> <code>str | None</code> <p>Specifies the number of columns a  element should span.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *,\n    span: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(**kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-a-d/#air.tags.Colgroup","title":"Colgroup","text":"<pre><code>Colgroup(\n    *children,\n    span=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Specifies a group of one or more columns in a table for formatting</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>span</code> <code>str | None</code> <p>Specifies the number of columns a  element should span. <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    span: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-a-d/#air.tags.Data","title":"Data","text":"<pre><code>Data(\n    *children,\n    value=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Adds a machine-readable translation of a given content</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>value</code> <code>str | None</code> <p>Specifies the machine-readable translation of the content.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    value: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-a-d/#air.tags.Dd","title":"Dd","text":"<pre><code>Dd(\n    *children,\n    cite=None,\n    datetime=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Defines a description/value of a term in a description list</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>cite</code> <code>str | None</code> <p>Specifies the source of the quotation.</p> <code>None</code> <code>datetime</code> <code>str | None</code> <p>Specifies the date and time of the quotation.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    cite: str | None = None,\n    datetime: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-a-d/#air.tags.Details","title":"Details","text":"<pre><code>Details(\n    *children,\n    open=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Defines additional details that the user can view or hide</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>open</code> <code>str | None</code> <p>Specifies that the details should be visible (open) to the user.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    open: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-a-d/#air.tags.Dialog","title":"Dialog","text":"<pre><code>Dialog(\n    *children,\n    open=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Defines a dialog box or window</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>open</code> <code>str | None</code> <p>Specifies that the dialog box should be visible (open) to the user.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    open: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-e-m/","title":"Tags E-M","text":""},{"location":"api/tags/tags-e-m/#tags-e-m_1","title":"Tags E-M","text":""},{"location":"api/tags/tags-e-m/#air.tags.Embed","title":"Embed","text":"<pre><code>Embed(\n    *,\n    src=None,\n    type=None,\n    width=None,\n    height=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>SelfClosingTag</code></p> <p>Defines a container for an external application</p> <p>Parameters:</p> Name Type Description Default <code>src</code> <code>str | None</code> <p>Specifies the address of the external file to embed.</p> <code>None</code> <code>type</code> <code>str | None</code> <p>Specifies the media type of the embedded content.</p> <code>None</code> <code>width</code> <code>str | int | None</code> <p>Specifies the width of the embedded content.</p> <code>None</code> <code>height</code> <code>str | int | None</code> <p>Specifies the height of the embedded content.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *,\n    src: str | None = None,\n    type: str | None = None,\n    width: str | int | None = None,\n    height: str | int | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(**kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-e-m/#air.tags.Fieldset","title":"Fieldset","text":"<pre><code>Fieldset(\n    *children,\n    disabled=None,\n    form=None,\n    name=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Groups related elements in a form</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>disabled</code> <code>str | None</code> <p>Specifies that a group of related form elements should be disabled.</p> <code>None</code> <code>form</code> <code>str | None</code> <p>Specifies which form the fieldset belongs to.</p> <code>None</code> <code>name</code> <code>str | None</code> <p>Specifies a name for the fieldset.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    disabled: str | None = None,\n    form: str | None = None,\n    name: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-e-m/#air.tags.Form","title":"Form","text":"<pre><code>Form(\n    *children,\n    action=None,\n    method=None,\n    accept_charset=None,\n    autocomplete=None,\n    enctype=None,\n    name=None,\n    novalidate=None,\n    rel=None,\n    target=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Defines an HTML form for user input</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>action</code> <code>str | None</code> <p>Specifies where to send the form-data when a form is submitted.</p> <code>None</code> <code>method</code> <code>str | None</code> <p>Specifies the HTTP method to use when sending form-data.</p> <code>None</code> <code>accept_charset</code> <code>str | None</code> <p>Specifies the character encodings that are to be used for the form submission.</p> <code>None</code> <code>autocomplete</code> <code>str | None</code> <p>Specifies whether a form should have autocomplete on or off.</p> <code>None</code> <code>enctype</code> <code>str | None</code> <p>Specifies how the form-data should be encoded when submitting it to the server.</p> <code>None</code> <code>name</code> <code>str | None</code> <p>Specifies the name of the form.</p> <code>None</code> <code>novalidate</code> <code>str | None</code> <p>Specifies that the form should not be validated when submitted.</p> <code>None</code> <code>rel</code> <code>str | None</code> <p>Specifies the relationship between a linked resource and the current document.</p> <code>None</code> <code>target</code> <code>str | None</code> <p>Specifies where to display the response that is received after submitting the form.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    action: str | None = None,\n    method: str | None = None,\n    accept_charset: str | None = None,\n    autocomplete: str | None = None,\n    enctype: str | None = None,\n    name: str | None = None,\n    novalidate: str | None = None,\n    rel: str | None = None,\n    target: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-e-m/#air.tags.Head","title":"Head","text":"<pre><code>Head(*children, profile=None, **kwargs)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Contains metadata/information for the document</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>profile</code> <code>str | None</code> <p>Specifies the URL of a document that contains a line-break-separated list of links.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    profile: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-e-m/#air.tags.Html","title":"Html","text":"<pre><code>Html(*children, **kwargs)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Defines the root of an HTML document</p> Source code in <code>src/air/tags/models/base.py</code> <pre><code>def __init__(self, *children: Any, **kwargs: AttributesType) -&gt; None:\n    \"\"\"\n    Args:\n        children: Tags, strings, or other rendered content.\n        kwargs: Keyword arguments transformed into tag attributes.\n    \"\"\"\n    self._name = self.__class__.__name__\n    self._module = self.__class__.__module__\n    self._children, self._attrs = children, kwargs\n</code></pre>"},{"location":"api/tags/tags-e-m/#air.tags.Html.pretty_render","title":"pretty_render","text":"<pre><code>pretty_render(\n    *, with_body=False, with_head=False, with_doctype=True\n)\n</code></pre> <p>Pretty-print without escaping.</p> Source code in <code>src/air/tags/models/special.py</code> <pre><code>@override\ndef pretty_render(\n    self,\n    *,\n    with_body: bool = False,\n    with_head: bool = False,\n    with_doctype: bool = True,\n) -&gt; str:\n    \"\"\"Pretty-print without escaping.\"\"\"\n    return super().pretty_render(with_body=with_body, with_head=with_head, with_doctype=with_doctype)\n</code></pre>"},{"location":"api/tags/tags-e-m/#air.tags.Iframe","title":"Iframe","text":"<pre><code>Iframe(\n    *children,\n    src=None,\n    srcdoc=None,\n    width=None,\n    height=None,\n    allow=None,\n    allowfullscreen=None,\n    allowpaymentrequest=None,\n    loading=None,\n    name=None,\n    referrerpolicy=None,\n    sandbox=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Defines an inline frame</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>src</code> <code>str | None</code> <p>Specifies the URL of the page to embed.</p> <code>None</code> <code>srcdoc</code> <code>str | None</code> <p>Specifies the HTML content of the page to show in the <code>&lt;iframe&gt;</code>.</p> <code>None</code> <code>width</code> <code>str | int | None</code> <p>Specifies the width of an <code>&lt;iframe&gt;</code>.</p> <code>None</code> <code>height</code> <code>str | int | None</code> <p>Specifies the height of an <code>&lt;iframe&gt;</code>.</p> <code>None</code> <code>allow</code> <code>str | None</code> <p>Specifies a feature policy for the <code>&lt;iframe&gt;</code>.</p> <code>None</code> <code>allowfullscreen</code> <code>str | None</code> <p>Set to true if the <code>&lt;iframe&gt;</code> can activate fullscreen mode.</p> <code>None</code> <code>allowpaymentrequest</code> <code>str | None</code> <p>Set to true if a cross-origin <code>&lt;iframe&gt;</code> should be allowed to invoke the Payment Request API.</p> <code>None</code> <code>loading</code> <code>str | None</code> <p>Specifies the loading policy of the <code>&lt;iframe&gt;</code>.</p> <code>None</code> <code>name</code> <code>str | None</code> <p>Specifies the name of an <code>&lt;iframe&gt;</code>.</p> <code>None</code> <code>referrerpolicy</code> <code>str | None</code> <p>Specifies which referrer information to send when fetching the iframe's content.</p> <code>None</code> <code>sandbox</code> <code>str | None</code> <p>Enables an extra set of restrictions for the content in an <code>&lt;iframe&gt;</code>.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    src: str | None = None,\n    srcdoc: str | None = None,\n    width: str | int | None = None,\n    height: str | int | None = None,\n    allow: str | None = None,\n    allowfullscreen: str | None = None,\n    allowpaymentrequest: str | None = None,\n    loading: str | None = None,\n    name: str | None = None,\n    referrerpolicy: str | None = None,\n    sandbox: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-e-m/#air.tags.Img","title":"Img","text":"<pre><code>Img(\n    *,\n    src=None,\n    width=None,\n    height=None,\n    srcset=None,\n    alt=None,\n    crossorigin=None,\n    ismap=None,\n    loading=None,\n    longdesc=None,\n    referrerpolicy=None,\n    sizes=None,\n    usemap=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>SelfClosingTag</code></p> <p>Defines an image</p> <p>Parameters:</p> Name Type Description Default <code>src</code> <code>str | None</code> <p>Specifies the path to the image.</p> <code>None</code> <code>width</code> <code>str | int | None</code> <p>Specifies the width of an image.</p> <code>None</code> <code>height</code> <code>str | int | None</code> <p>Specifies the height of an image.</p> <code>None</code> <code>srcset</code> <code>str | None</code> <p>Specifies a list of image files to use in different situations.</p> <code>None</code> <code>alt</code> <code>str | None</code> <p>Specifies an alternate text for an image.</p> <code>None</code> <code>crossorigin</code> <code>str | None</code> <p>Allows images from third-party sites that allow cross-origin access to be used with canvas.</p> <code>None</code> <code>ismap</code> <code>str | None</code> <p>Specifies an image as a server-side image map.</p> <code>None</code> <code>loading</code> <code>str | None</code> <p>Specifies whether a browser should load an image immediately or to defer loading of off-screen images.</p> <code>None</code> <code>longdesc</code> <code>str | None</code> <p>Specifies a URL to a detailed description of an image.</p> <code>None</code> <code>referrerpolicy</code> <code>str | None</code> <p>Specifies which referrer information to use when fetching an image.</p> <code>None</code> <code>sizes</code> <code>str | None</code> <p>Specifies image sizes for different page layouts.</p> <code>None</code> <code>usemap</code> <code>str | None</code> <p>Specifies an image as a client-side image map.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *,\n    src: str | None = None,\n    width: str | int | None = None,\n    height: str | int | None = None,\n    srcset: str | None = None,\n    alt: str | None = None,\n    crossorigin: str | None = None,\n    ismap: str | None = None,\n    loading: str | None = None,\n    longdesc: str | None = None,\n    referrerpolicy: str | None = None,\n    sizes: str | None = None,\n    usemap: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(**kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-e-m/#air.tags.Input","title":"Input","text":"<pre><code>Input(\n    *,\n    name=None,\n    type=None,\n    value=None,\n    readonly=None,\n    required=None,\n    accept=None,\n    alt=None,\n    autocomplete=None,\n    autofocus=None,\n    checked=None,\n    dirname=None,\n    disabled=None,\n    form=None,\n    formaction=None,\n    formenctype=None,\n    formmethod=None,\n    formnovalidate=None,\n    formtarget=None,\n    height=None,\n    list=None,\n    max=None,\n    maxlength=None,\n    min=None,\n    minlength=None,\n    multiple=None,\n    pattern=None,\n    placeholder=None,\n    popovertarget=None,\n    popovertargetaction=None,\n    size=None,\n    src=None,\n    step=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>SelfClosingTag</code></p> <p>Defines an input control</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str | None</code> <p>Specifies the name of an <code>&lt;input&gt;</code> element.</p> <code>None</code> <code>type</code> <code>str | None</code> <p>Specifies the type <code>&lt;input&gt;</code> element to display.</p> <code>None</code> <code>value</code> <code>str | None</code> <p>Specifies the value of an <code>&lt;input&gt;</code> element.</p> <code>None</code> <code>readonly</code> <code>bool | None</code> <p>Specifies that an input field is read-only.</p> <code>None</code> <code>required</code> <code>bool | None</code> <p>Specifies that an input field must be filled out before submitting the form.</p> <code>None</code> <code>accept</code> <code>str | None</code> <p>Specifies a filter for what file types the user can pick from the file input dialog box.</p> <code>None</code> <code>alt</code> <code>str | None</code> <p>Specifies an alternate text for images.</p> <code>None</code> <code>autocomplete</code> <code>str | None</code> <p>Specifies whether an <code>&lt;input&gt;</code> element should have autocomplete on or off.</p> <code>None</code> <code>autofocus</code> <code>bool | None</code> <p>Specifies that an <code>&lt;input&gt;</code> element should automatically get focus when the page loads.</p> <code>None</code> <code>checked</code> <code>bool | None</code> <p>Specifies that an <code>&lt;input&gt;</code> element should be pre-selected when the page loads.</p> <code>None</code> <code>dirname</code> <code>str | None</code> <p>Specifies that the text direction of the input field will be submitted.</p> <code>None</code> <code>disabled</code> <code>bool | None</code> <p>Specifies that an <code>&lt;input&gt;</code> element should be disabled.</p> <code>None</code> <code>form</code> <code>str | None</code> <p>Specifies the form the <code>&lt;input&gt;</code> element belongs to.</p> <code>None</code> <code>formaction</code> <code>str | None</code> <p>Specifies the URL of the file that will process the input control when the form is submitted.</p> <code>None</code> <code>formenctype</code> <code>str | None</code> <p>Specifies how the form-data should be encoded when submitting it to the server.</p> <code>None</code> <code>formmethod</code> <code>str | None</code> <p>Defines the HTTP method for sending data to the action URL.</p> <code>None</code> <code>formnovalidate</code> <code>bool | None</code> <p>Specifies that the form-data should not be validated on submission.</p> <code>None</code> <code>formtarget</code> <code>str | None</code> <p>Specifies where to display the response that is received after submitting the form.</p> <code>None</code> <code>height</code> <code>str | int | None</code> <p>Specifies the height of an <code>&lt;input&gt;</code> element.</p> <code>None</code> <code>list</code> <code>str | None</code> <p>Refers to a  element that contains pre-defined options for an <code>&lt;input&gt;</code> element. <code>None</code> <code>max</code> <code>str | None</code> <p>Specifies the maximum value for an <code>&lt;input&gt;</code> element.</p> <code>None</code> <code>maxlength</code> <code>str | None</code> <p>Specifies the maximum number of characters allowed in an <code>&lt;input&gt;</code> element.</p> <code>None</code> <code>min</code> <code>str | None</code> <p>Specifies a minimum value for an <code>&lt;input&gt;</code> element.</p> <code>None</code> <code>minlength</code> <code>str | None</code> <p>Specifies the minimum number of characters required in an <code>&lt;input&gt;</code> element.</p> <code>None</code> <code>multiple</code> <code>bool | None</code> <p>Specifies that a user can enter more than one value in an <code>&lt;input&gt;</code> element.</p> <code>None</code> <code>pattern</code> <code>str | None</code> <p>Specifies a regular expression that an <code>&lt;input&gt;</code> element's value is checked against.</p> <code>None</code> <code>placeholder</code> <code>str | None</code> <p>Specifies a short hint that describes the expected value of an <code>&lt;input&gt;</code> element.</p> <code>None</code> <code>popovertarget</code> <code>str | None</code> <p>Specifies which popover element to invoke.</p> <code>None</code> <code>popovertargetaction</code> <code>str | None</code> <p>Specifies what action to perform on the popover element.</p> <code>None</code> <code>size</code> <code>str | None</code> <p>Specifies the width, in characters, of an <code>&lt;input&gt;</code> element.</p> <code>None</code> <code>src</code> <code>str | None</code> <p>Specifies the URL of the image to use as a submit button.</p> <code>None</code> <code>step</code> <code>str | None</code> <p>Specifies the legal number intervals for an input field.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *,\n    name: str | None = None,\n    type: str | None = None,\n    value: str | None = None,\n    readonly: bool | None = None,\n    required: bool | None = None,\n    accept: str | None = None,\n    alt: str | None = None,\n    autocomplete: str | None = None,\n    autofocus: bool | None = None,\n    checked: bool | None = None,\n    dirname: str | None = None,\n    disabled: bool | None = None,\n    form: str | None = None,\n    formaction: str | None = None,\n    formenctype: str | None = None,\n    formmethod: str | None = None,\n    formnovalidate: bool | None = None,\n    formtarget: str | None = None,\n    height: str | int | None = None,\n    list: str | None = None,\n    max: str | None = None,\n    maxlength: str | None = None,\n    min: str | None = None,\n    minlength: str | None = None,\n    multiple: bool | None = None,\n    pattern: str | None = None,\n    placeholder: str | None = None,\n    popovertarget: str | None = None,\n    popovertargetaction: str | None = None,\n    size: str | None = None,\n    src: str | None = None,\n    step: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(**kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-e-m/#air.tags.Ins","title":"Ins","text":"<pre><code>Ins(\n    *children,\n    cite=None,\n    datetime=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Defines a text that has been inserted into a document</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>cite</code> <code>str | None</code> <p>Specifies a URL to a document that explains the reason why the text was inserted/changed.</p> <code>None</code> <code>datetime</code> <code>str | None</code> <p>Specifies the date and time when the text was inserted/changed.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    cite: str | None = None,\n    datetime: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-e-m/#air.tags.Map","title":"Map","text":"<pre><code>Map(\n    *children,\n    name=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Defines an image map</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>name</code> <code>str | None</code> <p>Specifies the name of the image map.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    name: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-e-m/#air.tags.Menu","title":"Menu","text":"<pre><code>Menu(\n    *children,\n    compact=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Defines a menu list</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>compact</code> <code>str | None</code> <p>Specifies that the list should be displayed in a compact style.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    compact: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-e-m/#air.tags.Meta","title":"Meta","text":"<pre><code>Meta(\n    *,\n    charset=None,\n    content=None,\n    http_equiv=None,\n    media=None,\n    name=None,\n    class_=None,\n    id=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>SelfClosingTag</code></p> <p>Defines metadata about an HTML document</p> <p>Parameters:</p> Name Type Description Default <code>charset</code> <code>str | None</code> <p>Specifies the character encoding for the HTML document.</p> <code>None</code> <code>content</code> <code>str | None</code> <p>Specifies the value associated with the http-equiv or name attribute.</p> <code>None</code> <code>http_equiv</code> <code>str | None</code> <p>Provides an HTTP header for the information/value of the content attribute.</p> <code>None</code> <code>media</code> <code>str | None</code> <p>Specifies what media/device the linked document is optimized for.</p> <code>None</code> <code>name</code> <code>str | None</code> <p>Specifies a name for the metadata.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <p>Inline style attribute.</p> required <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *,\n    charset: str | None = None,\n    content: str | None = None,\n    http_equiv: str | None = None,\n    media: str | None = None,\n    name: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(**kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-e-m/#air.tags.Meter","title":"Meter","text":"<pre><code>Meter(\n    *children,\n    value=None,\n    min=None,\n    max=None,\n    low=None,\n    high=None,\n    optimum=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Defines a scalar measurement within a known range (a gauge)</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>value</code> <code>str | None</code> <p>The current numeric value. Must be between the min and max values.</p> <code>None</code> <code>min</code> <code>str | None</code> <p>The lower bound of the measured range.</p> <code>None</code> <code>max</code> <code>str | None</code> <p>The upper bound of the measured range.</p> <code>None</code> <code>low</code> <code>str | None</code> <p>The upper numeric bound of the low end of the measured range.</p> <code>None</code> <code>high</code> <code>str | None</code> <p>The lower numeric bound of the high end of the measured range.</p> <code>None</code> <code>optimum</code> <code>str | None</code> <p>The optimal numeric value.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    value: str | None = None,\n    min: str | None = None,\n    max: str | None = None,\n    low: str | None = None,\n    high: str | None = None,\n    optimum: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-n-s/","title":"Tags N-S","text":""},{"location":"api/tags/tags-n-s/#tags-n-s_1","title":"Tags N-S","text":""},{"location":"api/tags/tags-n-s/#air.tags.Object","title":"Object","text":"<pre><code>Object(\n    *children,\n    archive=None,\n    border=None,\n    classid=None,\n    codebase=None,\n    codetype=None,\n    data=None,\n    declare=None,\n    form=None,\n    height=None,\n    name=None,\n    standby=None,\n    type=None,\n    usemap=None,\n    width=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Defines an embedded object</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>archive</code> <code>str | None</code> <p>A space-separated list of URIs for archives of resources for the object.</p> <code>None</code> <code>border</code> <code>str | None</code> <p>The width of a border around the object.</p> <code>None</code> <code>classidcodebase</code> <p>The codebase URL for the object.</p> required <code>codetype</code> <code>str | None</code> <p>The content type of the code.</p> <code>None</code> <code>data</code> <code>str | None</code> <p>The address of the object's data.</p> <code>None</code> <code>declare</code> <code>str | None</code> <p>Declares the object without instantiating it.</p> <code>None</code> <code>form</code> <code>str | None</code> <p>The form the object belongs to.</p> <code>None</code> <code>height</code> <code>str | int | None</code> <p>The height of the object.</p> <code>None</code> <code>name</code> <code>str | None</code> <p>The name of the object.</p> <code>None</code> <code>standby</code> <code>str | None</code> <p>A message to display while the object is loading.</p> <code>None</code> <code>type</code> <code>str | None</code> <p>The content type of the data.</p> <code>None</code> <code>usemap</code> <code>str | None</code> <p>The name of a client-side image map to be used with the object.</p> <code>None</code> <code>width</code> <code>str | int | None</code> <p>The width of the object.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    archive: str | None = None,\n    border: str | None = None,\n    classid: str | None = None,\n    codebase: str | None = None,\n    codetype: str | None = None,\n    data: str | None = None,\n    declare: str | None = None,\n    form: str | None = None,\n    height: str | int | None = None,\n    name: str | None = None,\n    standby: str | None = None,\n    type: str | None = None,\n    usemap: str | None = None,\n    width: str | int | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-n-s/#air.tags.Ol","title":"Ol","text":"<pre><code>Ol(\n    *children,\n    compact=None,\n    reversed=None,\n    start=None,\n    type=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Defines an ordered list</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>compact</code> <code>str | None</code> <p>Specifies that the list should be rendered in a compact style.</p> <code>None</code> <code>reversed</code> <code>str | None</code> <p>Specifies that the list order should be descending.</p> <code>None</code> <code>start</code> <code>str | None</code> <p>Specifies the start value of an ordered list.</p> <code>None</code> <code>type</code> <code>str | None</code> <p>Specifies the kind of marker to use in the list.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    compact: str | None = None,\n    reversed: str | None = None,\n    start: str | None = None,\n    type: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-n-s/#air.tags.Optgroup","title":"Optgroup","text":"<pre><code>Optgroup(\n    *children,\n    disabled=None,\n    label=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Defines a group of related options in a drop-down list</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>disabled</code> <code>str | None</code> <p>Indicates if items in the option group are not selectable.</p> <code>None</code> <code>label</code> <code>str | None</code> <p>Specifies a label for the group of options.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    disabled: str | None = None,\n    label: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-n-s/#air.tags.Option","title":"Option","text":"<pre><code>Option(\n    *children,\n    disabled=None,\n    label=None,\n    selected=None,\n    value=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Defines an option in a drop-down list</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>disabled</code> <code>str | None</code> <p>Indicates if the option is not selectable.</p> <code>None</code> <code>label</code> <code>str | None</code> <p>Specifies a label for the option indicating the meaning of the option.</p> <code>None</code> <code>selected</code> <code>bool | None</code> <p>Specifies that the option should be pre-selected.</p> <code>None</code> <code>value</code> <code>str | None</code> <p>Specifies the value to be sent with the form.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    disabled: str | None = None,\n    label: str | None = None,\n    selected: bool | None = None,\n    value: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-n-s/#air.tags.Output","title":"Output","text":"<pre><code>Output(\n    *children,\n    for_=None,\n    form=None,\n    name=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Defines the result of a calculation</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>for_</code> <code>str | None</code> <p>Lists the IDs of the elements that contributed to the calculation.</p> <code>None</code> <code>form</code> <code>str | None</code> <p>Associates the output with a form element.</p> <code>None</code> <code>name</code> <code>str | None</code> <p>Defines a name for the output element.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    for_: str | None = None,\n    form: str | None = None,\n    name: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-n-s/#air.tags.Pre","title":"Pre","text":"<pre><code>Pre(\n    *children,\n    width=None,\n    wrap=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Defines preformatted text</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>width</code> <code>str | int | None</code> <p>preferred counf of characters that a line should have</p> <code>None</code> <code>wrap</code> <code>str | None</code> <p>hint indicating how overflow must happen</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    width: str | int | None = None,\n    wrap: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-n-s/#air.tags.Progress","title":"Progress","text":"<pre><code>Progress(\n    *children,\n    max=None,\n    value=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Represents the progress of a task</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>max</code> <code>str | None</code> <p>The maximum value of the progress bar.</p> <code>None</code> <code>value</code> <code>str | None</code> <p>The current value of the progress bar.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    max: str | None = None,\n    value: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-n-s/#air.tags.Q","title":"Q","text":"<pre><code>Q(\n    *children,\n    cite=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Defines a short quotation</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>Any</code> <p>Tags, strings, or other rendered content.</p> <code>()</code> <code>cite</code> <code>str | None</code> <p>Specifies a URL to the source of the quotation.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM ID attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    cite: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-n-s/#air.tags.Script","title":"Script","text":"<pre><code>Script(\n    text_child=\"\",\n    /,\n    *,\n    src=None,\n    type=None,\n    async_=False,\n    defer=False,\n    nomodule=False,\n    crossorigin=None,\n    integrity=None,\n    referrerpolicy=None,\n    fetchpriority=None,\n    blocking=None,\n    attributionsrc=None,\n    nonce=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>UnSafeTag</code></p> <p>Defines a client-side script. Warning: Script tag does not protect against code injection.</p> <p>Parameters:</p> Name Type Description Default <code>text_child</code> <code>str</code> <p>Inline script code. Use an empty string when providing <code>src</code>.</p> <code>''</code> <code>src</code> <code>str | None</code> <p>URI of the external script.</p> <code>None</code> <code>type</code> <code>str | None</code> <p>Script type. Examples: <code>module</code>, <code>importmap</code>, <code>speculationrules</code>, a JavaScript MIME type (e.g. <code>text/javascript</code>), or empty for classic scripts.</p> <code>None</code> <code>async_</code> <code>bool</code> <p>Fetch in parallel and execute as soon as ready; order is not guaranteed.</p> <code>False</code> <code>defer</code> <code>bool</code> <p>Execute after parsing (classic scripts only; modules defer by default).</p> <code>False</code> <code>nomodule</code> <code>bool</code> <p>Do not execute on browsers that support ES modules.</p> <code>False</code> <code>crossorigin</code> <code>Literal['anonymous', 'use-credentials'] | None</code> <p>CORS mode. One of <code>\"anonymous\"</code> or <code>\"use-credentials\"</code>.</p> <code>None</code> <code>integrity</code> <code>str | None</code> <p>Subresource Integrity hash (e.g. <code>\"sha384-...\"</code>).</p> <code>None</code> <code>referrerpolicy</code> <code>Literal['no-referrer', 'no-referrer-when-downgrade', 'origin', 'origin-when-cross-origin', 'same-origin', 'strict-origin', 'strict-origin-when-cross-origin', 'unsafe-url'] | None</code> <p>Which referrer to send. One of: <code>\"no-referrer\"</code>, <code>\"no-referrer-when-downgrade\"</code>, <code>\"origin\"</code>, <code>\"origin-when-cross-origin\"</code>, <code>\"same-origin\"</code>, <code>\"strict-origin\"</code>, <code>\"strict-origin-when-cross-origin\"</code>, <code>\"unsafe-url\"</code>.</p> <code>None</code> <code>fetchpriority</code> <code>Literal['high', 'low', 'auto'] | None</code> <p>Network priority hint. One of <code>\"high\"</code>, <code>\"low\"</code>, <code>\"auto\"</code>.</p> <code>None</code> <code>blocking</code> <code>Literal['render'] | None</code> <p>Space-separated tokens that block operations; currently <code>\"render\"</code>.</p> <code>None</code> <code>attributionsrc</code> <code>str | None</code> <p>Space-separated URLs for Attribution Reporting (experimental).</p> <code>None</code> <code>nonce</code> <code>str | None</code> <p>CSP nonce (meaning: one-time token) to allow this inline script.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM <code>id</code> attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/special.py</code> <pre><code>@override\ndef __init__(\n    self,\n    text_child: str = \"\",\n    /,\n    *,\n    src: str | None = None,\n    type: str | None = None,\n    async_: bool = False,\n    defer: bool = False,\n    nomodule: bool = False,\n    crossorigin: Literal[\"anonymous\", \"use-credentials\"] | None = None,\n    integrity: str | None = None,\n    referrerpolicy: Literal[\n        \"no-referrer\",\n        \"no-referrer-when-downgrade\",\n        \"origin\",\n        \"origin-when-cross-origin\",\n        \"same-origin\",\n        \"strict-origin\",\n        \"strict-origin-when-cross-origin\",\n        \"unsafe-url\",\n    ]\n    | None = None,\n    fetchpriority: Literal[\"high\", \"low\", \"auto\"] | None = None,\n    blocking: Literal[\"render\"] | None = None,\n    attributionsrc: str | None = None,\n    nonce: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(text_child, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-n-s/#air.tags.Select","title":"Select","text":"<pre><code>Select(\n    *children,\n    autocomplete=None,\n    autofocus=None,\n    disabled=None,\n    form=None,\n    multiple=None,\n    name=None,\n    required=None,\n    size=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Defines a drop-down list</p> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    autocomplete: str | None = None,\n    autofocus: str | None = None,\n    disabled: str | None = None,\n    form: str | None = None,\n    multiple: str | None = None,\n    name: str | None = None,\n    required: str | None = None,\n    size: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-n-s/#air.tags.Source","title":"Source","text":"<pre><code>Source(\n    *children,\n    src=None,\n    type=None,\n    sizes=None,\n    media=None,\n    srcset=None,\n    height=None,\n    width=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Defines multiple media resources for media elements ( and ) Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    src: str | None = None,\n    type: str | None = None,\n    sizes: str | None = None,\n    media: str | None = None,\n    srcset: str | None = None,\n    height: str | int | None = None,\n    width: str | int | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-n-s/#air.tags.Style","title":"Style","text":"<pre><code>Style(\n    text_child=\"\",\n    /,\n    *,\n    media=None,\n    title=None,\n    blocking=None,\n    nonce=None,\n    type=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>UnSafeTag</code></p> <p>Defines style information for a document. Warning: Style tag does not protect against code injection.</p> <p>Parameters:</p> Name Type Description Default <code>text_child</code> <code>str</code> <p>CSS stylesheet text.</p> <code>''</code> <code>media</code> <code>str | None</code> <p>Media query (e.g. <code>\"(width &lt; 500px)\"</code>). Defaults to <code>\"all\"</code>.</p> <code>None</code> <code>title</code> <code>str | None</code> <p>Title for alternate style sheet sets.</p> <code>None</code> <code>blocking</code> <code>Literal['render'] | None</code> <p>Space-separated tokens that block operations; currently <code>\"render\"</code>.</p> <code>None</code> <code>nonce</code> <code>str | None</code> <p>CSP nonce (meaning: one-time token) to allow this inline style.</p> <code>None</code> <code>type</code> <code>str | None</code> <p>(Deprecated) Only <code>\"\"</code> or <code>\"text/css\"</code> are permitted; omit in modern HTML.</p> <code>None</code> <code>class_</code> <code>str | None</code> <p>Substituted as the DOM <code>class</code> attribute.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>DOM <code>id</code> attribute.</p> <code>None</code> <code>style</code> <code>str | None</code> <p>Inline style attribute.</p> <code>None</code> <code>kwargs</code> <code>AttributesType</code> <p>Keyword arguments transformed into tag attributes.</p> <code>{}</code> Source code in <code>src/air/tags/models/special.py</code> <pre><code>@override\ndef __init__(\n    self,\n    text_child: str = \"\",\n    /,\n    *,\n    media: str | None = None,\n    title: str | None = None,\n    blocking: Literal[\"render\"] | None = None,\n    nonce: str | None = None,\n    type: str | None = None,  # deprecated\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(text_child, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-t-z/","title":"Tags T-Z","text":""},{"location":"api/tags/tags-t-z/#tags-t-z_1","title":"Tags T-Z","text":""},{"location":"api/tags/tags-t-z/#air.tags.Td","title":"Td","text":"<pre><code>Td(\n    *children,\n    colspan=None,\n    rowspan=None,\n    headers=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Defines a cell in a table</p> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    colspan: str | None = None,\n    rowspan: str | None = None,\n    headers: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-t-z/#air.tags.Template","title":"Template","text":"<pre><code>Template(\n    *children,\n    shadowrootmode=None,\n    shadowrootdelegatesfocus=None,\n    shadowrootclonable=None,\n    shadowrootserializable=None,\n    class_=None,\n    id=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Defines a container for content that should be hidden when the page loads</p> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    shadowrootmode: str | None = None,\n    shadowrootdelegatesfocus: str | None = None,\n    shadowrootclonable: str | None = None,\n    shadowrootserializable: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-t-z/#air.tags.Textarea","title":"Textarea","text":"<pre><code>Textarea(\n    *children,\n    autocapitalize=None,\n    autocomplete=None,\n    autocorrect=None,\n    autofocus=None,\n    cols=None,\n    dirname=None,\n    disabled=None,\n    form=None,\n    maxlength=None,\n    minlength=None,\n    name=None,\n    placeholder=None,\n    readonly=None,\n    required=None,\n    rows=None,\n    spellcheck=None,\n    wrap=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Defines a multiline input control (text area)</p> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    autocapitalize: str | None = None,\n    autocomplete: str | None = None,\n    autocorrect: str | None = None,\n    autofocus: bool | None = None,\n    cols: str | None = None,\n    dirname: str | None = None,\n    disabled: bool | None = None,\n    form: str | None = None,\n    maxlength: str | None = None,\n    minlength: str | None = None,\n    name: str | None = None,\n    placeholder: str | None = None,\n    readonly: bool | None = None,\n    required: bool | None = None,\n    rows: str | None = None,\n    spellcheck: str | None = None,\n    wrap: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-t-z/#air.tags.Th","title":"Th","text":"<pre><code>Th(\n    *children,\n    abbr=None,\n    colspan=None,\n    headers=None,\n    rowspan=None,\n    scope=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Defines a header cell in a table</p> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    abbr: str | None = None,\n    colspan: str | None = None,\n    headers: str | None = None,\n    rowspan: str | None = None,\n    scope: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-t-z/#air.tags.Time","title":"Time","text":"<pre><code>Time(\n    *children,\n    datetime=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Defines a specific time (or datetime)</p> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    datetime: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-t-z/#air.tags.Track","title":"Track","text":"<pre><code>Track(\n    *,\n    default=None,\n    kind=None,\n    label=None,\n    srclang=None,\n    src=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>SelfClosingTag</code></p> <p>Defines text tracks for media elements ( and ) Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *,\n    default: str | None = None,\n    kind: str | None = None,\n    label: str | None = None,\n    srclang: str | None = None,\n    src: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(**kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-t-z/#air.tags.U","title":"U","text":"<pre><code>U(\n    *children,\n    compact=None,\n    type=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Defines some text that is unarticulated and styled differently from normal text</p> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    compact: str | None = None,\n    type: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"api/tags/tags-t-z/#air.tags.Video","title":"Video","text":"<pre><code>Video(\n    *children,\n    src=None,\n    autoplay=None,\n    controls=None,\n    controlslist=None,\n    crossorigin=None,\n    disablepictureinpicture=None,\n    disableremoteplayback=None,\n    height=None,\n    width=None,\n    loop=None,\n    muted=None,\n    playsinline=None,\n    poster=None,\n    preload=None,\n    class_=None,\n    id=None,\n    style=None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseTag</code></p> <p>Defines embedded video content</p> Source code in <code>src/air/tags/models/stock.py</code> <pre><code>def __init__(\n    self,\n    *children: Any,\n    src: str | None = None,\n    autoplay: str | None = None,\n    controls: str | None = None,\n    controlslist: str | None = None,\n    crossorigin: str | None = None,\n    disablepictureinpicture: str | None = None,\n    disableremoteplayback: str | None = None,\n    height: str | int | None = None,\n    width: str | int | None = None,\n    loop: str | None = None,\n    muted: str | None = None,\n    playsinline: str | None = None,\n    poster: str | None = None,\n    preload: str | None = None,\n    class_: str | None = None,\n    id: str | None = None,\n    style: str | None = None,\n    **kwargs: AttributesType,\n) -&gt; None:\n    super().__init__(*children, **kwargs | locals_cleanup(locals()))\n</code></pre>"},{"location":"learn/","title":"Learn","text":"<p>Resources for learning the fundamentals of the Air web framework.</p> <ul> <li>Quickstart - Build and serve a minimal Air app. </li> <li>Tutorial - Learn the basics of building an Air app, including combining with a FastAPI app.</li> </ul>"},{"location":"learn/#concepts","title":"Concepts","text":"<p>Why and how Air works.</p> <ul> <li>Air Tags - An exploration of Air's Tag HTML generation system</li> <li>Escaping HTML - How Air handles escaping HTML to prevent XSS attacks</li> <li>Forms - How to create and validate forms in Air</li> <li>Jinja - How to use Jinja templates in Air</li> <li>Layouts - Tools for building layouts in Air along with two simple layout systems</li> <li>SQL - How to use SQL databases in Air apps</li> </ul>"},{"location":"learn/#cookbook","title":"Cookbook","text":"<p>A handy Air-themed list of recipes for common web app tasks.</p> <p>This section contains short recipes. See the topic pages for details:</p> <ul> <li>app.page decorator - how to use the <code>@app.page</code> decorator to quickly create web pages</li> <li>Authentication - how to handle login and authentication in your application</li> <li>Bigger applications - how to structure larger applications</li> <li>Charts - Examples of using charts in Air</li> <li>Minimal app - The smallest possible Air app</li> <li>Forms &amp; validation - how to create forms and validate user input</li> <li>Static files - how to serve static files like CSS and JavaScript</li> </ul> <p>If you'd like to contribute a recipe, open a PR with a new file under <code>docs/learn/cookbook</code>.</p>"},{"location":"learn/air_tags/","title":"Air Tags","text":"<p>Air Tags, sometimes shortened to Tags, are Python classes that render HTML. They can be combined to render web pages or small components. Air Tags are typed and documented, working well with any code completion tool. They are designed to be an easy to write and performant HTML content generation system using Python classes to render HTML.</p> <p>Note</p> <p>This document covers how Air Tags work. The full reference for them is the Air Tags reference.</p>"},{"location":"learn/air_tags/#how-air-tags-work","title":"How Air Tags work","text":"<p>Used individually or combined into a greater whole, every Air Tag includes a <code>render()</code> method. When the <code>render()</code> method is called it returns a HTML representation of the Air Tag, as well as all the children of the Air Tag.</p> <p>This example:</p> <pre><code>&gt;&gt;&gt; from air import Article, H1, P\n&gt;&gt;&gt; content = Article(\n    H1(\"Air Tags\"),\n    P(\"Air Tags are a fast, expressive way to generate HTML.\",\n        class_=\"subtitle\")\n)\n&gt;&gt;&gt; content\n&lt;air.Article(\"Defines an article\")&gt;\n</code></pre> <p>In constructing this example, the <code>Article</code> tag has wrapped the <code>H1</code> and <code>P</code> tags. You can't see that the <code>H1</code> and <code>P</code> tags are inside, but they have been carefully stored. </p> <p>This is the output of the <code>render()</code> method for the example above:</p> <pre><code>&gt;&gt;&gt; content.render()\n</code></pre> <pre><code>&lt;article&gt;&lt;h1&gt;Air Tags&lt;/h1&gt;&lt;p class=\"subtitle\"&gt;Air Tags are a fast, expressive way to generate HTML.&lt;/p&gt;&lt;/article&gt;\n</code></pre> <p>A shortcut for the <code>render()</code> method is the <code>str()</code> built-ins. </p> <pre><code>&gt;&gt;&gt; str(content)\n</code></pre> <pre><code>&lt;article&gt;&lt;h1&gt;Air Tags&lt;/h1&gt;&lt;p class=\"subtitle\"&gt;Air Tags are a fast, expressive way to generate HTML.&lt;/p&gt;&lt;/article&gt;\n</code></pre> <p>The <code>print()</code> built-in also does this conversion, but the result goes to <code>stdout</code>, so can't be saved to a variable.</p> <pre><code>&gt;&gt;&gt; print(content)\n</code></pre> <pre><code>&lt;article&gt;&lt;h1&gt;Air Tags&lt;/h1&gt;&lt;p class=\"subtitle\"&gt;Air Tags are a fast, expressive way to generate HTML.&lt;/p&gt;&lt;/article&gt;\n</code></pre> <p>Note</p> <p>When returned from an Air view this conversion to HTML happens automatically, much like how FastAPI automatically converts <code>dict</code> responses to JSON.</p>"},{"location":"learn/air_tags/#pretty-html-renders","title":"Pretty HTML renders","text":"<p>What if we want a more human-friendly display of HTML? We can use <code>.pretty_render()</code> method on any Air Tag:</p> <pre><code>&gt;&gt;&gt; print(content.pretty_render())\n</code></pre> <pre><code>&lt;article&gt;\n  &lt;h1&gt;Air Tags&lt;/h1&gt;\n  &lt;p class=\"subtitle\"&gt;Air Tags are a fast, expressive way to generate HTML.&lt;/p&gt;\n&lt;/article&gt;\n</code></pre> <p>Tip</p> <p>Combine Air Tag's <code>.pretty_render()</code> method with the rich package for truly lovely colorized output.</p>"},{"location":"learn/air_tags/#attributes","title":"Attributes","text":"<p>Air Tags convert keyword arguments into attributes. So:</p> <pre><code>air.P('Hello', id=\"mine\")\n</code></pre> <p>renders as:</p> <pre><code>&lt;p id=\"mine\"&gt;Hello&lt;/p&gt;\n</code></pre> <p>Lets take a look at some additional scenarios.</p>"},{"location":"learn/air_tags/#setting-the-class-attribute","title":"Setting the <code>class</code> attribute","text":"<p>In Python <code>class</code> is a protected word. To set the <code>class</code> attribute in Air Tags, use the <code>class_</code> keyword.</p> <pre><code>air.P('Hello', class_='plain')\n</code></pre> <p>renders as</p> <pre><code>&lt;p class=\"plain\"&gt;Hello&lt;/p&gt;\n</code></pre>"},{"location":"learn/air_tags/#setting-the-for-attribute","title":"Setting the <code>for</code> attribute","text":"<p>In Python <code>for</code> is a protected word. To set the <code>for</code> attribute in Air Tags, use the <code>for_</code> keyword.</p> <pre><code>air.Label(\n    'Email',\n    air.Input(name='email', type='email')\n    for_='email'\n)\n</code></pre> <p>renders as</p> <pre><code>&lt;label for=\"email\"&gt;Email&lt;input name=\"email\" type=\"email\"&gt;&lt;/label&gt;\n</code></pre>"},{"location":"learn/air_tags/#attributes-starting-with-special-characters","title":"Attributes starting with special characters","text":"<p>To get around that in Python we can't begin function arguments with special characters, we lean into how Air Tags is kwargs friendly.</p> <pre><code>air.P('Hello', class_='plain', **{'@data': 6})\n</code></pre> <p>Renders as:</p> <pre><code>&lt;p class=\"plain\" @data=\"6\"&gt;Hello&lt;/p&gt;\n</code></pre>"},{"location":"learn/air_tags/#single-word-attributes","title":"Single word attributes","text":"<p>To set or hide single word attributes like <code>@selected</code>, set the tag to <code>True</code> or <code>False</code> respectively.</p> <pre><code>air.Select(\n    air.Option('South America', value='SA', selected=True),\n    air.Option('North America', value='NA', selected=False)\n)\n</code></pre> <p>Renders as:</p> <pre><code>&lt;select&gt;\n    &lt;option selected value=\"SA\"&gt;South America&lt;/option&gt;\n    &lt;option value=\"NA\"&gt;North America&lt;/option&gt;\n&lt;/select&gt;\n</code></pre> <p>Note</p> <p>For the sake of clarity this example was rendered using <code>print(content.pretty_render())</code>.</p> <p>If you need a value set to <code>true</code>, use <code>\"true\"</code> in Python. For example:</p> <pre><code>air.P(\"Air makes FastAPI web pages easy\", draggable=\"true\")\n</code></pre> <p>Renders as:</p> <pre><code>&lt;p draggable=\"true\"&gt;Air makes FastAPI web pages easy&lt;/p&gt;\n</code></pre>"},{"location":"learn/air_tags/#works-well-with-svgs","title":"Works well with SVGs","text":"<p>Unlike HTML, SVG tags are case-sensitive. You can access SVG tags by importing them from the <code>air.svg</code> module. Here's a simple example:</p> <pre><code>from air import svg\n\nsvg.Svg(\n    svg.Circle(cx='50', cy='50', r='40', fill='blue'),\n    width='100',\n    height='100'\n)\n</code></pre> <p>This will render the following SVG:</p> <pre><code>&lt;svg width=\"100\" height=\"100\"&gt;\n  &lt;circle fill=\"blue\" cx=\"50\" cy=\"50\" r=\"40\"&gt;&lt;/circle&gt;\n&lt;/svg&gt;\n</code></pre> <p>Note</p> <p>For the sake of clarity this example was rendered using <code>print(content.pretty_render())</code>.</p>"},{"location":"learn/air_tags/#custom-air-tags","title":"Custom Air Tags","text":"<p>The best way to define your own Air Tags is to subclass the <code>air.Tag</code> class. Here's a simple example:</p> <pre><code>from air import Tag\n\nclass Tasty(Tag):\n    pass\n</code></pre> <p>Let's instantiate this class and call its <code>render()</code> method:</p> <pre><code>Tasty('Ice Cream', class_='dessert').render()\n</code></pre> <p>This will produce the following HTML:</p> <pre><code>&lt;tasty class=\"desert\"&gt;Ice Cream&lt;/tasty&gt;\n</code></pre>"},{"location":"learn/air_tags/#functions-as-custom-air-tags","title":"Functions as Custom Air Tags","text":"<p>Subclasses are not the only way to create custom Air Tags. You can also use functions to create Air Tags. This is particularly useful for putting together components quickly without needing to define a class. Here's an example of a function that creates a custom Air Tag for a picocss card:</p> <pre><code>def card(*content, header:str, footer:str):\n    return air.Article(\n        air.Header(header),\n        *content,\n        air.Footer(footer)\n    )\n</code></pre> <p>We can use this function to create a card:</p> <pre><code>card(\n    air.P(\"This is a card with some content.\"),\n    air.P(\"It can have multiple paragraphs.\"),\n    header=\"Card Header\",\n    footer=\"Card Footer\",\n).render()\n</code></pre> <p>Which produces the following HTML:</p> <pre><code>&lt;article&gt;\n    &lt;header&gt;Card Header&lt;/header&gt;\n    &lt;p&gt;This is a card with some content.&lt;/p&gt;\n    &lt;p&gt;It can have multiple paragraphs.&lt;/p&gt;\n    &lt;footer&gt;Card Footer&lt;/footer&gt;\n&lt;/article&gt;\n</code></pre> <p>Note</p> <p>For the sake of clarity this example was rendered using <code>print(card(...).pretty_render())</code>.</p>"},{"location":"learn/air_tags/#returning-multiple-children-used-in-htmx","title":"Returning Multiple Children (used in HTMX)","text":"<p>When using HTMX to add reactivity to pages, it is common to return several Air Tags so that HTMX can then replace existing DOM elements with new ones. Air Tags are hierarchical, you need a base tag that just serves as a wrapper that doesn't generate any HTML. That tag is the <code>air.Tags</code>. Here's how to use it:</p> <pre><code>import\n\n@app.post('/cart/add/{product_id}/')\ndef update_cart(request: air.Request, product_id: int):\n    \"This is a simplified update cart view\"\n    # air.Tags renders the child tags without adding anything of its own\n    return air.Tags(\n        # Mark that an item has been added to the cart\n        Button('Added!', hx_post='/cart/add/{{product.id}}', hx_swap_oob='true', id='add-button'),\n\n        # Cart icon quantity changed\n        A(f'Cart {count}', id='cart-icon', href='/cart', hx_trigger='polling 30s', hx_get='/cart-icon', hx_swap_oob='true'),\n    )\n</code></pre> <p>This will generate HTML that looks something like this, without any wrapping text around the elements we are passing to the user's browser:</p> <pre><code>&lt;!-- Mark that an item has been added to the cart --&gt;\n&lt;button\n    hx-post=\"/cart/add/35\"\n    hx-swap-oob=\"true\"\n    id=\"add-button\"\n    &gt;Added!&lt;/button&gt;\n&lt;!-- Cart icon quantity changed --&gt;\n&lt;a id=\"cart-icon\" href=\"/cart\"\n    hx-trigger=\"polling 30s\" hx-get=\"/cart-icon\" hx-swap-oob=\"true\"\n     &gt;Cart 2&lt;/a&gt;\n</code></pre>"},{"location":"learn/air_tags/#converting-html-to-air-tags","title":"Converting HTML to Air Tags","text":"<p>The easiest way to do that is with the air-convert package.</p> <pre><code>pip install air-convert\n</code></pre> <pre><code>from air_convert import html_to_airtags\nhtml_to_airtags(\"\"\"\n&lt;html&gt;\n    &lt;body&gt;\n        &lt;main&gt;\n            &lt;h1 class=\"header\"&gt;Hello, World&lt;/h1&gt;\n        &lt;/main&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\"\"\")\n</code></pre> <p>This generates:</p> <pre><code>air.Html(\n    air.Body(\n        air.Main(\n            air.H1('Hello, World', class_='header')\n        )\n    )\n)\n</code></pre> <p>Removal of the <code>air.</code> prefix is done with the <code>air_prefix</code> boolean:</p> <pre><code>html = \"\"\"\n&lt;html&gt;\n    &lt;body&gt;\n        &lt;main&gt;\n            &lt;h1 class=\"header\"&gt;Hello, World&lt;/h1&gt;\n        &lt;/main&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\"\"\"\nprint(air.html_to_airtags(html, air_prefix=False))\n</code></pre> <p>This will generate:</p> <pre><code>Html(\n    Body(\n        Main(\n            H1('Hello, World', class_='header')\n        )\n    )\n)\n</code></pre>"},{"location":"learn/escaping_html/","title":"Escaping HTML","text":"<p>Escaping HTML is where text is converted from tags and script that will interact with the DOM to representations of those things. For example:</p> <p>Unscaped HTML:</p> <pre><code>&lt;h1&gt;Hello, World!&lt;/h1&gt;\n</code></pre> <p>Escaped HTML:</p> <pre><code>&amp;lt;h1&amp;gt;Hello, World!&amp;lt;/h1&amp;gt;\n</code></pre> <p>This is useful for preventing security issues like code injection by malignant users who have access to text fields that display text they enter. Escaping blocks the addition of tags, JavaScript, and CSS.</p>"},{"location":"learn/escaping_html/#jinja2-doesnt-play-it-safe","title":"Jinja2 doesn't play it safe","text":"<p>By default, Jinja2 escapes nothing. It puts the burden of safety on the developer. To make Jinja2 escape text, use the <code>e</code> filter.</p> <pre><code>{% set h1 = '&lt;h1&gt;Hello, World!&lt;/h1&gt;' %}\n{{ h1|e }}\n</code></pre>"},{"location":"learn/escaping_html/#jinja2-not-playing-it-safe-isnt-a-bad-thing","title":"\"Jinja2 not playing it safe  isn't a bad thing\"","text":"<p>We want to make it clear that Jinja2 not playing it safe isn't wrong. It can expedite development. However, it is important to note that the default can open the door to trouble. The design of Jinja2 accomodates this by making the <code>e</code> filter be so short - so it is easy and quick to use.</p>"},{"location":"learn/escaping_html/#air-tags-plays-it-safe","title":"Air Tags plays it safe","text":"<p>In contrast, by default Air Tags escapes everything.</p> <pre><code>air.H1(\"&lt;h1&gt;Hello, World!&lt;/h1&gt;\")\n</code></pre> <p>renders as:</p> <pre><code>&amp;lt;h1&amp;gt;Hello, World!&amp;lt;/h1&amp;gt;\n</code></pre> <p>To provide unescaped code, Air Tags provides three options: the <code>Style</code>, <code>Script</code>, and <code>Raw</code> tags - which are described below.</p>"},{"location":"learn/escaping_html/#style-unescaped-css","title":"<code>Style</code>: Unescaped CSS","text":"<p>To avoid escaping CSS, use the <code>Style</code> tag:</p> <pre><code>air.Style(\"\"\"\np {\n  font-size: 1.2rem;\n  line-height: 1.6;\n  color: #333;\n  max-width: 60ch;\n  margin: 1em auto;\n}\n\"\"\")\n</code></pre> <p>Renders as:</p> <pre><code>&lt;style&gt;\np {\n  font-size: 1.2rem;\n  line-height: 1.6;\n  color: #333;\n  max-width: 60ch;\n  margin: 1em auto;\n}\n&lt;/style&gt;\n</code></pre>"},{"location":"learn/escaping_html/#script-unescaped-javascript","title":"<code>Script</code>: Unescaped JavaScript","text":"<p>To avoid escaping JavaScript, use the <code>Script</code> tag:</p> <pre><code>air.Script(\"\"\"\nfunction capitalize(str) {\n  if (!str) return '';\n  return str[0].toUpperCase() + str.slice(1);\n}\n\"\"\")\n</code></pre> <p>Renders as:</p> <pre><code>&lt;script&gt;\nfunction capitalize(str) {\n  if (!str) return '';\n  return str[0].toUpperCase() + str.slice(1);\n}\n&lt;/script&gt; \n</code></pre>"},{"location":"learn/escaping_html/#raw-unescaped-text","title":"<code>Raw</code>: Unescaped text","text":"<p>To avoid escaping anything and everything, use the <code>Raw</code> tag:</p> <pre><code>air.Raw(\"&lt;h1&gt;Hello, World&lt;h1&gt;\")\n</code></pre> <p>Renders as:</p> <pre><code>&lt;h1&gt;Hello, World&lt;h1&gt;\n</code></pre>"},{"location":"learn/forms/","title":"Forms","text":"<p>Forms are how data is collected from users on web pages.</p>"},{"location":"learn/forms/#note","title":"Note","text":"<p>This document covers how Forms work. The full reference for them is the Forms reference.</p>"},{"location":"learn/forms/#a-simple-form-example","title":"A simple form example","text":"<p>This contact form is in the classic Starlette way, with no validation of data. However, it does show a method to build forms quickly.</p> <pre><code>import air\n\napp = air.Air()\n\n@app.page\ndef index():\n    return air.layouts.mvpcss(\n        air.Title(\"Contact Form\"),\n        air.H1(\"Contact Form\"),\n        air.Article(\n            air.Form(\n                air.Label(\"Email\", air.Input(name=\"email\", type=\"email\"), for_=\"Email\"),\n                air.Label(\n                    \"Name\",\n                    air.Input(name=\"name\"),\n                ),\n                air.Button(\"submit\", type=\"submit\"),\n                action=\"/add-contact\",\n                method=\"post\",\n            )\n        ),\n    )\n\n@app.post(\"/add-contact\")\nasync def add(request: air.Request):\n    form = await request.body()\n    return air.layouts.mvpcss(\n        air.Title(\"Contact Form Result\"),\n        air.H1(\"Contact Form Result\"),\n        air.Pre(air.Code(form)),\n    )\n</code></pre>"},{"location":"learn/forms/#air-forms","title":"Air Forms","text":"<p>Air Forms are powered by Pydantic. That includes both their display and validation of data. If you have any experience with Pydantic, that will go a long way towards helping your understanding of Air Forms.</p>"},{"location":"learn/forms/#a-sample-contact-air-form","title":"A Sample Contact Air Form","text":"<pre><code>from pydantic import BaseModel, Field\nfrom air import AirForm, AirField\n\nclass ContactModel(BaseModel):\n    name: str\n    email: str = AirField(type=\"email\", label=\"Email\")\n\nclass ContactForm(AirForm):\n    model = ContactModel\n\n\ncontact_form = ContactForm()\n</code></pre>"},{"location":"learn/forms/#displaying-an-air-form","title":"Displaying an Air Form","text":"<pre><code>contact_form.render()\n</code></pre> <pre><code>&lt;fieldset&gt;\n    &lt;label&gt;name\n        &lt;input name=\"name\" type=\"text\" id=\"name\" /&gt;\n    &lt;/label&gt;\n    &lt;label&gt;Email\n        &lt;input name=\"email\" type=\"email\" id=\"email\" /&gt;\n    &lt;/label&gt;\n&lt;/fieldset&gt;\n</code></pre>"},{"location":"learn/forms/#validation-using-forms","title":"Validation using forms","text":"<pre><code># This empty dict represents a user who submitted without adding data\nempty_form = {}\ncontact_form.validate(empty_form)\n</code></pre>"},{"location":"learn/forms/#displaying-a-failed-form","title":"Displaying a failed form","text":"<pre><code>contact_form.render()\n</code></pre> <pre><code>&lt;fieldset&gt;\n    &lt;label&gt;\n        name\n        &lt;input name=\"name\" type=\"text\" id=\"name\" aria-invalid=\"true\" /&gt;\n        &lt;small id=\"name-error\"&gt;Please correct this error.&lt;/small&gt;\n    &lt;/label&gt;\n    &lt;label&gt;\n        Email\n        &lt;input name=\"email\" type=\"email\" id=\"email\" aria-invalid=\"true\" /&gt;\n        &lt;small id=\"email-error\"&gt;Please correct this error.&lt;/small&gt;\n    &lt;/label&gt;\n&lt;/fieldset&gt;\n</code></pre>"},{"location":"learn/jinja/","title":"Using Jinja with Air","text":"<p>We love Jinja. Proven and fast, its our go-to for when we want to manually craft templates containing programmatic content. To that end, we've ensured Air works great at combining Jinja and Air Tags together.</p> <p>Note</p> <p>This document covers the concepts and how Jinja2 works in Air. The full reference for the tooling can be found at the Templates API Reference.</p> <p>Jinja or Jinja2?</p> <p>While the package is listed on PyPI as Jinja2, that package and the official Jinja docs refers to Jinja as just \"Jinja\". Also, Jinja was released in 2008 and is well into the 3.x release cycle. If we want to lean into pedantry, we are arguably using Jinja 5 (base plus major releases cycles of 0.x, 1.x, 2.x, and 3.x).</p> <p>Most importantly, it is the intent of the maintainer of Jinja to not only document the package as 'Jinja' but to even provide a <code>jinja</code> namespace in addition to <code>jinja2</code>.</p> <p>In short, to match the Jinja documentation and the intent of the maintainer, in the Air documentation we use the term \"Jinja\".</p>"},{"location":"learn/jinja/#using-jinja-for-the-html-layout","title":"Using Jinja for the HTML Layout","text":"<p>Air Tags are powerful but for those of us with a lot of experience with HTML, sometimes its easy to construct layouts using Jinja. As it is closer in look-and-feel to HTML for some of us that makes ensuring the end result looks good is easier.</p> <p>Here's a simple Jinja layout file:</p> templates/base.html<pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;link\n            rel=\"stylesheet\"\n            href=\"https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css\" /&gt;\n        &lt;script\n            src=\"https://cdn.jsdelivr.net/npm/htmx.org@2.0.6/dist/htmx.min.js\" \n            integrity=\"sha384-Akqfrbj/HpNVo8k11SXBb6TlBWmXXlYQrCSqEWmyKJe+hDm3Z/B2WVG4smwBkRVm\"\n            crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n        &lt;title&gt;{{title}}&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;  \n        &lt;main class=\"container\"&gt;\n        {# We need to safe the content, which can be \n            a security risk. We'll cover mitigation\n            of such issues later on this page.\n        #}\n        {{content|safe}}\n        &lt;/main&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>If you've used Jinja before this should look familiar. Now let's add in our Air Tags-powered content, which we'll do from the view.</p> main.py<pre><code>import air\n\napp = Air()\n\n# Set the Jinja render function\njinja = air.JinjaRenderer(directory=\"tests/templates\")\n\n@app.get('/')\ndef index(request: Request):\n    content = air.Main(\n        air.h2('Does Jinja work with Air Tags?')\n        air.P(\"Jinja works great with Air Tags\")\n    )\n    return jinja(\n        request,\n        name=\"base.html\",\n        title=\"FAQ\",\n        content=content,\n    )\n</code></pre> <p>When run, this will look like this:</p> <p>TODO: ADD SCREEN CAPTURE</p>"},{"location":"learn/jinja/#why-dont-we-call-the-jinja-function-render","title":"Why don't we call the <code>jinja()</code> function <code>render()</code>?","text":"<p>Because Air uses <code>.render()</code> as a method name in a lot of places, especially with Air Tags. So even though <code>render()</code> instead of <code>jinja()</code> is more semantically correct, to avoid confusion and collision, we use <code>jinja2()</code> instead.</p>"},{"location":"learn/layouts/","title":"Layouts","text":"<p>Layouts in Air provide a way to structure complete HTML documents without the repetitive boilerplate. Air's layout system automatically handles the separation of head and body content and makes it easy to create your own custom layouts.</p>"},{"location":"learn/layouts/#note","title":"Note","text":"<p>This document covers how Layouts work. The full reference for them is the Layouts reference.</p>"},{"location":"learn/layouts/#understanding-airs-layout-philosophy","title":"Understanding Air's Layout Philosophy","text":"<p>Air's layout functions automatically sort your tags into the right places using intelligent filtering.  This allows you eliminate repetitive <code>air.Html</code>, <code>air.Body</code>, and <code>air.Head</code> boilerplate.</p> <pre><code># Verbose Way\nair.Html(\n    air.Head(\n        air.Title(\"My App\"),\n        air.Link(rel=\"stylesheet\", href=\"style.css\")\n    ),\n    air.Body(\n        air.H1(\"Welcome\"),\n        air.P(\"Content here\")\n    )\n)\n\n# Air Layouts\nair.layouts.mvpcss(\n    air.Title(\"My App\"),           # Automatically goes to &lt;head&gt;\n    air.Link(rel=\"stylesheet\", href=\"style.css\"),  # Also goes to &lt;head&gt;\n    air.H1(\"Welcome\"),             # Goes to &lt;body&gt;\n    air.P(\"Content here\")          # Also goes to &lt;body&gt;\n    )\n</code></pre>"},{"location":"learn/layouts/#the-tag-filtering-system","title":"The Tag Filtering System","text":"<p>Air layouts use two core functions to organize content:</p> <ul> <li><code>filter_head_tags</code>: Returns only tags in <code>(Title, Style, Meta, Link, Script, Base)</code></li> <li><code>filter_body_tags</code>: Returns all tags except <code>(Title, Style, Meta, Link, Script, Base)</code></li> </ul>"},{"location":"learn/layouts/#why-this-matters","title":"Why This Matters","text":"<p>This automatic separation means you can focus on your content and let Air handle the document structure:</p> <pre><code>@app.get(\"/\")\ndef home():\n    return air.layouts.mvpcss(\n        # Mix head and body tags freely - Air sorts them\n        air.Title(\"Dashboard\"),\n        air.H1(\"Welcome to the Dashboard\"),\n        air.Meta(name=\"description\", content=\"User dashboard\"),\n        air.P(\"Your stats here\"),\n        air.Script(src=\"dashboard.js\")\n    )\n</code></pre> <p>Air transforms this into proper HTML structure automatically.</p>"},{"location":"learn/layouts/#built-in-minimal-layouts","title":"Built-in Minimal Layouts","text":"<p>Air provides minimal ready-to-use layouts for rapid prototyping, <code>mvpcss</code> and <code>picocss</code> for MVP.css and PicoCSS respectively.  They both work and are used in the exact same way.</p> <pre><code>import air\n\n@app.get(\"/\")\ndef home():\n    return air.layouts.picocss( # or mvpcss\n        air.Title(\"My App\"),\n        air.H1(\"Welcome\"),\n        air.P(\"This automatically looks great!\"),\n        air.Button(\"Get Started\")\n    )\n</code></pre> <p>What you get:</p> <ul> <li>MVP.css styling or PicoCSS</li> <li>HTMX included by default for interactivity</li> <li>Container wrapper for proper spacing</li> </ul> <p>Perfect for:</p> <ul> <li>Prototypes and demos</li> <li>Internal tools and dashboards</li> <li>Quick proofs of concept</li> <li>Learning Air basics</li> </ul>"},{"location":"learn/layouts/#beyond-built-in-layouts","title":"Beyond Built-in Layouts","text":"<p>The included layouts are designed for quick prototyping, not production commercial applications.  Custom layouts give you complete control while preserving Air's automatic tag filtering benefits.</p> <p>Here's the foundational pattern for any Air layout:</p> <pre><code>import air\n\ndef my_layout(*children, **kwargs):\n    \"\"\"My custom layout function.\"\"\"\n    # 1. Separate head and body content\n    head_tags = air.layouts.filter_head_tags(children)\n    body_tags = air.layouts.filter_body_tags(children)\n\n    # 2. Build your custom structure\n    return air.Html(\n        air.Head(\n            # Your custom head content\n            ...\n            *head_tags  # User's head tags\n        ),\n        air.Body(\n            # Your custom body structure\n            ... # Header content\n            air.Main(*body_tags),  # User's body content\n            ... # Footer Content\n        ),\n    ).render()\n</code></pre> <p>Key principles:</p> <ol> <li>Always filter tags using Air's helper functions</li> <li>Use <code>*head_tags</code> and <code>*body_tags</code> to include user content</li> <li>Return <code>.render()</code> to get the final HTML string</li> </ol>"},{"location":"learn/quickstart/","title":"Quickstart","text":"<p>The TL;DR for getting started with Air.</p>"},{"location":"learn/quickstart/#installation","title":"Installation","text":"<p>To start a new Air project, create a directory and set up your environment:</p> <pre><code>mkdir helloair\ncd helloair\nuv venv\nsource .venv/bin/activate\nuv init\nuv add \"air[standard]\"\n</code></pre> <p>[!TIP] You can also do <code>pip install -U air</code> or <code>conda install air -c conda-forge</code>, and similar for fastapi[standard], in any project directory.</p>"},{"location":"learn/quickstart/#hello-air-example","title":"Hello, Air! Example","text":"<p>Create a <code>main.py</code> file in your new directory with:</p> <pre><code>import air\n\napp = air.Air()\n\n@app.get(\"/\")\nasync def index():\n    return air.layouts.mvpcss(\n        air.H1(\"Hello, Air!\"),\n        air.P(\"Breathe it in.\")\n    )\n</code></pre> <p>Serve your app with:</p> <pre><code>fastapi dev\n</code></pre> <p>Open your page by clicking this link: http://localhost:8000/</p> <p>Here's a few interesting things about this page:</p> <ol> <li>The page has an attractive layout and typography</li> <li>The Python for this app is similar in design to how FastAPI code is written</li> <li>If you typed the code out in an IDE with intellisense, you'll have seen every Air object includes useful instruction. Air is designed to be friendly to both humans and LLMs, hence every object is carefully typed and documented</li> </ol> <p>Want to learn more? Want to see how Air combines with FastAPI? Try out the tutorial!</p>"},{"location":"learn/sql/","title":"SQL","text":"<p>This feature is for Air 0.28.0 or later.</p> <p>air.ext.sql</p> <p>The SQL support in Air is provided by the <code>air.ext.sql</code> module, which is an optional extension. To use it, you need to install Air with the <code>sql</code> extra:</p> <pre><code>pip install \"air[sql]\"\n</code></pre> <p>The full reference for the tooling can be found at the SQL API Reference.</p> <p>Thanks to the power of SQLModel and SQLAlchemy Air works with relational databases. Right now it just supports PostgreSQL and SQLite. Fortunately the project will soon expand to support all relational databases that allow for asynchronous connections through SQLAlchemy. </p>"},{"location":"learn/sql/#air-loves-sqlmodel","title":"Air loves SQLModel","text":"<p>SQLModel is a wrapper around the venerable and proven SQLAlchemy library. Like Typer, FastAPI, pydantic, and Air, SQLModel allows for definition of critical objects with type annotations - in this case database tables. SQLModel makes SQLAlchemy a bit easier to use, although it's possible to drop down to the raw power of SQLAlchemy at any time.</p> <p>Using Air's SQL module requires an understanding of SQLModel. Fortunately, it's an easy library to learn.</p>"},{"location":"learn/sql/#configuring-air-for-sql","title":"Configuring Air for SQL","text":"<p>While not strictly required, it's highly recommended to use the <code>DATABASE_URL</code> environment variable to configure your database connection. This is a common convention used by many web frameworks and libraries.</p> <p>To ensure the database remains connected to Air, we configure a <code>lifespan</code> function, and pass that to the Air app upon instantiation. If you don't do this, then the connection will eventually expire and your application will start throwing errors.</p> <p>So when instantiating your project's root 'app':</p> main.py<pre><code>import air\n\napp = air.Air(lifespan=air.ext.sql.async_db_lifespan)\n</code></pre>"},{"location":"learn/sql/#making-sql-queries-inside-air-views","title":"Making SQL Queries inside Air Views","text":"<p>Most of the time, you'll be using SQLModel inside your Air views. The easiest way to do this is to use the <code>air.ext.sql.async_session_dependency</code> dependency, which requires that the <code>DATABASE_URL</code> environment variable be set. This will provide you with an asynchronous session connected to your database.</p> main.py<pre><code>import air\nsql = air.ext.sql\n\napp = air.Air(lifespan=air.ext.sql.async_db_lifespan)\n\n@app.page\nasync def index(request: Request, session: sql.AsyncSession = air.Depends(sql.async_session_dependency)):\n    # Use the session to interact with the database\n    result = await session.execute(select(User).where(User.name == \"John\"))\n    user = result.scalars().first()\n\n    return air.Main(\n        air.H1(\"User Info\"),\n        air.P(f\"Name: {user.name}\"),\n        air.P(f\"Email: {user.email}\"),\n    )\n</code></pre>"},{"location":"learn/sql/#making-sql-queries-outside-air-views","title":"Making SQL Queries outside Air Views","text":"<p>Sometimes you may want to make SQL queries outside of Air views, for example in background tasks or other parts of your application. In these cases, you can use the <code>air.ext.sql.get_async_session</code> function to get an asynchronous session.</p> tasks.py<pre><code>import air\nsql = air.ext.sql\n\nasync def some_background_task():\n    async with sql.get_async_session() as session:\n        result = await session.execute(select(User).where(User.active == True))\n        active_users = result.scalars().all()\n        # Do something with active_users\n</code></pre>"},{"location":"learn/tutorial/","title":"Tutorial","text":"<p>Welcome! If you're looking to build a modern web app that combines beautiful HTML pages with a powerful REST API, you're in the right place. Air is a friendly layer over FastAPI, making it easy to create both interactive sites and robust APIs\u2014all in one seamless app.</p> <p>Let's start by combining Air and FastAPI. With just a few lines of code, you can serve a homepage and an API side by side:</p> <pre><code>import air\nfrom fastapi import FastAPI\n\napp = air.Air()\napi = FastAPI()\n\n@app.get(\"/\")\ndef landing_page():\n    return air.layouts.mvpcss(\n        air.Head(air.Title(\"My Awesome Startup\")),\n        air.Body(\n            air.H1(\"My Awesome Startup\"),\n            air.P(air.A(\"API Docs\", target=\"_blank\", href=\"/api/docs\")),\n        ),\n    )\n\n@api.get(\"/\")\ndef api_root():\n    return {\"message\": \"My Awesome Startup is powered by FastAPI\"}\n\n# Bring it all together: mount your API under /api\napp.mount(\"/api\", api)\n</code></pre>"},{"location":"learn/tutorial/#todo","title":"TODO","text":"<p>Add the rest of this tutorial page.</p>"},{"location":"learn/tutorial/#want-to-learn-more","title":"Want to learn more?","text":"<p>Want to see a handy batch of recipes for doing things in Air? Check out the Air Cookbook!</p>"},{"location":"learn/cookbook/","title":"Cookbook","text":"<p>A handy Air-themed list of recipes for common web app tasks.</p> <p>This section contains short recipes. See the topic pages for details:</p> <ul> <li>app.page decorator - how to use the <code>@app.page</code> decorator to quickly create web pages</li> <li>Authentication - how to handle login and authentication in your application</li> <li>Bigger applications - how to structure larger applications</li> <li>Charts - Examples of using charts in Air</li> <li>Minimal app - The smallest possible Air app</li> <li>Forms &amp; validation - how to create forms and validate user inputs</li> <li>Static files - how to serve static files like CSS and JavaScript</li> </ul> <p>If you'd like to contribute a recipe, open a PR with a new file under <code>docs/cookbook</code>.</p>"},{"location":"learn/cookbook/authentication/","title":"Authentication","text":"<p>How to handle login and authentication in your application. It does not cover authorization, which is a separate topic covering what permissions a user has.</p>"},{"location":"learn/cookbook/authentication/#a-minimal-authentication-example","title":"A minimal authentication example","text":"<p>This first example shows how to create a password-less authentication flow using Air. This is a toy example that uses sessions to keep track of the logged-in user. In a real application, you would want to use a more secure method of authentication, with passwords or OAuth.</p> <pre><code>import air\nfrom time import time\n\napp = air.Air()\napp.add_middleware(air.SessionMiddleware, secret_key=\"change-me\")\n\n\n@app.page\nasync def index(request: air.Request):\n    if \"username\" in request.session:\n        # User is logged in provide a logout link\n        action = air.Tags(\n            air.H1(request.session[\"username\"]),\n            air.P(request.session.get(\"logged_in_at\")),\n            air.P(air.A(\"Logout\", href=\"/logout\")),\n        )\n    else:\n        # login the user\n        action = air.Form(\n            air.Label(\"Name:\", for_=\"username\"),\n            air.Input(type=\"text\", name=\"username\", id=\"username\", required=True, autofocus=True),\n            air.Button(\"Login\", type=\"submit\"),\n            action=\"/login\",\n            method=\"post\",\n        )\n    return air.layouts.mvpcss(action)\n\n\n@app.post(\"/login\")\nasync def login(request: air.Request):\n    form = await request.form()\n    if username := form.get(\"username\"):\n        # Create session\n        request.session[\"username\"] = username\n        request.session[\"logged_in_at\"] = time()\n\n    return air.responses.RedirectResponse(\"/\", status_code=302)\n\n\n@app.page\nasync def logout(request: air.Request):\n    request.session.pop(\"username\")\n    return air.responses.RedirectResponse(\"/\")\n</code></pre>"},{"location":"learn/cookbook/authentication/#authentication-with-dependencies","title":"Authentication with Dependencies","text":"<p>In Air and FastAPI apps we frequently rely on dependencies to handle authentication. Dependencies are a powerful way to share logic between different parts of your application. Here's a simple authentication dependency example:</p> <pre><code>import air\nfrom fastapi import HTTPException\n\ndef require_login(request: air.Request):\n    # Replace this with your actual login check\n    user = request.session.get(\"user\") if hasattr(request, \"session\") else None  \n\n    if not user:\n        # Redirect if not logged in\n        raise HTTPException(\n            status_code=307,\n            headers={\"Location\": \"/login\"},\n        )\n    return user\n</code></pre> <p>In Air, like FastAPI, session objects need to be serializable to JSON. That means you can't store complex objects like database models directly in the session. Instead, store simple identifiers (like user IDs) and fetch the full user details from your database as needed.</p> <p>Attaching this dependency to a route ensures that only authenticated users can access it. If a user is not authenticated, they will be redirected to the login page. Here's how you can use the <code>require_login</code> dependency in a route:</p> <pre><code>import air\n\nair = air.Air()\nair.add_middleware(air.SessionMiddleware\n\n# --- Dependency ---\ndef require_login(request: air.Request):\n    # Replace this with your actual login check\n    user = request.session.get(\"user\") if hasattr(request, \"session\") else None  \n\n    if not user:\n        # Redirect if not logged in\n        raise HTTPException(\n            status_code=307,\n            headers={\"Location\": \"/login\"},\n        )\n    return user\n\n# --- Routes ---\n@app.page\nasync def dashboard(request: air.Request, user=Depends(require_login)):\n    return air.layouts.mvpcss(\n        air.H1(f\"Dashboard for {request.session['user']['username']}\"),\n        air.P(air.A('Logout', href='/logout'))\n    )\n</code></pre> <p>Here's a more complete example that includes a login page, a protected dashboard page, and logout functionality using the <code>require_login</code> dependency:</p> <pre><code>import air\nfrom fastapi import Depends, HTTPException\n\napp = air.Air()\napp.add_middleware(air.SessionMiddleware, secret_key=\"change-me\")\n\n# --- Dependency ---\ndef require_login(request: air.Request):\n    # Replace this with your actual login check\n    user = request.session.get(\"user\") if hasattr(request, \"session\") else None  \n\n    if not user:\n        # Redirect if not logged in\n        raise HTTPException(\n            status_code=307,\n            headers={\"Location\": \"/login\"},\n        )\n    return user\n\n# --- Routes ---\n@app.page\nasync def index(request: air.Request):\n    return air.layouts.mvpcss(\n        air.H1('Landing page'),\n        air.P(air.A('Dashboard', href='/dashboard'))\n    )    \n\n@app.page\nasync def login():\n    return air.layouts.mvpcss(\n        air.H1('Login'),\n        # login the user\n        air.Form(\n            air.Label(\"Name:\", for_=\"username\"),\n            air.Input(type=\"text\", name=\"username\", id=\"username\", required=True, autofocus=True),\n            air.Label(\"Password:\", for_=\"password\"),\n            air.Input(type=\"password\", name=\"password\", id=\"password\", required=True, autofocus=True),            \n            air.Button(\"Login\", type=\"submit\"),\n            action=\"/login\",\n            method=\"post\",\n        )    \n    )\n\n\n@app.page\nasync def dashboard(request: air.Request, user=Depends(require_login)):\n    return air.layouts.mvpcss(\n        air.H1(f\"Dashboard for {request.session['user']['username']}\"),\n        air.P(air.A('Logout', href='/logout'))\n    )\n\n@app.post('/login')\nasync def login(request: air.Request):\n    form = await request.form()\n    request.session['user'] = dict(username=form.get('username'))\n    return air.RedirectResponse('/dashboard', status_code=303)\n\n@app.page\nasync def logout(request: air.Request):\n    request.session.pop('user')\n    return air.RedirectResponse('/', status_code=303)\n</code></pre>"},{"location":"learn/cookbook/bigger-applications/","title":"Bigger Applications","text":"<p>When building larger applications with Air, you may find yourself needing to organize your code better, manage multiple routes, or even mount different applications together. This guide will help you understand how to structure your Air applications for scalability and maintainability.</p>"},{"location":"learn/cookbook/bigger-applications/#mounting-air-apps-inside-air-apps","title":"Mounting Air apps inside Air apps","text":"<p>One of the really nice features of Air is the ability to mount apps inside each other. This allows you to create modular applications where different parts of your app can be developed and maintained independently. To do this, we lean on Starlette's <code>mount</code> functionality that Air inherits through FastAPI.</p> <pre><code>import air\n\n# Create the main app, which serves as the entry point\napp = air.Air(title='Air')\n\n@app.page\ndef index():\n    return air.layouts.mvpcss(\n        air.H1('Air landing page'),\n        air.P(air.A('Shop', href='/shop'))\n    )\n\n# Creating a seperate app for the shop,\n# which could be placed in a different file\nshop = air.Air(title='Air shop')\n\n@shop.page\ndef index():\n    return air.layouts.mvpcss(\n        air.H1('Shop for Air things')\n    )\n\n# Mount the shop app to the main app\n# This allows you to access the shop at /shop\napp.mount('/shop', shop)\n</code></pre>"},{"location":"learn/cookbook/bigger-applications/#mounting-fastapi-inside-of-air-apps","title":"Mounting FastAPI inside of Air apps","text":"<p>You can easily mount a FastAPI app inside an Air app. A common scenario is to have a FastAPI app that serves an API, while your main Air app serves the landing, billing, and usage frontends. </p> <pre><code>import air\nfrom fastapi import FastAPI\n\n#\u00a0Create the landing page app using Air\napp = air.Air()\n\n@app.get(\"/\")\ndef landing_page():\n    return air.Html(\n        air.Head(air.Title(\"Awesome SaaS\")),\n        air.Body(\n            air.H1(\"Awesome SaaS\"),\n            air.P(air.A(\"API Docs\", target=\"_blank\", href=\"/api/docs\")),\n        ),\n    )\n\napi = FastAPI()\n\n@api.get(\"/\")\ndef api_root():\n    return {\"message\": \"Awesome SaaS is powered by FastAPI\"}\n\n# Combining the Air and and FastAPI apps into one\napp.mount(\"/api\", api)\n</code></pre>"},{"location":"learn/cookbook/bigger-applications/#mounting-fastapi-apps-inside-each-other","title":"Mounting FastAPI apps inside each other","text":"<p>Mounting one FastAPI app is outside the scope of this guide. We recommend reading FastAPI's Bigger Application reference. </p>"},{"location":"learn/cookbook/charts/","title":"Charts","text":"<p>Air is great for building charts. Using plotly, here's a simple chart example.</p> <pre><code>import air\nimport json\n\napp = air.Air()\n\n\n@app.get(\"/\")\ndef index():\n    title = \"Air Chart Demo\"\n    data = json.dumps(\n        {\n            \"data\": [\n                {\"x\": [0, 4, 5, 7, 8, 10], \"y\": [2, 9, 0, 4, 3, 6], \"type\": \"scatter\"},\n                {\"x\": [0, 1, 2, 4, 8, 10], \"y\": [9, 2, 4, 3, 5, 0], \"type\": \"scatter\"},\n            ],\n            \"title\": \"Fun charts with Plotly and Air\",\n            \"description\": \"This is a demonstration of how to build a chart using Plotly and Air\",\n            \"type\": \"scatter\",\n        }\n    )\n    return air.layouts.mvpcss(\n        air.Script(src=\"https://cdn.plot.ly/plotly-3.0.1.min.js\"),\n        air.Title(title),\n        air.H1(title),\n        air.Article(\n            air.P(\n                \"Made with \",\n                air.A(\"Air\", href=\"https://github.com/feldroy/air\"),\n                \" and \",\n                air.A(\"Plotly\", href=\"https://plotly.com/javascript/\"),\n            ),\n            air.Div(id=\"chart\"),\n            air.Script(f\"var data = {data}; Plotly.newPlot('chart', data);\"),\n        ),\n    )\n</code></pre> <p>Air makes it possible to build charts that pull data from servers and animate the results. Here's an example being supplied with random numbers for the Air server.</p> <pre><code>air.Children(\n    air.Div(id=\"randomChart\"),\n    air.Script(\"\"\"\n        var data = {\"data\": [{\"x\": [0, 4, 5, 7, 8, 10], \"y\": [2, 9, 0, 4, 3, 6], \"type\": \"scatter\"}, {\"x\": [0, 1, 2, 4, 8, 10], \"y\": [9, 2, 4, 3, 5, 0], \"type\": \"scatter\"}], \"title\": \"Fun charts with Plotly and Air\", \"description\": \"This is a demonstration of how to build a chart using Plotly and Air\", \"type\": \"scatter\"};\n        Plotly.newPlot('randomChart', data);\"\"\",\n        # ID is used to help HTMX know where to replace data\n        id=\"dataSource\",\n        # Trigger HTMX to call new data every 2 seconds\n        hx_trigger=\"every 2s\",\n        # Use HTMX to fetch new info from the /data route\n        hx_get=\"/data\",\n        # When the data is fetched, replace the whole tag\n        hx_swap=\"outerHTML\",\n    )\n)\n</code></pre>"},{"location":"learn/cookbook/checklist/","title":"Cookbook checklist","text":"<p>All the things that may go into this page:</p> <ul> <li>[ ] Mounting static files</li> <li>[ ] Mounting with a FastAPI app</li> <li>[ ] File uploads</li> <li>[ ] SSE</li> <li>[ ] Web sockets</li> <li>[ ] Charts with plotly</li> <li>[ ] Debug mode</li> <li>[ ] Routing</li> <li>[ ] Using layouts</li> <li>[ ] Making your own layout</li> <li>[ ] Adding markdown</li> <li>[ ] Defining components (function-based tags, class-based tags)</li> <li>[ ] Custom exception handlers</li> <li>[ ] Cookies</li> <li>[ ] Sessions</li> <li>[ ] Authentication</li> <li>[ ] Redirects</li> </ul>"},{"location":"learn/cookbook/forms/","title":"Forms &amp; validation","text":"<p>Built on Pydantic's <code>BaseModel</code>, the <code>air.AirForm</code> class is used to validate data coming from HTML forms.</p> <pre><code>from typing import Annotated\nfrom fastapi import Depends, Request\nfrom pydantic import BaseModel, Field\nimport air\n\napp = air.Air()\n\nclass FlightModel(BaseModel):\n    flight_number: str = Field(..., min_length=1)\n    destination: str = Field(..., min_length=1)\n\nclass FlightForm(air.AirForm):\n    model = FlightModel\n\n@app.page\nasync def index():\n    return air.layouts.mvpcss(\n        air.H1(\"Flight Form\"),\n        air.Form(\n            air.Input(name=\"flight_number\", placeholder='flight number'),\n            air.Input(name=\"destination\", placeholder='destination'),\n            air.Button(\"Submit\", type=\"submit\"),\n            method=\"post\",\n            action=\"/flight-info\",\n        ),\n    )\n\n@app.post(\"/flight-info\")\nasync def flight_info(request: Request):\n    flight = await FlightForm.from_request(request)\n    if flight.is_valid:\n        return air.Html(air.H1(f'{flight.data.flight_number} \u2192 {flight.data.destination}'))\n    return air.Html(\n        air.H1(\"Errors\"),\n        air.Ul(*[\n            air.Li(f\"{err['loc'][0]}: {err['msg']}\")\n            for err in flight.errors\n        ])\n    )\n</code></pre>"},{"location":"learn/cookbook/forms/#coming-soon-dependency-injection-form-handling","title":"Coming Soon: Dependency-Injection Form Handling","text":"<p>It is possible to use dependency injection to manage form validation.</p> <p>NOTE: This functionality is currently in development. This feature was working before but currently does not work.</p> <pre><code>from typing import Annotated\n\nfrom fastapi import Depends\nfrom pydantic import BaseModel\nimport air\n\napp = air.Air()\n\n\nclass FlightModel(BaseModel):\n    flight_number: str\n    destination: str\n\n\nclass FlightForm(air.AirForm):\n    model = FlightModel\n\n\n@app.page\nasync def flight():\n    return air.Html(\n        air.H1(\"Flight Form\"),\n        air.Form(\n            air.Input(name=\"flight_number\"),\n            air.Input(name=\"destination\"),\n            air.Button(\"Submit\", type=\"submit\"),\n            method=\"post\",\n            action=\"/flight-info\",\n        ),\n    )\n\n\n@app.post(\"/flight-info\")\nasync def flight_info(flight: Annotated[FlightForm, Depends(FlightForm.validate)]):\n    if flight.is_valid:\n        return air.Html(air.H1(f'{flight.data.flight_number} \u2192 {flight.data.destination}'))\n    return air.Html(air.H1(f\"Errors {len(flight.errors)}\"))\n</code></pre>"},{"location":"learn/cookbook/minimal/","title":"Minimal app","text":"<p>The \"Hello, World\" of Air is:</p> <pre><code>import air\n\napp = air.Air()\n\n@app.get(\"/\")\nasync def index():\n    return air.H1(\"Hello, Air!\", style=\"color: blue;\")\n</code></pre>"},{"location":"learn/cookbook/page-decorator/","title":"The app.page decorator","text":"<p>For simple HTTP GET requests, Air provides the handy @app.page shortcut. It converts the name of the function to a URL, where underscores are replaced with dashes and <code>index</code> is replaced with '/'.</p> <pre><code>import air\n\napp = air.Air()\n\n\n@app.page \ndef index():\n    # Same as route app.get('/')\n    return air.H1('Welcome to our site!')\n\n@app.page\ndef dashboard():\n    # Same as route app.get('/dashboard')\n    return air.H1('Dashboard')\n\n@app.page\ndef show_item():\n    # same as app.get('/get-item')\n    return air.H1('Showing an item')\n</code></pre>"},{"location":"learn/cookbook/static/","title":"Serving static files","text":"<p>You can serve static files like CSS, JavaScript, and images using Air's built-in static file serving capabilities. In this example, we\u2019ll create a simple Air app that serves static files from a <code>static</code> directory, but the name of the directory can be anything (<code>public</code> is also common).</p> <pre><code>import air\n\napp = air.Air()\napp.mount(\"/static\", air.StaticFiles(directory=\"static\"), name=\"static\")\n\n@app.page\ndef index():\n    return air.layouts.mvpcss(\n        air.H1(\"Welcome to My Site!\"),\n        air.Link(rel=\"stylesheet\", href=\"/static/styles.css\"),\n        air.Script(src=\"/static/scripts.js\"),\n        air.Img(src=\"/static/images/logo.png\", alt=\"Logo\"),\n    )\n</code></pre>"}]}